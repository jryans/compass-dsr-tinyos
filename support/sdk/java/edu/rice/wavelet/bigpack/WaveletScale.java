/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'WaveletScale'
 * message type.
 */

package edu.rice.wavelet.bigpack;

public class WaveletScale extends BigPack {

	private static int staticDataLen = size_myState() + size_nbCount()
			+ size_nbPtr();

	public WaveletScale(WaveletNeighbor nb[], short myState) {
		super(staticDataLen, nb);
		if (nb != null) {
			set_nbCount((short) nb.length);
			int arrayDataLen = nb[0].dataLength() * nb.length;
			addPointer(addBlock(staticDataLen, arrayDataLen), addBlock(0,
					staticDataLen), offset_nbPtr());
		} else {
			set_nbCount((short) 0);
			addBlock(0, staticDataLen);
		}
		set_myState(myState);
	}

	// Message-type-specific access methods appear below.

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: myState
	// Field type: short, unsigned
	// Offset (bits): 0
	// Size (bits): 8
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'myState' is signed (false).
	 */
	public static boolean isSigned_myState() {
		return false;
	}

	/**
	 * Return whether the field 'myState' is an array (false).
	 */
	public static boolean isArray_myState() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'myState'
	 */
	public static int offset_myState() {
		return (0 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'myState'
	 */
	public static int offsetBits_myState() {
		return 0;
	}

	/**
	 * Return the value (as a short) of the field 'myState'
	 */
	public short get_myState() {
		return (short) getUIntElement(offsetBits_myState(), 8);
	}

	/**
	 * Set the value of the field 'myState'
	 */
	public void set_myState(short value) {
		setUIntElement(offsetBits_myState(), 8, value);
	}

	/**
	 * Return the size, in bytes, of the field 'myState'
	 */
	public static int size_myState() {
		return (8 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'myState'
	 */
	public static int sizeBits_myState() {
		return 8;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: nbCount
	// Field type: short, unsigned
	// Offset (bits): 8
	// Size (bits): 8
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'nbCount' is signed (false).
	 */
	public static boolean isSigned_nbCount() {
		return false;
	}

	/**
	 * Return whether the field 'nbCount' is an array (false).
	 */
	public static boolean isArray_nbCount() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'nbCount'
	 */
	public static int offset_nbCount() {
		return (8 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'nbCount'
	 */
	public static int offsetBits_nbCount() {
		return 8;
	}

	/**
	 * Return the value (as a short) of the field 'nbCount'
	 */
	public short get_nbCount() {
		return (short) getUIntElement(offsetBits_nbCount(), 8);
	}

	/**
	 * Set the value of the field 'nbCount'
	 */
	public void set_nbCount(short value) {
		setUIntElement(offsetBits_nbCount(), 8, value);
	}

	/**
	 * Return the size, in bytes, of the field 'nbCount'
	 */
	public static int size_nbCount() {
		return (8 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'nbCount'
	 */
	public static int sizeBits_nbCount() {
		return 8;
	}

	// ///////////////////////////////////////////////////////
	// TEMP STORAGE SPACE, WILL BE OVERWRITTEN!
	// Accessor methods for field: nbPtr
	// Field type: unsigned int
	// Offset (bits): 16
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return the size, in bytes, of the field 'nbPtr'
	 */
	private static int size_nbPtr() {
		return (16 / 8);
	}

	/**
	 * Return the offset (in bytes) of the field 'nbPtr'
	 */
	public static int offset_nbPtr() {
		return (16 / 8);
	}

}

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'StatsWTS'
 * message type.
 */

package edu.rice.wavelet.bigpack;

import java.util.List;

public class StatsWTS extends BigPack {

	/** The default size of this message type in bytes. */
	public static final int DEFAULT_MESSAGE_SIZE = 3;

	/**
	 * Create a new StatsWTS using the given byte array as backing store.
	 */
	public StatsWTS(byte[] rawData, int blockNum, List nBlocks, List nPtrs) {
		super(rawData, DEFAULT_MESSAGE_SIZE, blockNum, nBlocks, nPtrs);
	}

	protected void initChildren() {
		nb = new StatsWTNB[get_nbCount()];
	}

	protected void storeChildren(byte[] rawData, int offset, int[] childBlockNum,
			List[] childPtr) {
		if (offset == offset_nb()) {
			for (int c = 0; c < get_nbCount(); c++)
				nb[c] = new StatsWTNB(rawData, childBlockNum[c], blocks, childPtr[c], c);
		}
	}

	protected int numChildren(int offset) {
		if (offset == offset_nb()) {
			return get_nbCount();
		}
		return 0;
	}

	protected int numChildTypes() {
		return 1;
	}

	// Message-type-specific access methods appear below.

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: nbCount
	// Field type: short, unsigned
	// Offset (bits): 0
	// Size (bits): 8
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'nbCount' is signed (false).
	 */
	public static boolean isSigned_nbCount() {
		return false;
	}

	/**
	 * Return whether the field 'nbCount' is an array (false).
	 */
	public static boolean isArray_nbCount() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'nbCount'
	 */
	public static int offset_nbCount() {
		return (0 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'nbCount'
	 */
	public static int offsetBits_nbCount() {
		return 0;
	}

	/**
	 * Return the value (as a short) of the field 'nbCount'
	 */
	public short get_nbCount() {
		return (short) getUIntElement(offsetBits_nbCount(), 8);
	}

	/**
	 * Set the value of the field 'nbCount'
	 */
	public void set_nbCount(short value) {
		setUIntElement(offsetBits_nbCount(), 8, value);
	}

	/**
	 * Return the size, in bytes, of the field 'nbCount'
	 */
	public static int size_nbCount() {
		return (8 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'nbCount'
	 */
	public static int sizeBits_nbCount() {
		return 8;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: nb
	// Field type: consolidated array
	// Offset (bits): 8
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	private StatsWTNB[] nb;

	/**
	 * Return the offset (in bytes) of the pointer to array 'nb'
	 */
	public static int offset_nb() {
		return (8 / 8);
	}

	/**
	 * Return the array 'nb'
	 */
	public StatsWTNB[] get_nb() {
		return nb;
	}

	/**
	 * Set the array 'nb'
	 */
	public void set_nb(StatsWTNB[] value) {
		nb = value;
	}

}

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'StatsWTNB'
 * message type.
 */

package edu.rice.wavelet.bigpack;

import java.util.List;

public class StatsWTNB extends BigPack {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 4;

    /**
  	 * Create a new StatsWTNB using the given byte array as backing store.
  	 */
  	public StatsWTNB(byte[] rawData, int blockNum, List nBlocks, List nPtrs, int cOffset) {
  		super(rawData, DEFAULT_MESSAGE_SIZE, blockNum, nBlocks, nPtrs, cOffset);
  	}

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: retries
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'retries' is signed (false).
     */
    public static boolean isSigned_retries() {
        return false;
    }

    /**
     * Return whether the field 'retries' is an array (false).
     */
    public static boolean isArray_retries() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'retries'
     */
    public static int offset_retries() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'retries'
     */
    public static int offsetBits_retries() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'retries'
     */
    public short get_retries() {
        return (short)getUIntElement(offsetBits_retries(), 8);
    }

    /**
     * Set the value of the field 'retries'
     */
    public void set_retries(short value) {
        setUIntElement(offsetBits_retries(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'retries'
     */
    public static int size_retries() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'retries'
     */
    public static int sizeBits_retries() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: cacheHits
    //   Field type: short, unsigned
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'cacheHits' is signed (false).
     */
    public static boolean isSigned_cacheHits() {
        return false;
    }

    /**
     * Return whether the field 'cacheHits' is an array (false).
     */
    public static boolean isArray_cacheHits() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'cacheHits'
     */
    public static int offset_cacheHits() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'cacheHits'
     */
    public static int offsetBits_cacheHits() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'cacheHits'
     */
    public short get_cacheHits() {
        return (short)getUIntElement(offsetBits_cacheHits(), 8);
    }

    /**
     * Set the value of the field 'cacheHits'
     */
    public void set_cacheHits(short value) {
        setUIntElement(offsetBits_cacheHits(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'cacheHits'
     */
    public static int size_cacheHits() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'cacheHits'
     */
    public static int sizeBits_cacheHits() {
        return 8;
    }

}

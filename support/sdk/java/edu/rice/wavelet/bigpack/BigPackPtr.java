/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BigPackPtr'
 * message type.
 */

package edu.rice.wavelet.bigpack;

public class BigPackPtr extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 4;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = -1;

    /** Create a new BigPackPtr of size 4. */
    public BigPackPtr() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BigPackPtr of the given data_length. */
    public BigPackPtr(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BigPackPtr with the given data_length
     * and base offset.
     */
    public BigPackPtr(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BigPackPtr using the given byte array
     * as backing store.
     */
    public BigPackPtr(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BigPackPtr using the given byte array
     * as backing store, with the given base offset.
     */
    public BigPackPtr(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BigPackPtr using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BigPackPtr(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BigPackPtr embedded in the given message
     * at the given base offset.
     */
    public BigPackPtr(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BigPackPtr embedded in the given message
     * at the given base offset and length.
     */
    public BigPackPtr(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BigPackPtr> \n";
      try {
        s += "  [addrOfBlock=0x"+Long.toHexString(get_addrOfBlock())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [destBlock=0x"+Long.toHexString(get_destBlock())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [destOffset=0x"+Long.toHexString(get_destOffset())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [blockArray=0x"+Long.toHexString(get_blockArray())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: addrOfBlock
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'addrOfBlock' is signed (false).
     */
    public static boolean isSigned_addrOfBlock() {
        return false;
    }

    /**
     * Return whether the field 'addrOfBlock' is an array (false).
     */
    public static boolean isArray_addrOfBlock() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'addrOfBlock'
     */
    public static int offset_addrOfBlock() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'addrOfBlock'
     */
    public static int offsetBits_addrOfBlock() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'addrOfBlock'
     */
    public short get_addrOfBlock() {
        return (short)getUIntElement(offsetBits_addrOfBlock(), 8);
    }

    /**
     * Set the value of the field 'addrOfBlock'
     */
    public void set_addrOfBlock(short value) {
        setUIntElement(offsetBits_addrOfBlock(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'addrOfBlock'
     */
    public static int size_addrOfBlock() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'addrOfBlock'
     */
    public static int sizeBits_addrOfBlock() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: destBlock
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'destBlock' is signed (false).
     */
    public static boolean isSigned_destBlock() {
        return false;
    }

    /**
     * Return whether the field 'destBlock' is an array (false).
     */
    public static boolean isArray_destBlock() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'destBlock'
     */
    public static int offset_destBlock() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'destBlock'
     */
    public static int offsetBits_destBlock() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'destBlock'
     */
    public short get_destBlock() {
        return (short)getUIntElement(offsetBits_destBlock(), 8);
    }

    /**
     * Set the value of the field 'destBlock'
     */
    public void set_destBlock(short value) {
        setUIntElement(offsetBits_destBlock(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'destBlock'
     */
    public static int size_destBlock() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'destBlock'
     */
    public static int sizeBits_destBlock() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: destOffset
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'destOffset' is signed (false).
     */
    public static boolean isSigned_destOffset() {
        return false;
    }

    /**
     * Return whether the field 'destOffset' is an array (false).
     */
    public static boolean isArray_destOffset() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'destOffset'
     */
    public static int offset_destOffset() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'destOffset'
     */
    public static int offsetBits_destOffset() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'destOffset'
     */
    public short get_destOffset() {
        return (short)getUIntElement(offsetBits_destOffset(), 8);
    }

    /**
     * Set the value of the field 'destOffset'
     */
    public void set_destOffset(short value) {
        setUIntElement(offsetBits_destOffset(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'destOffset'
     */
    public static int size_destOffset() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'destOffset'
     */
    public static int sizeBits_destOffset() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: blockArray
    //   Field type: short, unsigned
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'blockArray' is signed (false).
     */
    public static boolean isSigned_blockArray() {
        return false;
    }

    /**
     * Return whether the field 'blockArray' is an array (false).
     */
    public static boolean isArray_blockArray() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'blockArray'
     */
    public static int offset_blockArray() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'blockArray'
     */
    public static int offsetBits_blockArray() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'blockArray'
     */
    public short get_blockArray() {
        return (short)getUIntElement(offsetBits_blockArray(), 8);
    }

    /**
     * Set the value of the field 'blockArray'
     */
    public void set_blockArray(short value) {
        setUIntElement(offsetBits_blockArray(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'blockArray'
     */
    public static int size_blockArray() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'blockArray'
     */
    public static int sizeBits_blockArray() {
        return 8;
    }

}

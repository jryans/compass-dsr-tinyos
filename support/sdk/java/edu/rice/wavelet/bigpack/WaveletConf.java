/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'WaveletConf'
 * message type.
 */

package edu.rice.wavelet.bigpack;

public class WaveletConf extends BigPack {

	private static int staticDataLen = size_numScales() + size_scalePtr();

	public WaveletConf(WaveletScale scale[]) {
		super(staticDataLen, scale);
		set_numScales((short) scale.length);
		addArray((BigPackBlock) blocks.get(firstMainBlk), addBlock(
				offset_numScales(), staticDataLen), offset_scalePtr());
	}

	public static short getType() {
		return BP_WAVELETCONF;
	}

	// Message-type-specific access methods appear below.

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: numScales
	// Field type: short, unsigned
	// Offset (bits): 0
	// Size (bits): 8
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'numScales' is signed (false).
	 */
	public static boolean isSigned_numScales() {
		return false;
	}

	/**
	 * Return whether the field 'numScales' is an array (false).
	 */
	public static boolean isArray_numScales() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'numScales'
	 */
	public static int offset_numScales() {
		return (0 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'numScales'
	 */
	public static int offsetBits_numScales() {
		return 0;
	}

	/**
	 * Return the value (as a short) of the field 'numScales'
	 */
	public short get_numScales() {
		return (short) getUIntElement(offsetBits_numScales(), 8);
	}

	/**
	 * Set the value of the field 'numScales'
	 */
	public void set_numScales(short value) {
		setUIntElement(offsetBits_numScales(), 8, value);
	}

	/**
	 * Return the size, in bytes, of the field 'numScales'
	 */
	public static int size_numScales() {
		return (8 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'numScales'
	 */
	public static int sizeBits_numScales() {
		return 8;
	}

	// ///////////////////////////////////////////////////////
	// TEMP STORAGE SPACE, WILL BE OVERWRITTEN!
	// Accessor methods for field: scalePtr
	// Field type: unsigned int
	// Offset (bits): 8
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return the size, in bytes, of the field 'scalePtr'
	 */
	private static int size_scalePtr() {
		return (16 / 8);
	}

	/**
	 * Return the offset (in bytes) of the field 'scalePtr'
	 */
	public static int offset_scalePtr() {
		return (8 / 8);
	}

}

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MoteStats'
 * message type.
 */

package edu.rice.wavelet.bigpack;

import java.util.List;

public class MoteStats extends BigPack {

	/** The default size of this message type in bytes. */
	public static final int DEFAULT_MESSAGE_SIZE = 41;

	/**
	 * Create a new MoteStats using the given byte array as backing store.
	 */
	public MoteStats(byte[] data, int numBlks, int numPtrs) {
		super(data, DEFAULT_MESSAGE_SIZE, numBlks, numPtrs);
	}

	public static short getType() {
		return BP_STATS;
	}

	protected void initChildren() {
		wavelet_scale = new StatsWTS[get_wavelet_numScales()];
	}

	protected void storeChildren(byte[] rawData, int offset, int[] childBlockNum,
			List[] childPtr) {
		if (offset == offset_wavelet_scale()) {
			for (int c = 0; c < get_wavelet_numScales(); c++)
				wavelet_scale[c] = new StatsWTS(rawData, childBlockNum[c], blocks,
						childPtr[c]);
		}
	}

	protected int numChildren(int offset) {
		if (offset == offset_wavelet_scale()) {
			return get_wavelet_numScales();
		}
		return 0;
	}

	protected int numChildTypes() {
		return 1;
	}

	public void printStats() {
		System.out.println("  Voltage: " + (get_voltage() / 1000) + " V");
		System.out.println("  Packets:");
		System.out.println("    Received: " + get_pRcvd());
		if (get_pRcvd() > 0) {
			System.out.println("      Min. RSSI:   " + (get_rssiMin() - 45));
			System.out.println("      Max. RSSI:   " + (get_rssiMax() - 45));
			System.out.println("      Mean RSSI:   " + (get_rssiMean() - 45));
			System.out.println("      Median RSSI: " + (get_rssiMedian() - 45));
			System.out.println("      Min. LQI:    " + get_lqiMin());
			System.out.println("      Max. LQI:    " + get_lqiMax());
			System.out.println("      Mean LQI:    " + get_lqiMean());
			System.out.println("      Median LQI:  " + get_lqiMedian());
		}
		System.out.println("    Sent: " + get_pSent());
		if (get_pSent() > 0)
			System.out.println("      ACKed: " + get_pAcked() + " ("
					+ (get_pAcked() * 100 / get_pSent()) + "%)");
		System.out.println("  Messages:");
		System.out.println("    Received: " + get_mRcvd());
		System.out.println("    Sent:     " + get_mSent());
		if (get_mSent() > 0) {
			System.out.println("      Delivered: " + get_mDelivered() + " ("
					+ (get_mDelivered() * 100 / get_mSent()) + "%)");
			System.out.println("      Avg. Retries: " + get_avgRetries());
		}
		StatsWTS scale[] = get_wavelet_scale();
		if (scale.length > 0) {
			System.out.println("  Wavelet:");
			for (int s = scale.length - 1; s >= 0; s--) {
				StatsWTNB nb[] = scale[s].get_nb();
				System.out.println("    Scale " + (s + 1) + ":");
				for (int n = 0; n < nb.length; n++) {
					System.out.println("      Neighbor " + (n + 1) + ":");
					System.out.println("        ID:         " + nb[n].get_id());
					System.out.println("        Retries:    " + nb[n].get_retries());
					System.out.println("        Cache Hits: " + nb[n].get_cacheHits());
				}
			}
		}
	}

	public float get_avgRetries() {
		float r = get_mRetriesSum();
		// Add one more for undelivered messages
		r += get_mSent() - get_mDelivered();
		return r / get_mSent();
	}

	// Message-type-specific access methods appear below.

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: pRcvd
	// Field type: int
	// Offset (bits): 0
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'pRcvd' is signed (false).
	 */
	public static boolean isSigned_pRcvd() {
		return false;
	}

	/**
	 * Return whether the field 'pRcvd' is an array (false).
	 */
	public static boolean isArray_pRcvd() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'pRcvd'
	 */
	public static int offset_pRcvd() {
		return (0 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'pRcvd'
	 */
	public static int offsetBits_pRcvd() {
		return 0;
	}

	/**
	 * Return the value (as a int) of the field 'pRcvd'
	 */
	public int get_pRcvd() {
		return (int) getUIntElement(offsetBits_pRcvd(), 16);
	}

	/**
	 * Set the value of the field 'pRcvd'
	 */
	public void set_pRcvd(int value) {
		setUIntElement(offsetBits_pRcvd(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'pRcvd'
	 */
	public static int size_pRcvd() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'pRcvd'
	 */
	public static int sizeBits_pRcvd() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: rssiMin
	// Field type: byte
	// Offset (bits): 16
	// Size (bits): 8
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'rssiMin' is signed (false).
	 */
	public static boolean isSigned_rssiMin() {
		return false;
	}

	/**
	 * Return whether the field 'rssiMin' is an array (false).
	 */
	public static boolean isArray_rssiMin() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'rssiMin'
	 */
	public static int offset_rssiMin() {
		return (16 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'rssiMin'
	 */
	public static int offsetBits_rssiMin() {
		return 16;
	}

	/**
	 * Return the value (as a byte) of the field 'rssiMin'
	 */
	public byte get_rssiMin() {
		return (byte) getSIntElement(offsetBits_rssiMin(), 8);
	}

	/**
	 * Set the value of the field 'rssiMin'
	 */
	public void set_rssiMin(byte value) {
		setSIntElement(offsetBits_rssiMin(), 8, value);
	}

	/**
	 * Return the size, in bytes, of the field 'rssiMin'
	 */
	public static int size_rssiMin() {
		return (8 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'rssiMin'
	 */
	public static int sizeBits_rssiMin() {
		return 8;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: rssiMax
	// Field type: byte
	// Offset (bits): 24
	// Size (bits): 8
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'rssiMax' is signed (false).
	 */
	public static boolean isSigned_rssiMax() {
		return false;
	}

	/**
	 * Return whether the field 'rssiMax' is an array (false).
	 */
	public static boolean isArray_rssiMax() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'rssiMax'
	 */
	public static int offset_rssiMax() {
		return (24 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'rssiMax'
	 */
	public static int offsetBits_rssiMax() {
		return 24;
	}

	/**
	 * Return the value (as a byte) of the field 'rssiMax'
	 */
	public byte get_rssiMax() {
		return (byte) getSIntElement(offsetBits_rssiMax(), 8);
	}

	/**
	 * Set the value of the field 'rssiMax'
	 */
	public void set_rssiMax(byte value) {
		setSIntElement(offsetBits_rssiMax(), 8, value);
	}

	/**
	 * Return the size, in bytes, of the field 'rssiMax'
	 */
	public static int size_rssiMax() {
		return (8 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'rssiMax'
	 */
	public static int sizeBits_rssiMax() {
		return 8;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: rssiMean
	// Field type: float
	// Offset (bits): 32
	// Size (bits): 32
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'rssiMean' is signed (false).
	 */
	public static boolean isSigned_rssiMean() {
		return false;
	}

	/**
	 * Return whether the field 'rssiMean' is an array (false).
	 */
	public static boolean isArray_rssiMean() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'rssiMean'
	 */
	public static int offset_rssiMean() {
		return (32 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'rssiMean'
	 */
	public static int offsetBits_rssiMean() {
		return 32;
	}

	/**
	 * Return the value (as a float) of the field 'rssiMean'
	 */
	public float get_rssiMean() {
		return (float) getFloatElement(offsetBits_rssiMean(), 32);
	}

	/**
	 * Set the value of the field 'rssiMean'
	 */
	public void set_rssiMean(float value) {
		setFloatElement(offsetBits_rssiMean(), 32, value);
	}

	/**
	 * Return the size, in bytes, of the field 'rssiMean'
	 */
	public static int size_rssiMean() {
		return (32 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'rssiMean'
	 */
	public static int sizeBits_rssiMean() {
		return 32;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: rssiMedian
	// Field type: float
	// Offset (bits): 64
	// Size (bits): 32
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'rssiMedian' is signed (false).
	 */
	public static boolean isSigned_rssiMedian() {
		return false;
	}

	/**
	 * Return whether the field 'rssiMedian' is an array (false).
	 */
	public static boolean isArray_rssiMedian() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'rssiMedian'
	 */
	public static int offset_rssiMedian() {
		return (64 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'rssiMedian'
	 */
	public static int offsetBits_rssiMedian() {
		return 64;
	}

	/**
	 * Return the value (as a float) of the field 'rssiMedian'
	 */
	public float get_rssiMedian() {
		return (float) getFloatElement(offsetBits_rssiMedian(), 32);
	}

	/**
	 * Set the value of the field 'rssiMedian'
	 */
	public void set_rssiMedian(float value) {
		setFloatElement(offsetBits_rssiMedian(), 32, value);
	}

	/**
	 * Return the size, in bytes, of the field 'rssiMedian'
	 */
	public static int size_rssiMedian() {
		return (32 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'rssiMedian'
	 */
	public static int sizeBits_rssiMedian() {
		return 32;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: lqiMin
	// Field type: short
	// Offset (bits): 96
	// Size (bits): 8
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'lqiMin' is signed (false).
	 */
	public static boolean isSigned_lqiMin() {
		return false;
	}

	/**
	 * Return whether the field 'lqiMin' is an array (false).
	 */
	public static boolean isArray_lqiMin() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'lqiMin'
	 */
	public static int offset_lqiMin() {
		return (96 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'lqiMin'
	 */
	public static int offsetBits_lqiMin() {
		return 96;
	}

	/**
	 * Return the value (as a short) of the field 'lqiMin'
	 */
	public short get_lqiMin() {
		return (short) getUIntElement(offsetBits_lqiMin(), 8);
	}

	/**
	 * Set the value of the field 'lqiMin'
	 */
	public void set_lqiMin(short value) {
		setUIntElement(offsetBits_lqiMin(), 8, value);
	}

	/**
	 * Return the size, in bytes, of the field 'lqiMin'
	 */
	public static int size_lqiMin() {
		return (8 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'lqiMin'
	 */
	public static int sizeBits_lqiMin() {
		return 8;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: lqiMax
	// Field type: short
	// Offset (bits): 104
	// Size (bits): 8
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'lqiMax' is signed (false).
	 */
	public static boolean isSigned_lqiMax() {
		return false;
	}

	/**
	 * Return whether the field 'lqiMax' is an array (false).
	 */
	public static boolean isArray_lqiMax() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'lqiMax'
	 */
	public static int offset_lqiMax() {
		return (104 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'lqiMax'
	 */
	public static int offsetBits_lqiMax() {
		return 104;
	}

	/**
	 * Return the value (as a short) of the field 'lqiMax'
	 */
	public short get_lqiMax() {
		return (short) getUIntElement(offsetBits_lqiMax(), 8);
	}

	/**
	 * Set the value of the field 'lqiMax'
	 */
	public void set_lqiMax(short value) {
		setUIntElement(offsetBits_lqiMax(), 8, value);
	}

	/**
	 * Return the size, in bytes, of the field 'lqiMax'
	 */
	public static int size_lqiMax() {
		return (8 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'lqiMax'
	 */
	public static int sizeBits_lqiMax() {
		return 8;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: lqiMean
	// Field type: float
	// Offset (bits): 112
	// Size (bits): 32
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'lqiMean' is signed (false).
	 */
	public static boolean isSigned_lqiMean() {
		return false;
	}

	/**
	 * Return whether the field 'lqiMean' is an array (false).
	 */
	public static boolean isArray_lqiMean() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'lqiMean'
	 */
	public static int offset_lqiMean() {
		return (112 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'lqiMean'
	 */
	public static int offsetBits_lqiMean() {
		return 112;
	}

	/**
	 * Return the value (as a float) of the field 'lqiMean'
	 */
	public float get_lqiMean() {
		return (float) getFloatElement(offsetBits_lqiMean(), 32);
	}

	/**
	 * Set the value of the field 'lqiMean'
	 */
	public void set_lqiMean(float value) {
		setFloatElement(offsetBits_lqiMean(), 32, value);
	}

	/**
	 * Return the size, in bytes, of the field 'lqiMean'
	 */
	public static int size_lqiMean() {
		return (32 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'lqiMean'
	 */
	public static int sizeBits_lqiMean() {
		return 32;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: lqiMedian
	// Field type: float
	// Offset (bits): 144
	// Size (bits): 32
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'lqiMedian' is signed (false).
	 */
	public static boolean isSigned_lqiMedian() {
		return false;
	}

	/**
	 * Return whether the field 'lqiMedian' is an array (false).
	 */
	public static boolean isArray_lqiMedian() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'lqiMedian'
	 */
	public static int offset_lqiMedian() {
		return (144 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'lqiMedian'
	 */
	public static int offsetBits_lqiMedian() {
		return 144;
	}

	/**
	 * Return the value (as a float) of the field 'lqiMedian'
	 */
	public float get_lqiMedian() {
		return (float) getFloatElement(offsetBits_lqiMedian(), 32);
	}

	/**
	 * Set the value of the field 'lqiMedian'
	 */
	public void set_lqiMedian(float value) {
		setFloatElement(offsetBits_lqiMedian(), 32, value);
	}

	/**
	 * Return the size, in bytes, of the field 'lqiMedian'
	 */
	public static int size_lqiMedian() {
		return (32 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'lqiMedian'
	 */
	public static int sizeBits_lqiMedian() {
		return 32;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: pSent
	// Field type: int
	// Offset (bits): 176
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'pSent' is signed (false).
	 */
	public static boolean isSigned_pSent() {
		return false;
	}

	/**
	 * Return whether the field 'pSent' is an array (false).
	 */
	public static boolean isArray_pSent() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'pSent'
	 */
	public static int offset_pSent() {
		return (176 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'pSent'
	 */
	public static int offsetBits_pSent() {
		return 176;
	}

	/**
	 * Return the value (as a int) of the field 'pSent'
	 */
	public int get_pSent() {
		return (int) getUIntElement(offsetBits_pSent(), 16);
	}

	/**
	 * Set the value of the field 'pSent'
	 */
	public void set_pSent(int value) {
		setUIntElement(offsetBits_pSent(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'pSent'
	 */
	public static int size_pSent() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'pSent'
	 */
	public static int sizeBits_pSent() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: pAcked
	// Field type: int
	// Offset (bits): 192
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'pAcked' is signed (false).
	 */
	public static boolean isSigned_pAcked() {
		return false;
	}

	/**
	 * Return whether the field 'pAcked' is an array (false).
	 */
	public static boolean isArray_pAcked() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'pAcked'
	 */
	public static int offset_pAcked() {
		return (192 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'pAcked'
	 */
	public static int offsetBits_pAcked() {
		return 192;
	}

	/**
	 * Return the value (as a int) of the field 'pAcked'
	 */
	public int get_pAcked() {
		return (int) getUIntElement(offsetBits_pAcked(), 16);
	}

	/**
	 * Set the value of the field 'pAcked'
	 */
	public void set_pAcked(int value) {
		setUIntElement(offsetBits_pAcked(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'pAcked'
	 */
	public static int size_pAcked() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'pAcked'
	 */
	public static int sizeBits_pAcked() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: mRcvd
	// Field type: int
	// Offset (bits): 208
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'mRcvd' is signed (false).
	 */
	public static boolean isSigned_mRcvd() {
		return false;
	}

	/**
	 * Return whether the field 'mRcvd' is an array (false).
	 */
	public static boolean isArray_mRcvd() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'mRcvd'
	 */
	public static int offset_mRcvd() {
		return (208 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'mRcvd'
	 */
	public static int offsetBits_mRcvd() {
		return 208;
	}

	/**
	 * Return the value (as a int) of the field 'mRcvd'
	 */
	public int get_mRcvd() {
		return (int) getUIntElement(offsetBits_mRcvd(), 16);
	}

	/**
	 * Set the value of the field 'mRcvd'
	 */
	public void set_mRcvd(int value) {
		setUIntElement(offsetBits_mRcvd(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'mRcvd'
	 */
	public static int size_mRcvd() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'mRcvd'
	 */
	public static int sizeBits_mRcvd() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: mSent
	// Field type: int
	// Offset (bits): 224
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'mSent' is signed (false).
	 */
	public static boolean isSigned_mSent() {
		return false;
	}

	/**
	 * Return whether the field 'mSent' is an array (false).
	 */
	public static boolean isArray_mSent() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'mSent'
	 */
	public static int offset_mSent() {
		return (224 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'mSent'
	 */
	public static int offsetBits_mSent() {
		return 224;
	}

	/**
	 * Return the value (as a int) of the field 'mSent'
	 */
	public int get_mSent() {
		return (int) getUIntElement(offsetBits_mSent(), 16);
	}

	/**
	 * Set the value of the field 'mSent'
	 */
	public void set_mSent(int value) {
		setUIntElement(offsetBits_mSent(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'mSent'
	 */
	public static int size_mSent() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'mSent'
	 */
	public static int sizeBits_mSent() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: mDelivered
	// Field type: int
	// Offset (bits): 240
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'mDelivered' is signed (false).
	 */
	public static boolean isSigned_mDelivered() {
		return false;
	}

	/**
	 * Return whether the field 'mDelivered' is an array (false).
	 */
	public static boolean isArray_mDelivered() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'mDelivered'
	 */
	public static int offset_mDelivered() {
		return (240 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'mDelivered'
	 */
	public static int offsetBits_mDelivered() {
		return 240;
	}

	/**
	 * Return the value (as a int) of the field 'mDelivered'
	 */
	public int get_mDelivered() {
		return (int) getUIntElement(offsetBits_mDelivered(), 16);
	}

	/**
	 * Set the value of the field 'mDelivered'
	 */
	public void set_mDelivered(int value) {
		setUIntElement(offsetBits_mDelivered(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'mDelivered'
	 */
	public static int size_mDelivered() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'mDelivered'
	 */
	public static int sizeBits_mDelivered() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: mRetriesSum
	// Field type: int
	// Offset (bits): 256
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'mRetriesSum' is signed (false).
	 */
	public static boolean isSigned_mRetriesSum() {
		return false;
	}

	/**
	 * Return whether the field 'mRetriesSum' is an array (false).
	 */
	public static boolean isArray_mRetriesSum() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'mRetriesSum'
	 */
	public static int offset_mRetriesSum() {
		return (256 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'mRetriesSum'
	 */
	public static int offsetBits_mRetriesSum() {
		return 256;
	}

	/**
	 * Return the value (as a int) of the field 'mRetriesSum'
	 */
	public int get_mRetriesSum() {
		return (int) getUIntElement(offsetBits_mRetriesSum(), 16);
	}

	/**
	 * Set the value of the field 'mRetriesSum'
	 */
	public void set_mRetriesSum(int value) {
		setUIntElement(offsetBits_mRetriesSum(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'mRetriesSum'
	 */
	public static int size_mRetriesSum() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'mRetriesSum'
	 */
	public static int sizeBits_mRetriesSum() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: voltage
	// Field type: float
	// Offset (bits): 272
	// Size (bits): 32
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'voltage' is signed (false).
	 */
	public static boolean isSigned_voltage() {
		return false;
	}

	/**
	 * Return whether the field 'voltage' is an array (false).
	 */
	public static boolean isArray_voltage() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'voltage'
	 */
	public static int offset_voltage() {
		return (272 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'voltage'
	 */
	public static int offsetBits_voltage() {
		return 272;
	}

	/**
	 * Return the value (as a float) of the field 'voltage'
	 */
	public float get_voltage() {
		return (float) getFloatElement(offsetBits_voltage(), 32);
	}

	/**
	 * Set the value of the field 'voltage'
	 */
	public void set_voltage(float value) {
		setFloatElement(offsetBits_voltage(), 32, value);
	}

	/**
	 * Return the size, in bytes, of the field 'voltage'
	 */
	public static int size_voltage() {
		return (32 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'voltage'
	 */
	public static int sizeBits_voltage() {
		return 32;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: wavelet.numScales
	// Field type: short
	// Offset (bits): 304
	// Size (bits): 8
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'wavelet.numScales' is signed (false).
	 */
	public static boolean isSigned_wavelet_numScales() {
		return false;
	}

	/**
	 * Return whether the field 'wavelet.numScales' is an array (false).
	 */
	public static boolean isArray_wavelet_numScales() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'wavelet.numScales'
	 */
	public static int offset_wavelet_numScales() {
		return (304 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'wavelet.numScales'
	 */
	public static int offsetBits_wavelet_numScales() {
		return 304;
	}

	/**
	 * Return the value (as a short) of the field 'wavelet.numScales'
	 */
	public short get_wavelet_numScales() {
		return (short) getUIntElement(offsetBits_wavelet_numScales(), 8);
	}

	/**
	 * Set the value of the field 'wavelet.numScales'
	 */
	public void set_wavelet_numScales(short value) {
		setUIntElement(offsetBits_wavelet_numScales(), 8, value);
	}

	/**
	 * Return the size, in bytes, of the field 'wavelet.numScales'
	 */
	public static int size_wavelet_numScales() {
		return (8 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'wavelet.numScales'
	 */
	public static int sizeBits_wavelet_numScales() {
		return 8;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: wavelet.scale
	// Field type: array
	// Offset (bits): 312
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	private StatsWTS[] wavelet_scale;

	/**
	 * Return the offset (in bytes) of the pointer to array 'wavelet.scale'
	 */
	public static int offset_wavelet_scale() {
		return (312 / 8);
	}

	/**
	 * Return the array 'wavelet.scale'
	 */
	public StatsWTS[] get_wavelet_scale() {
		return wavelet_scale;
	}

	/**
	 * Set the array 'wavelet.scale'
	 */
	public void set_wavelet_scale(StatsWTS[] value) {
		wavelet_scale = value;
	}

}

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'WaveletNeighbor'
 * message type.
 */

package edu.rice.wavelet.bigpack;

public class WaveletNeighbor extends net.tinyos.message.Message {

	/** The default size of this message type in bytes. */
	public static final int DEFAULT_MESSAGE_SIZE = 6;

	/** The Active Message type associated with this message. */
	public static final int AM_TYPE = -1;

	/** Create a new WaveletNeighbor of size 6. */
	public WaveletNeighbor() {
		super(DEFAULT_MESSAGE_SIZE);
		amTypeSet(AM_TYPE);
	}

	/** Create a new WaveletNeighbor with the given id and coeff */
	public WaveletNeighbor(int id, float coeff) {
		super(DEFAULT_MESSAGE_SIZE);
		amTypeSet(AM_TYPE);
		set_id(id);
		set_coeff(coeff);
	}

	/** Create a new WaveletNeighbor of the given data_length. */
	public WaveletNeighbor(int data_length) {
		super(data_length);
		amTypeSet(AM_TYPE);
	}

	/**
	 * Create a new WaveletNeighbor with the given data_length and base offset.
	 */
	public WaveletNeighbor(int data_length, int base_offset) {
		super(data_length, base_offset);
		amTypeSet(AM_TYPE);
	}

	/**
	 * Create a new WaveletNeighbor using the given byte array as backing store.
	 */
	public WaveletNeighbor(byte[] data) {
		super(data);
		amTypeSet(AM_TYPE);
	}

	/**
	 * Create a new WaveletNeighbor using the given byte array as backing store,
	 * with the given base offset.
	 */
	public WaveletNeighbor(byte[] data, int base_offset) {
		super(data, base_offset);
		amTypeSet(AM_TYPE);
	}

	/**
	 * Create a new WaveletNeighbor using the given byte array as backing store,
	 * with the given base offset and data length.
	 */
	public WaveletNeighbor(byte[] data, int base_offset, int data_length) {
		super(data, base_offset, data_length);
		amTypeSet(AM_TYPE);
	}

	/**
	 * Create a new WaveletNeighbor embedded in the given message at the given
	 * base offset.
	 */
	public WaveletNeighbor(net.tinyos.message.Message msg, int base_offset) {
		super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
		amTypeSet(AM_TYPE);
	}

	/**
	 * Create a new WaveletNeighbor embedded in the given message at the given
	 * base offset and length.
	 */
	public WaveletNeighbor(net.tinyos.message.Message msg, int base_offset,
			int data_length) {
		super(msg, base_offset, data_length);
		amTypeSet(AM_TYPE);
	}

	/**
	 * /* Return a String representation of this message. Includes the message
	 * type name and the non-indexed field values.
	 */
	public String toString() {
		String s = "Message <WaveletNeighbor> \n";
		try {
			s += "  [id=0x" + Long.toHexString(get_id()) + "]\n";
		} catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */
		}
		try {
			s += "  [coeff=" + Float.toString(get_coeff()) + "]\n";
		} catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */
		}
		return s;
	}

	// Message-type-specific access methods appear below.

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: id
	// Field type: int
	// Offset (bits): 0
	// Size (bits): 16
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'id' is signed (true).
	 */
	public static boolean isSigned_id() {
		return true;
	}

	/**
	 * Return whether the field 'id' is an array (false).
	 */
	public static boolean isArray_id() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'id'
	 */
	public static int offset_id() {
		return (0 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'id'
	 */
	public static int offsetBits_id() {
		return 0;
	}

	/**
	 * Return the value (as a int) of the field 'id'
	 */
	public int get_id() {
		return (int) getUIntElement(offsetBits_id(), 16);
	}

	/**
	 * Set the value of the field 'id'
	 */
	public void set_id(int value) {
		setUIntElement(offsetBits_id(), 16, value);
	}

	/**
	 * Return the size, in bytes, of the field 'id'
	 */
	public static int size_id() {
		return (16 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'id'
	 */
	public static int sizeBits_id() {
		return 16;
	}

	// ///////////////////////////////////////////////////////
	// Accessor methods for field: coeff
	// Field type: float
	// Offset (bits): 16
	// Size (bits): 32
	// ///////////////////////////////////////////////////////

	/**
	 * Return whether the field 'coeff' is signed (true).
	 */
	public static boolean isSigned_coeff() {
		return true;
	}

	/**
	 * Return whether the field 'coeff' is an array (false).
	 */
	public static boolean isArray_coeff() {
		return false;
	}

	/**
	 * Return the offset (in bytes) of the field 'coeff'
	 */
	public static int offset_coeff() {
		return (16 / 8);
	}

	/**
	 * Return the offset (in bits) of the field 'coeff'
	 */
	public static int offsetBits_coeff() {
		return 16;
	}

	/**
	 * Return the value (as a float) of the field 'coeff'
	 */
	public float get_coeff() {
		return getFloatElement(offsetBits_coeff(), 32);
	}

	/**
	 * Set the value of the field 'coeff'
	 */
	public void set_coeff(float value) {
		setFloatElement(offsetBits_coeff(), 32, value);
	}

	/**
	 * Return the size, in bytes, of the field 'coeff'
	 */
	public static int size_coeff() {
		return (32 / 8);
	}

	/**
	 * Return the size, in bits, of the field 'coeff'
	 */
	public static int sizeBits_coeff() {
		return 32;
	}

}

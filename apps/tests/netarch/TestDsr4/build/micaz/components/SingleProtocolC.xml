<?xml version="1.0" ?><component loc="43:/home/jryans/tinyos-2.x-contrib-rice/tos/lib/netarch/single/SingleProtocolC.nc" nicename="SingleProtocolC" qname="SingleProtocolC">
      <documentation loc="43:/home/jryans/tinyos-2.x-contrib-rice/tos/lib/netarch/single/SingleProtocolC.nc">
        <short>

 Defines the default protocol for single destination multihop packets.

</short>
        <long>

 Defines the default protocol for single destination multihop packets.

 To use a differnet protocol, either modify this file to apply the

 change to all applications, or copy this file into an application's

 directory to apply the change to that application only.



 @author Ryan Stinnett

</long>
      </documentation>
      <configuration/>
      <wiring>
        <wire loc="50:/home/jryans/tinyos-2.x-contrib-rice/tos/lib/netarch/single/SingleProtocolC.nc">
          <from><interface-ref name="Packet" ref="0x7d913de0" scoped=""/></from>
          <to><interface-ref name="SubPacket" ref="0x7d912510" scoped=""/></to>
        </wire>
      </wiring>
    <specification/><referenced><interface loc="44:/home/jryans/tinyos-2.x-contrib-rice/tos/lib/netarch/multihop/PacketTransceiverC.nc" name="SubPacket" provided="1" ref="0x7d912510">
      <component-ref nicename="SingleProtocolC.TransceiverC" qname="SingleProtocolC.TransceiverC"/>
      <type-interface alignment="I:4" size="I:4"><interface-ref name="SubPacket" ref="0x7d912510" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.interfaces.Packet" qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" ref="0x7d9126e8" scoped=""/>
        <function-ref name="payloadLength" ref="0x7d9127c8" scoped=""/>
        <function-ref name="getPayload" ref="0x7d9128a8" scoped=""/>
        <function-ref name="maxPayloadLength" ref="0x7d912988" scoped=""/>
        <function-ref name="setPayloadLength" ref="0x7d912a68" scoped=""/>
      </interface-functions>
    </interface><interface loc="43:/home/jryans/tinyos-2.x-contrib-rice/tos/lib/netarch/multihop/PacketTransceiverC.nc" name="Packet" provided="0" ref="0x7d913de0">
      <component-ref nicename="SingleProtocolC.TransceiverC" qname="SingleProtocolC.TransceiverC"/>
      <type-interface alignment="I:4" size="I:4"><interface-ref name="Packet" ref="0x7d913de0" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.interfaces.Packet" qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" ref="0x7d912010" scoped=""/>
        <function-ref name="payloadLength" ref="0x7d9120f0" scoped=""/>
        <function-ref name="getPayload" ref="0x7d9121d0" scoped=""/>
        <function-ref name="maxPayloadLength" ref="0x7d9122b0" scoped=""/>
        <function-ref name="setPayloadLength" ref="0x7d912390" scoped=""/>
      </interface-functions>
    </interface><component loc="42(SingleProtocolC.TransceiverC):/home/jryans/tinyos-2.x-contrib-rice/tos/lib/netarch/multihop/PacketTransceiverC.nc" nicename="SingleProtocolC.TransceiverC" qname="SingleProtocolC.TransceiverC">
      <documentation loc="42(SingleProtocolC.TransceiverC):/home/jryans/tinyos-2.x-contrib-rice/tos/lib/netarch/multihop/PacketTransceiverC.nc">
        <short>

 Multihop protocols instantiate this component to connect the packet

 engine to the AM layer for a given link layer AM type. </short>
        <long>

 Multihop protocols instantiate this component to connect the packet

 engine to the AM layer for a given link layer AM type.  The Packet

 interface used by this component should be provided by the protocol.

 Similarly, the SubPacket interface provided by this component should

 be used by the protocol to complete the chain of Packet interfaces.



 @author Ryan Stinnett

</long>
      </documentation>
      <instance number="1">
        <component-ref nicename="PacketTransceiverC" qname="PacketTransceiverC"/>
        <arguments>
          <value cst="I:4">
            <type-int alignment="I:4" cname="int" size="I:4"/>
          </value>
        </arguments>
      </instance>
      <configuration/>
      <wiring>
        <wire>
          <from><interface-ref name="SubPacket" ref="0x7d912510" scoped=""/></from>
          <to><interface-ref name="Packet" ref="0x7dffdc88" scoped=""/></to>
        </wire>
        <wire>
          <from><interface-ref name="SubSend" ref="0x7e4e9998" scoped=""/>
          <arguments>
            <value cst="I:4">
              <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
                <typename><typedef-ref name="am_id_t" ref="0x7e881588"/></typename>
              </type-int>
            </value>
          </arguments>
          </from>
          <to><interface-ref name="AMSend" ref="0x7d1f8b90" scoped=""/></to>
        </wire>
        <wire>
          <from><interface-ref name="SubReceive" ref="0x7e4e8320" scoped=""/>
          <arguments>
            <value cst="I:4">
              <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
                <typename><typedef-ref name="am_id_t" ref="0x7e881588"/></typename>
              </type-int>
            </value>
          </arguments>
          </from>
          <to><interface-ref name="Receive" ref="0x7d1f38a0" scoped=""/></to>
        </wire>
        <wire>
          <from><interface-ref name="SubPacket" ref="0x7e4e8ac0" scoped=""/>
          <arguments>
            <value cst="I:4">
              <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
                <typename><typedef-ref name="am_id_t" ref="0x7e881588"/></typename>
              </type-int>
            </value>
          </arguments>
          </from>
          <to><interface-ref name="Packet" ref="0x7d913de0" scoped=""/></to>
        </wire>
      </wiring>
    </component></referenced></component>
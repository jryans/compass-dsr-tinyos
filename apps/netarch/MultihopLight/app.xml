<nesc xmlns="http://www.tinyos.net/nesC">
  <components>
    <component qname="UnicastCountToLedsAppC" loc="79:UnicastCountToLedsAppC.nc">
      <documentation loc="79:UnicastCountToLedsAppC.nc">
        <short>&#10; Configuration for the UnicastCountToLeds application.</short>
        <long>&#10; Configuration for the UnicastCountToLeds application. UnicastCountToLeds&#10; acts very similarly to the TinyOS example applicaton RadioCountToLeds, in&#10; which a 4Hz counter is maintained, and then the value is sent over the radio&#10; and displayed on LEDs of another node. However, here only node 0 sends a&#10; unicast message to node 1 with its value, rather than having each node&#10; broadcast its value in an AM packet every time it gets updated. Normally this&#10; would require nodes 0 and 1 to be within radio range of each other, but by&#10; simply using the send and receive components from the COMPASS framework, the&#10; message can be delivered across multiple hops to reach node 1 (assuming there&#10; is a path connecting node 0 and 1 in the network).&#10;&#10; @author Ryan Stinnett&#10; @author Philip Levis&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MainC" loc="39:/opt/tinyos-2.x/tos/lib/tossim/MainC.nc">
      <configuration/>
    </component>
    <component qname="PlatformC" loc="31:/opt/tinyos-2.x/tos/platforms/mica/sim/PlatformC.nc">
      <documentation loc="31:/opt/tinyos-2.x/tos/platforms/mica/sim/PlatformC.nc">
        <short>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. </short>
        <long>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.4 2006/12/12 18:23:44 vlahan Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="33:/opt/tinyos-2.x/tos/platforms/mica/PlatformP.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/platforms/mica/PlatformP.nc">
        <short>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. </short>
        <long>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.4 2006/12/12 18:23:44 vlahan Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/opt/tinyos-2.x/tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="15:/opt/tinyos-2.x/tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10;</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="18:/opt/tinyos-2.x/tos/platforms/micaz/MotePlatformP.nc">
      <documentation loc="18:/opt/tinyos-2.x/tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10;</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:27">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:23">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:22">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:21">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:20">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:19">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:18">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:17">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:16">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:3">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="31(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="32(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F5):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F6):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.F7):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.G0):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.G1):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.G2):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.G3):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="33(HplAtm128GeneralIOC.G4):/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="10:/opt/tinyos-2.x/tos/platforms/mica/sim/MeasureClockC.nc">
      <documentation loc="10:/opt/tinyos-2.x/tos/platforms/mica/sim/MeasureClockC.nc">
        <short>&#10; Simulation version of MeasureClockC for the mica platform.</short>
        <long>&#10; Simulation version of MeasureClockC for the mica platform. See &#10; tos/platforms/mica/MeasureClockC.nc for more details.&#10;&#10; @author Phil Levis&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SimMainP" loc="35:/opt/tinyos-2.x/tos/lib/tossim/SimMainP.nc">
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="34:/opt/tinyos-2.x/tos/lib/tossim/TinySchedulerC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/tossim/TinySchedulerC.nc">
        <short>&#10; TOSSIM-specific scheduler implementation, which models&#10; tasks as simulation events (in order to capture delay).&#10;&#10;</short>
        <long>&#10; TOSSIM-specific scheduler implementation, which models&#10; tasks as simulation events (in order to capture delay).&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SimSchedulerBasicP" loc="39:/opt/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <documentation loc="39:/opt/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
        <short>&#10; The event queue is the core of the mote side of TOSSIM.</short>
        <long>&#10; The event queue is the core of the mote side of TOSSIM. It is a&#10; wrapper around the underlying heap. Unlike the 1.x version, it is&#10; not re-entrant: merging the Python console and TOSSIM means that&#10; functionality like packet injection/reception from external tools&#10; is on the Python side.&#10;&#10; @author Phil Levis&#10; @date   November 22 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SimMoteP" loc="37:/opt/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <documentation loc="37:/opt/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
        <short>&#10; The TOSSIM abstraction of a mote.</short>
        <long>&#10; The TOSSIM abstraction of a mote. By putting simulation state into&#10; a component, we can scale and reference this state automatically&#10; using nesC's rewriting, rather than managing and indexing into&#10; arrays manually.&#10;&#10; @author Phil Levis&#10; @date   August 19 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TossimActiveMessageC" loc="36:/opt/tinyos-2.x/tos/lib/tossim/TossimActiveMessageC.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/tossim/TossimActiveMessageC.nc">
        <short>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.&#10;&#10;</short>
        <long>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.&#10;&#10; @author Philip Levis&#10; @date December 2 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UnicastCountToLedsC" loc="80:UnicastCountToLedsC.nc">
      <documentation loc="80:UnicastCountToLedsC.nc">
        <short>&#10; Implementation of the UnicastCountToLeds application.</short>
        <long>&#10; Implementation of the UnicastCountToLeds application. UnicastCountToLeds&#10; acts very similarly to the TinyOS example applicaton RadioCountToLeds, in&#10; which a 4Hz counter is maintained, and then the value is sent over the radio&#10; and displayed on LEDs of another node. However, here only node 0 sends a&#10; unicast message to node 1 with its value, rather than having each node&#10; broadcast its value in an AM packet every time it gets updated. Normally this&#10; would require nodes 0 and 1 to be within radio range of each other, but by&#10; simply using the send and receive components from the COMPASS framework, the&#10; message can be delivered across multiple hops to reach node 1 (assuming there&#10; is a path connecting node 0 and 1 in the network).&#10;&#10; @author Ryan Stinnett&#10; @author Philip Levis&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="34:/opt/tinyos-2.x/tos/system/LedsC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10;</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="33:/opt/tinyos-2.x/tos/system/LedsP.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10;</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="33:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
        <short>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. </short>
        <long>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.4 2006/12/12 18:23:44 vlahan Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UnicastCountToLedsAppC.AMSenderC" loc="42(UnicastCountToLedsAppC.AMSenderC):../../../tos/lib/netarch/single/SingleSenderC.nc">
      <instance number="0">
        <component-ref qname="SingleSenderC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SingleProtocolC" loc="43:../../../tos/lib/netarch/single/SingleProtocolC.nc">
      <documentation loc="43:../../../tos/lib/netarch/single/SingleProtocolC.nc">
        <short>&#10;&#10; Defines the default protocol for single destination multihop packets.&#10;&#10;</short>
        <long>&#10;&#10; Defines the default protocol for single destination multihop packets.&#10;&#10; To use a differnet protocol, either modify this file to apply the&#10;&#10; change to all applications, or copy this file into an application's&#10;&#10; directory to apply the change to that application only.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DsrC" loc="40:../../../tos/lib/netarch/dsr/DsrC.nc">
      <configuration/>
    </component>
    <component qname="DsrP" loc="40:../../../tos/lib/netarch/dsr/DsrP.nc">
      <documentation loc="40:../../../tos/lib/netarch/dsr/DsrP.nc">
        <short>&#10;&#10; Bundles the components which route and process DSR.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Bundles the components which route and process DSR.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DsrOptionsC" loc="40:../../../tos/lib/netarch/dsr/DsrOptionsC.nc">
      <configuration/>
    </component>
    <component qname="DsrOptionsC.TlvC" loc="45(DsrOptionsC.TlvC):../../../tos/lib/netarch/tlv/TlvPacketC.nc">
      <documentation loc="45(DsrOptionsC.TlvC):../../../tos/lib/netarch/tlv/TlvPacketC.nc">
        <short>&#10;&#10; A general Type-Length-Value (TLV) data processor within a packet.&#10;&#10;</short>
        <long>&#10;&#10; A general Type-Length-Value (TLV) data processor within a packet.&#10;&#10; This component does not assume any ordering by type among the TLV&#10;&#10; types in a block of types.  If at most one instance of a type is&#10;&#10; allowed, access the type via the TlvSingle interface.  If any number&#10;&#10; of instances are allowed, access the type via the TlvMultiple and&#10;&#10; TlvList interfaces.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TlvPacketC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrOptionsC.TlvC.TlvPacketP" loc="45(DsrOptionsC.TlvC.TlvPacketP):../../../tos/lib/netarch/tlv/TlvPacketP.nc">
      <documentation loc="45(DsrOptionsC.TlvC.TlvPacketP):../../../tos/lib/netarch/tlv/TlvPacketP.nc">
        <short>&#10;&#10; A general Type-Length-Value (TLV) data processor within a packet.&#10;&#10;</short>
        <long>&#10;&#10; A general Type-Length-Value (TLV) data processor within a packet.&#10;&#10; This component does not assume any ordering by type among the TLV&#10;&#10; types in a block of types.  If at most one instance of a type is&#10;&#10; allowed, access the type via the TlvSingle interface.  If any number&#10;&#10; of instances are allowed, access the type via the TlvMultiple and&#10;&#10; TlvList interfaces.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TlvPacketP"/>
      </instance>
      <module/>
    </component>
    <component qname="TlvP" loc="45:../../../tos/lib/netarch/tlv/TlvP.nc">
      <documentation loc="45:../../../tos/lib/netarch/tlv/TlvP.nc">
        <short>&#10;&#10; A general Type-Length-Value (TLV) data processor. </short>
        <long>&#10;&#10; A general Type-Length-Value (TLV) data processor.  This component&#10;&#10; does not assume any ordering by type among the TLV types in a&#10;&#10; block of types.  If at most one instance of a type is allowed,&#10;&#10; access the type via the TlvSingle interface.  If any number of&#10;&#10; instances are allowed, access the type via the TlvMultiple and&#10;&#10; TlvList interfaces.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PacketEngineP" loc="80:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <documentation loc="80:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
        <short>&#10;&#10; Queues packets sent, received, and overheard for a multihop routing&#10;&#10; protocol. </short>
        <long>&#10;&#10; Queues packets sent, received, and overheard for a multihop routing&#10;&#10; protocol.  This &#34;packet engine&#34; is intended to be flexible enough to&#10;&#10; support a wide array of possible protocols.&#10;&#10;&#10;&#10; A control component using the PacketEngine interfaces provided here&#10;&#10; is notified of and can control all of the above packets, while not&#10;&#10; having to deal with packet management issues itself.&#10;&#10;&#10;&#10; At any time after being notified of a packet's reception, the control&#10;&#10; component can modify the packet (if needed) and then instruct this engine&#10;&#10; to take one of the following actions:&#10;&#10;   - Send (pass to lower layer)&#10;&#10;   - Send with Intercept (pass to lower layer if upper layer approves)&#10;&#10;   - Receive (pass to upper layer)&#10;&#10;   - Drop (silently remove)&#10;&#10;&#10;&#10; Note that this allows for some unusual actions to take place, such as&#10;&#10; forcing a receive on a packet the upper layer has sent (which also&#10;&#10; means it won't go on the radio anymore).&#10;&#10;&#10;&#10; The control component is responsible for ensuring the packet is valid&#10;&#10; if it makes any modifications.  For example, it must update the payload&#10;&#10; length if the size of the payload changes.&#10;&#10;&#10;&#10; This component does not request acknowledgements or use any kind of&#10;&#10; automatic retry scheme.  However, the return value of the&#10;&#10; PacketEngine.sendDone event allows the control component to request&#10;&#10; a retry for any packet that failed to send.  The control component or&#10;&#10; the upper layer is certainly free to request acknowledgments on its own.&#10;&#10;&#10;&#10; When disabled, no new packets are accepted into the buffer and the&#10;&#10; packets already in the buffer are not processed but do remain in&#10;&#10; the buffer.  Processing resumes when enabled again.&#10;&#10;&#10;&#10; The AM type of packets sent from the upper layer is copied into the&#10;&#10; packet payload for storage so that multihop protocols can use AM types&#10;&#10; of their own without collisions.&#10;&#10;&#10;&#10; Based on TransceiverM by David Moss, CtpForwardingEngineP by Phil Levis,&#10;&#10; Kyle Jamieson, Omprakash Gnawali, and Rodrigo Fonseca, and&#10;&#10; ForwardingEngineM by Roamin Thouvenin.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RandomC" loc="32:/opt/tinyos-2.x/tos/system/RandomC.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="31:/opt/tinyos-2.x/tos/system/RandomMlcgC.nc">
      <documentation loc="31:/opt/tinyos-2.x/tos/system/RandomMlcgC.nc">
        <short>&#10; This is the configuration for RandomMlcgC, a &#10; multiplicative linear congruential generator. &#10;&#10;</short>
        <long>&#10; This is the configuration for RandomMlcgC, a &#10; multiplicative linear congruential generator. &#10;&#10; @author  Barbara Hohlt&#10; @author  Philip Levis&#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgP" loc="34:/opt/tinyos-2.x/tos/system/RandomMlcgP.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/system/RandomMlcgP.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers. </short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;		S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DsrP.DsrControlP" loc="89(DsrP.DsrControlP):../../../tos/lib/netarch/dsr/DsrControlP.nc">
      <instance number="0">
        <component-ref qname="DsrControlP"/>
        <arguments>
          <value cst="I:20">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.DsrRouteCacheC" loc="40(DsrP.DsrRouteCacheC):../../../tos/lib/netarch/dsr/DsrRouteCacheC.nc">
      <documentation loc="40(DsrP.DsrRouteCacheC):../../../tos/lib/netarch/dsr/DsrRouteCacheC.nc">
        <short>&#10;&#10; Defines the default route cache to use with DSR.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Defines the default route cache to use with DSR.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DsrRouteCacheC"/>
        <arguments>
          <value cst="I:20">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC" loc="42(DsrP.DsrRouteCacheC.SimpleLinkCacheC):../../../tos/lib/netarch/dsr/SimpleLinkCacheC.nc">
      <instance number="0">
        <component-ref qname="SimpleLinkCacheC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_link_id_t" ref="0x7e1217c8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SimpleLinkCacheP" loc="41:../../../tos/lib/netarch/dsr/SimpleLinkCacheP.nc">
      <documentation loc="41:../../../tos/lib/netarch/dsr/SimpleLinkCacheP.nc">
        <short>&#10;&#10; A simple link cache that does not automatically remove links and&#10;&#10; assigns a weight of 1 to all links.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; A simple link cache that does not automatically remove links and&#10;&#10; assigns a weight of 1 to all links.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC" loc="41(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC):../../../tos/lib/data/graph/GraphWeightedC.nc">
      <documentation loc="41(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC):../../../tos/lib/data/graph/GraphWeightedC.nc">
        <short>&#10;&#10; Builds a weighted graph as edges are added and supports finding the single&#10;&#10; source shortest path.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Builds a weighted graph as edges are added and supports finding the single&#10;&#10; source shortest path.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GraphWeightedC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_link_id_t" ref="0x7e1217c8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_edge_unit_weight_t" ref="0x7df50110"/></typename>
          </type-int>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC" loc="41(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC):../../../tos/lib/data/graph/GraphSparseC.nc">
      <documentation loc="41(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC):../../../tos/lib/data/graph/GraphSparseC.nc">
        <short>&#10;&#10; Wires supporting modules needed by any GraphSparseP. </short>
        <long>&#10;&#10; Wires supporting modules needed by any GraphSparseP.  This should be&#10;&#10; combined with a weight module and any processing modules.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GraphSparseC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC" loc="41(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC):../../../tos/lib/data/alloc/IndexedAllocC.nc">
      <instance number="0">
        <component-ref qname="IndexedAllocC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC.IndexedBits" loc="39(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC.IndexedBits):../../../tos/lib/data/alloc/IndexedAllocBitsC.nc">
      <documentation loc="39(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC.IndexedBits):../../../tos/lib/data/alloc/IndexedAllocBitsC.nc">
        <short>&#10;&#10; Packages IndexedAllocBitsP together with its dependencies to create an&#10;&#10; easily usable component.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Packages IndexedAllocBitsP together with its dependencies to create an&#10;&#10; easily usable component.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="IndexedAllocBitsC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC.IndexedBits.Bits" loc="33(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC.IndexedBits.Bits):/opt/tinyos-2.x/tos/system/BitVectorC.nc">
      <documentation loc="33(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC.IndexedBits.Bits):/opt/tinyos-2.x/tos/system/BitVectorC.nc">
        <short>&#10; Generic bit vector implementation.</short>
        <long>&#10; Generic bit vector implementation. Note that if you use this bit vector&#10; from interrupt code, you must use appropriate &#60;code>atomic&#60;/code>&#10; statements to ensure atomicity.&#10;&#10; @param max_bits Bit vector length.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="BitVectorC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC.IndexedBits.IndexedBits" loc="42(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC.IndexedBits.IndexedBits):../../../tos/lib/data/alloc/IndexedAllocBitsP.nc">
      <documentation loc="42(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.IndexedAllocC.IndexedBits.IndexedBits):../../../tos/lib/data/alloc/IndexedAllocBitsP.nc">
        <short>&#10;&#10; A compact indexed allocation scheme using only a bit vector to track the&#10;&#10; elements. </short>
        <long>&#10;&#10; A compact indexed allocation scheme using only a bit vector to track the&#10;&#10; elements.  While this is surely slower than a pointer-based system, it uses&#10;&#10; much less memory.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="IndexedAllocBitsP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.GraphSparseP" loc="40(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.GraphSparseP):../../../tos/lib/data/graph/GraphSparseP.nc">
      <documentation loc="40(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.GraphSparseC.GraphSparseP):../../../tos/lib/data/graph/GraphSparseP.nc">
        <short>&#10;&#10; A sparse graph using adjacency lists.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; A sparse graph using adjacency lists.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GraphSparseP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC" loc="38(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC):../../../tos/lib/data/graph/SourceShortestPathC.nc">
      <documentation loc="38(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC):../../../tos/lib/data/graph/SourceShortestPathC.nc">
        <short>&#10;&#10; Wires supporting modules needed by any SourceShortestPathP.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Wires supporting modules needed by any SourceShortestPathP.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SourceShortestPathC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </value>
          <type-var size="U:" alignment="U:"><typedef-ref name="graph_edge_weight_t" scoped="" ref="0x7df01bd8"/></type-var>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC.PriorityQueueC" loc="40(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC.PriorityQueueC):../../../tos/lib/data/queue/PriorityQueueC.nc">
      <instance number="0">
        <component-ref qname="PriorityQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC.PriorityQueueC.PriorityQueueP" loc="44(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC.PriorityQueueC.PriorityQueueP):../../../tos/lib/data/queue/PriorityQueueP.nc">
      <documentation loc="44(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC.PriorityQueueC.PriorityQueueP):../../../tos/lib/data/queue/PriorityQueueP.nc">
        <short>&#10;&#10; Implements a priority queue sitting on top of an index heap. </short>
        <long>&#10;&#10; Implements a priority queue sitting on top of an index heap.  It be either a&#10;&#10; min or max heap depending on the implementation of the Compare.test command.&#10;&#10; Since this is an index heap, none of the priorities are actually stored here.&#10;&#10; Instead, a component needs only to answer calls of Compare.test (which would&#10;&#10; typically be based on the priorities in some array owned by that component).&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PriorityQueueP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC.SourceShortestPathP" loc="40(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC.SourceShortestPathP):../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <documentation loc="40(DsrP.DsrRouteCacheC.SimpleLinkCacheC.GraphWeightedC.SourceShortestPathC.SourceShortestPathP):../../../tos/lib/data/graph/SourceShortestPathP.nc">
        <short>&#10;&#10; Uses Djikstra's algorithm with a priority queue holding fringe vertices to&#10;&#10; find the single source shortest path. </short>
        <long>&#10;&#10; Uses Djikstra's algorithm with a priority queue holding fringe vertices to&#10;&#10; find the single source shortest path.  All weights are assumed to be&#10;&#10; non-negative.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SourceShortestPathP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </value>
          <type-var size="U:" alignment="U:"><typedef-ref name="graph_edge_weight_t" scoped="" ref="0x7de44a40"/></type-var>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.TrackC" loc="33(DsrP.DsrRouteCacheC.SimpleLinkCacheC.TrackC):/opt/tinyos-2.x/tos/system/BitVectorC.nc">
      <documentation loc="33(DsrP.DsrRouteCacheC.SimpleLinkCacheC.TrackC):/opt/tinyos-2.x/tos/system/BitVectorC.nc">
        <short>&#10; Generic bit vector implementation.</short>
        <long>&#10; Generic bit vector implementation. Note that if you use this bit vector&#10; from interrupt code, you must use appropriate &#60;code>atomic&#60;/code>&#10; statements to ensure atomicity.&#10;&#10; @param max_bits Bit vector length.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="BitVectorC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.DsrRouteCacheC.SimpleLinkCacheC.InitialC" loc="33(DsrP.DsrRouteCacheC.SimpleLinkCacheC.InitialC):/opt/tinyos-2.x/tos/system/BitVectorC.nc">
      <documentation loc="33(DsrP.DsrRouteCacheC.SimpleLinkCacheC.InitialC):/opt/tinyos-2.x/tos/system/BitVectorC.nc">
        <short>&#10; Generic bit vector implementation.</short>
        <long>&#10; Generic bit vector implementation. Note that if you use this bit vector&#10; from interrupt code, you must use appropriate &#60;code>atomic&#60;/code>&#10; statements to ensure atomicity.&#10;&#10; @param max_bits Bit vector length.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="BitVectorC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GraphEdgeUnitWeightC" loc="40:../../../tos/lib/data/graph/GraphEdgeUnitWeightC.nc">
      <documentation loc="40:../../../tos/lib/data/graph/GraphEdgeUnitWeightC.nc">
        <short>&#10;&#10; All edges are fixed at unit weight.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; All edges are fixed at unit weight.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="34:/opt/tinyos-2.x/tos/lib/tossim/ActiveMessageC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/tossim/ActiveMessageC.nc">
        <short>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.&#10;&#10;</short>
        <long>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.&#10;&#10; @author Philip Levis&#10; @date December 2 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="TossimPacketModelC" loc="52:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <documentation loc="52:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
        <short>&#10;&#10; Configuration parameters for a CSMA link.&#10;&#10;</short>
        <long>&#10;&#10; Configuration parameters for a CSMA link.&#10;&#10; @author Philip Levis&#10; @date   Dec 10 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CpmModelC" loc="44:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <documentation loc="44:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10;</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="45:/opt/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
      <documentation loc="45:/opt/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
        <short>&#10; Accessor methods for Active Messages.&#10;&#10;</short>
        <long>&#10; Accessor methods for Active Messages.&#10;&#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DsrP.RouteRequestInCacheC" loc="30(DsrP.RouteRequestInCacheC):../../../tos/lib/data/cache/LruDataCacheC.nc">
      <documentation loc="30(DsrP.RouteRequestInCacheC):../../../tos/lib/data/cache/LruDataCacheC.nc">
        <short>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.&#10;&#10;</short>
        <long>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.&#10;&#10; @author Ryan Stinnett&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="LruDataCacheC"/>
        <arguments>
          <type-tag size="I:16" alignment="I:2"><struct-ref ref="0x7e4b3268"/>
            <typename><typedef-ref name="dsr_route_request_in_t" ref="0x7e4b3588"/></typename>
          </type-tag>
          <value cst="I:8">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrP.RouteRequestInCacheC.CacheP" loc="67(DsrP.RouteRequestInCacheC.CacheP):../../../tos/lib/data/cache/LruDataCacheP.nc">
      <documentation loc="67(DsrP.RouteRequestInCacheC.CacheP):../../../tos/lib/data/cache/LruDataCacheP.nc">
        <short>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;. </short>
        <long>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.  Inserting a data item not in the cache will replace&#10; the oldest, and inserting an element already in the cache will refresh&#10; its age.  Insert and lookup return a pointer to the cached data.  This&#10; component should be wired to an Equal interface to check for equality&#10; on the data type used.&#10;&#10; @author Ryan Stinnett&#10; @author Rodrigo Fonseca&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="LruDataCacheP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="data_cache_item_t" scoped="" ref="0x7dc55538"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.RouteRequestOutCacheC" loc="30(DsrP.RouteRequestOutCacheC):../../../tos/lib/data/cache/LruDataCacheC.nc">
      <documentation loc="30(DsrP.RouteRequestOutCacheC):../../../tos/lib/data/cache/LruDataCacheC.nc">
        <short>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.&#10;&#10;</short>
        <long>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.&#10;&#10; @author Ryan Stinnett&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="LruDataCacheC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7e4b4968"/>
            <typename><typedef-ref name="dsr_route_request_out_t" ref="0x7e4b4ca8"/></typename>
          </type-tag>
          <value cst="I:8">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrP.RouteRequestOutCacheC.CacheP" loc="67(DsrP.RouteRequestOutCacheC.CacheP):../../../tos/lib/data/cache/LruDataCacheP.nc">
      <documentation loc="67(DsrP.RouteRequestOutCacheC.CacheP):../../../tos/lib/data/cache/LruDataCacheP.nc">
        <short>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;. </short>
        <long>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.  Inserting a data item not in the cache will replace&#10; the oldest, and inserting an element already in the cache will refresh&#10; its age.  Insert and lookup return a pointer to the cached data.  This&#10; component should be wired to an Equal interface to check for equality&#10; on the data type used.&#10;&#10; @author Ryan Stinnett&#10; @author Rodrigo Fonseca&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="LruDataCacheP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="data_cache_item_t" scoped="" ref="0x7dc55538"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.RouteRequestOutTimerC" loc="39(DsrP.RouteRequestOutTimerC):../../../tos/lib/data/timer/DataTimerC.nc">
      <documentation loc="39(DsrP.RouteRequestOutTimerC):../../../tos/lib/data/timer/DataTimerC.nc">
        <short>&#10;&#10; A timed series of data items. </short>
        <long>&#10;&#10; A timed series of data items.  The client is notified as each item&#10;&#10; expires.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DataTimerC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
          </type-int>
          <value cst="I:8">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrP.RouteRequestOutTimerC.TimerMilliC" loc="36(DsrP.RouteRequestOutTimerC.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="36(DsrP.RouteRequestOutTimerC.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/opt/tinyos-2.x/tos/system/TimerMilliP.nc">
      <documentation loc="37:/opt/tinyos-2.x/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="33:/opt/tinyos-2.x/tos/platforms/mica/sim/HilTimerMilliC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/platforms/mica/sim/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7e7f3aa0"/>
            <typename><typedef-ref name="TMilli" ref="0x7e7f3c88"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <documentation loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7dbbecc0"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="42:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncC.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncC.nc">
        <short>&#10; The TOSSIM implementation of the Atm128 Timer0.</short>
        <long>&#10; The TOSSIM implementation of the Atm128 Timer0. It is built from a&#10; timer-specific counter component and a generic compare&#10; component. The counter component has an additional simulation-only&#10; interface to let the compare component know when its state has&#10; changed (e.g., TCNTX was set).&#10;&#10; @date November 22 2005&#10;&#10; @author Philip Levis &#60;pal@cs.stanford.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncP" loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <documentation loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
        <short>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. </short>
        <long>                                                                     tab:4&#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: platform_hardware.h,v 1.4 2006/12/12 18:23:44 vlahan Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="35(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="35(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10;</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7e7f3aa0"/>
            <typename><typedef-ref name="TMilli" ref="0x7e7f3c88"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="35(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="35(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10;</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7e7f3aa0"/>
            <typename><typedef-ref name="TMilli" ref="0x7e7f3c88"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="35(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="35(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10;</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7e7f3aa0"/>
            <typename><typedef-ref name="TMilli" ref="0x7e7f3c88"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.RouteRequestOutTimerC.DataTimerP" loc="44(DsrP.RouteRequestOutTimerC.DataTimerP):../../../tos/lib/data/timer/DataTimerP.nc">
      <documentation loc="44(DsrP.RouteRequestOutTimerC.DataTimerP):../../../tos/lib/data/timer/DataTimerP.nc">
        <short>&#10;&#10; A timed series of data items. </short>
        <long>&#10;&#10; A timed series of data items.  The client is notified as each item&#10;&#10; expires.  Uses the Equal interface to allow complex data types, but&#10;&#10; the default supplied works for primitive types.&#10;&#10;&#10;&#10; TODO: Change to use a &#34;first&#34;.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DataTimerP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="data_timer_data_t" scoped="" ref="0x7dc18280"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.ComposeC" loc="33(DsrP.ComposeC):/opt/tinyos-2.x/tos/system/BitVectorC.nc">
      <documentation loc="33(DsrP.ComposeC):/opt/tinyos-2.x/tos/system/BitVectorC.nc">
        <short>&#10; Generic bit vector implementation.</short>
        <long>&#10; Generic bit vector implementation. Note that if you use this bit vector&#10; from interrupt code, you must use appropriate &#60;code>atomic&#60;/code>&#10; statements to ensure atomicity.&#10;&#10; @param max_bits Bit vector length.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BitVectorC"/>
        <arguments>
          <value cst="I:20">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrP.SalvageC" loc="33(DsrP.SalvageC):/opt/tinyos-2.x/tos/system/BitVectorC.nc">
      <documentation loc="33(DsrP.SalvageC):/opt/tinyos-2.x/tos/system/BitVectorC.nc">
        <short>&#10; Generic bit vector implementation.</short>
        <long>&#10; Generic bit vector implementation. Note that if you use this bit vector&#10; from interrupt code, you must use appropriate &#60;code>atomic&#60;/code>&#10; statements to ensure atomicity.&#10;&#10; @param max_bits Bit vector length.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="BitVectorC"/>
        <arguments>
          <value cst="I:20">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrC.DsrTransceiverC" loc="42(DsrC.DsrTransceiverC):../../../tos/lib/netarch/multihop/PacketTransceiverC.nc">
      <documentation loc="42(DsrC.DsrTransceiverC):../../../tos/lib/netarch/multihop/PacketTransceiverC.nc">
        <short>&#10;&#10; Multihop protocols instantiate this component to connect the packet&#10;&#10; engine to the AM layer for a given link layer AM type. </short>
        <long>&#10;&#10; Multihop protocols instantiate this component to connect the packet&#10;&#10; engine to the AM layer for a given link layer AM type.  The Packet&#10;&#10; interface used by this component should be provided by the protocol.&#10;&#10; Similarly, the SubPacket interface provided by this component should&#10;&#10; be used by the protocol to complete the chain of Packet interfaces.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketTransceiverC"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketEngineC" loc="40:../../../tos/lib/netarch/multihop/PacketEngineC.nc">
      <documentation loc="40:../../../tos/lib/netarch/multihop/PacketEngineC.nc">
        <short>&#10;&#10; Wires supporting modules needed by any PacketEngineP.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Wires supporting modules needed by any PacketEngineP.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketEngineC.SendQueueC" loc="30(PacketEngineC.SendQueueC):../../../tos/lib/data/cache/LruDataCacheC.nc">
      <documentation loc="30(PacketEngineC.SendQueueC):../../../tos/lib/data/cache/LruDataCacheC.nc">
        <short>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.&#10;&#10;</short>
        <long>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.&#10;&#10; @author Ryan Stinnett&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="LruDataCacheC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7e4ca9d0"/>
            <typename><typedef-ref name="packet_send_entry_t" ref="0x7e4cac20"/></typename>
          </type-tag>
          <value cst="I:10">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketEngineC.SendQueueC.CacheP" loc="67(PacketEngineC.SendQueueC.CacheP):../../../tos/lib/data/cache/LruDataCacheP.nc">
      <documentation loc="67(PacketEngineC.SendQueueC.CacheP):../../../tos/lib/data/cache/LruDataCacheP.nc">
        <short>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;. </short>
        <long>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.  Inserting a data item not in the cache will replace&#10; the oldest, and inserting an element already in the cache will refresh&#10; its age.  Insert and lookup return a pointer to the cached data.  This&#10; component should be wired to an Equal interface to check for equality&#10; on the data type used.&#10;&#10; @author Ryan Stinnett&#10; @author Rodrigo Fonseca&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="LruDataCacheP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="data_cache_item_t" scoped="" ref="0x7dc55538"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PacketEngineC.ReceivePoolC" loc="41(PacketEngineC.ReceivePoolC):/opt/tinyos-2.x/tos/system/PoolC.nc">
      <documentation loc="41(PacketEngineC.ReceivePoolC):/opt/tinyos-2.x/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.&#10;&#10; </short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006/12/12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
            <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
          </type-tag>
          <value cst="I:10">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketEngineC.ReceivePoolC.PoolP" loc="53(PacketEngineC.ReceivePoolC.PoolP):/opt/tinyos-2.x/tos/system/PoolP.nc">
      <documentation loc="53(PacketEngineC.ReceivePoolC.PoolP):/opt/tinyos-2.x/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.&#10; </short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006/12/12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x7da05938"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PacketEngineC.SendPoolC" loc="41(PacketEngineC.SendPoolC):/opt/tinyos-2.x/tos/system/PoolC.nc">
      <documentation loc="41(PacketEngineC.SendPoolC):/opt/tinyos-2.x/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.&#10;&#10; </short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006/12/12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
            <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
          </type-tag>
          <value cst="I:10">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketEngineC.SendPoolC.PoolP" loc="53(PacketEngineC.SendPoolC.PoolP):/opt/tinyos-2.x/tos/system/PoolP.nc">
      <documentation loc="53(PacketEngineC.SendPoolC.PoolP):/opt/tinyos-2.x/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.&#10; </short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006/12/12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x7da05938"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PacketEngineC.SendStateC" loc="65(PacketEngineC.SendStateC):/opt/tinyos-2.x/tos/system/StateC.nc">
      <documentation loc="65(PacketEngineC.SendStateC):/opt/tinyos-2.x/tos/system/StateC.nc">
        <short>&#10;&#10;</short>
        <long>&#10;&#10; @author David Moss&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="StateImplC" loc="64:/opt/tinyos-2.x/tos/system/StateImplC.nc">
      <documentation loc="64:/opt/tinyos-2.x/tos/system/StateImplC.nc">
        <short>&#10;&#10;</short>
        <long>&#10;&#10; @author David Moss&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="StateImplP" loc="64:/opt/tinyos-2.x/tos/system/StateImplP.nc">
      <documentation loc="64:/opt/tinyos-2.x/tos/system/StateImplP.nc">
        <short>&#10;&#10;</short>
        <long>&#10;&#10; @author David Moss&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PacketEngineC.SendBackoffC" loc="36(PacketEngineC.SendBackoffC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="36(PacketEngineC.SendBackoffC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrC.DsrTransceiverC.AMSenderC" loc="39(DsrC.DsrTransceiverC.AMSenderC):/opt/tinyos-2.x/tos/system/AMSenderC.nc">
      <documentation loc="39(DsrC.DsrTransceiverC.AMSenderC):/opt/tinyos-2.x/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrC.DsrTransceiverC.AMSenderC.AMQueueEntryP" loc="35(DsrC.DsrTransceiverC.AMSenderC.AMQueueEntryP):/opt/tinyos-2.x/tos/system/AMQueueEntryP.nc">
      <documentation loc="35(DsrC.DsrTransceiverC.AMSenderC.AMQueueEntryP):/opt/tinyos-2.x/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10;</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="34:/opt/tinyos-2.x/tos/system/AMQueueP.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.&#10;&#10;</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="37(AMQueueP.AMQueueImplP):/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <documentation loc="37(AMQueueP.AMQueueImplP):/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DsrC.DsrTransceiverC.AMSnoopingReceiverC" loc="36(DsrC.DsrTransceiverC.AMSnoopingReceiverC):/opt/tinyos-2.x/tos/system/AMSnoopingReceiverC.nc">
      <documentation loc="36(DsrC.DsrTransceiverC.AMSnoopingReceiverC):/opt/tinyos-2.x/tos/system/AMSnoopingReceiverC.nc">
        <short>&#10; The virtualized abstraction to hearing all packets of a given AM type,&#10; whether destined for this node or not.&#10;&#10;</short>
        <long>&#10; The virtualized abstraction to hearing all packets of a given AM type,&#10; whether destined for this node or not.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSnoopingReceiverC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrC.SinglePacketProcessorC" loc="39(DsrC.SinglePacketProcessorC):../../../tos/lib/netarch/multihop/PacketProcessorC.nc">
      <documentation loc="39(DsrC.SinglePacketProcessorC):../../../tos/lib/netarch/multihop/PacketProcessorC.nc">
        <short>&#10;&#10; Connects a component that processes packets of a given AM type to the&#10;&#10; packet engine.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Connects a component that processes packets of a given AM type to the&#10;&#10; packet engine.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketProcessorC"/>
        <arguments>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrC.DsrPacketProcessorC" loc="39(DsrC.DsrPacketProcessorC):../../../tos/lib/netarch/multihop/PacketProcessorC.nc">
      <documentation loc="39(DsrC.DsrPacketProcessorC):../../../tos/lib/netarch/multihop/PacketProcessorC.nc">
        <short>&#10;&#10; Connects a component that processes packets of a given AM type to the&#10;&#10; packet engine.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Connects a component that processes packets of a given AM type to the&#10;&#10; packet engine.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PacketProcessorC"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SinglePacketC" loc="40:../../../tos/lib/netarch/single/SinglePacketC.nc">
      <documentation loc="40:../../../tos/lib/netarch/single/SinglePacketC.nc">
        <short>&#10;&#10; Connects to SinglePacketP to supporting modules.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Connects to SinglePacketP to supporting modules.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SinglePacketP" loc="42:../../../tos/lib/netarch/single/SinglePacketP.nc">
      <documentation loc="42:../../../tos/lib/netarch/single/SinglePacketP.nc">
        <short>&#10;&#10; Access and set the properties of a multihop packet with a single&#10;&#10; node address based destination.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Access and set the properties of a multihop packet with a single&#10;&#10; node address based destination.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DsrC.DsrSendC" loc="41(DsrC.DsrSendC):../../../tos/lib/netarch/single/SingleProcessorSenderC.nc">
      <documentation loc="41(DsrC.DsrSendC):../../../tos/lib/netarch/single/SingleProcessorSenderC.nc">
        <short>&#10;&#10; Modified sender for single destination multihop packets of created&#10;&#10; by a PacketEngine processor for a given link layer AM type.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Modified sender for single destination multihop packets of created&#10;&#10; by a PacketEngine processor for a given link layer AM type.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SingleProcessorSenderC"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrC.DsrSendC.PacketSenderC" loc="39(DsrC.DsrSendC.PacketSenderC):../../../tos/lib/netarch/multihop/PacketSenderC.nc">
      <documentation loc="39(DsrC.DsrSendC.PacketSenderC):../../../tos/lib/netarch/multihop/PacketSenderC.nc">
        <short>&#10;&#10; Sender for generic multihop packets of a given application layer&#10;&#10; AM type.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Sender for generic multihop packets of a given application layer&#10;&#10; AM type.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PacketSenderC"/>
        <arguments>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DsrC.DsrSendC.PacketSenderC.PacketEngineClientP" loc="40(DsrC.DsrSendC.PacketSenderC.PacketEngineClientP):../../../tos/lib/netarch/multihop/PacketEngineClientP.nc">
      <documentation loc="40(DsrC.DsrSendC.PacketSenderC.PacketEngineClientP):../../../tos/lib/netarch/multihop/PacketEngineClientP.nc">
        <short>&#10;&#10; Stores the upper AM type and default lower AM type for a packet&#10;&#10; engine client. </short>
        <long>&#10;&#10; Stores the upper AM type and default lower AM type for a packet&#10;&#10; engine client.  These values are stored statically so that no&#10;&#10; RAM is used up to hold them.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketEngineClientP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SingleProtocolC.TransceiverC" loc="42(SingleProtocolC.TransceiverC):../../../tos/lib/netarch/multihop/PacketTransceiverC.nc">
      <documentation loc="42(SingleProtocolC.TransceiverC):../../../tos/lib/netarch/multihop/PacketTransceiverC.nc">
        <short>&#10;&#10; Multihop protocols instantiate this component to connect the packet&#10;&#10; engine to the AM layer for a given link layer AM type. </short>
        <long>&#10;&#10; Multihop protocols instantiate this component to connect the packet&#10;&#10; engine to the AM layer for a given link layer AM type.  The Packet&#10;&#10; interface used by this component should be provided by the protocol.&#10;&#10; Similarly, the SubPacket interface provided by this component should&#10;&#10; be used by the protocol to complete the chain of Packet interfaces.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PacketTransceiverC"/>
        <arguments>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SingleProtocolC.TransceiverC.AMSenderC" loc="39(SingleProtocolC.TransceiverC.AMSenderC):/opt/tinyos-2.x/tos/system/AMSenderC.nc">
      <documentation loc="39(SingleProtocolC.TransceiverC.AMSenderC):/opt/tinyos-2.x/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SingleProtocolC.TransceiverC.AMSenderC.AMQueueEntryP" loc="35(SingleProtocolC.TransceiverC.AMSenderC.AMQueueEntryP):/opt/tinyos-2.x/tos/system/AMQueueEntryP.nc">
      <documentation loc="35(SingleProtocolC.TransceiverC.AMSenderC.AMQueueEntryP):/opt/tinyos-2.x/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10;</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SingleProtocolC.TransceiverC.AMSnoopingReceiverC" loc="36(SingleProtocolC.TransceiverC.AMSnoopingReceiverC):/opt/tinyos-2.x/tos/system/AMSnoopingReceiverC.nc">
      <documentation loc="36(SingleProtocolC.TransceiverC.AMSnoopingReceiverC):/opt/tinyos-2.x/tos/system/AMSnoopingReceiverC.nc">
        <short>&#10; The virtualized abstraction to hearing all packets of a given AM type,&#10; whether destined for this node or not.&#10;&#10;</short>
        <long>&#10; The virtualized abstraction to hearing all packets of a given AM type,&#10; whether destined for this node or not.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMSnoopingReceiverC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="UnicastCountToLedsAppC.AMSenderC.PacketSenderC" loc="39(UnicastCountToLedsAppC.AMSenderC.PacketSenderC):../../../tos/lib/netarch/multihop/PacketSenderC.nc">
      <documentation loc="39(UnicastCountToLedsAppC.AMSenderC.PacketSenderC):../../../tos/lib/netarch/multihop/PacketSenderC.nc">
        <short>&#10;&#10; Sender for generic multihop packets of a given application layer&#10;&#10; AM type.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Sender for generic multihop packets of a given application layer&#10;&#10; AM type.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <value cst="U:">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="UnicastCountToLedsAppC.AMSenderC.PacketSenderC.PacketEngineClientP" loc="40(UnicastCountToLedsAppC.AMSenderC.PacketSenderC.PacketEngineClientP):../../../tos/lib/netarch/multihop/PacketEngineClientP.nc">
      <documentation loc="40(UnicastCountToLedsAppC.AMSenderC.PacketSenderC.PacketEngineClientP):../../../tos/lib/netarch/multihop/PacketEngineClientP.nc">
        <short>&#10;&#10; Stores the upper AM type and default lower AM type for a packet&#10;&#10; engine client. </short>
        <long>&#10;&#10; Stores the upper AM type and default lower AM type for a packet&#10;&#10; engine client.  These values are stored statically so that no&#10;&#10; RAM is used up to hold them.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PacketEngineClientP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="UnicastCountToLedsAppC.AMReceiverC" loc="41(UnicastCountToLedsAppC.AMReceiverC):../../../tos/lib/netarch/single/SingleReceiverC.nc">
      <documentation loc="41(UnicastCountToLedsAppC.AMReceiverC):../../../tos/lib/netarch/single/SingleReceiverC.nc">
        <short>&#10;&#10; Receiver for single destination multihop packets of a given&#10;&#10; application layer AM type that are destined for this node.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Receiver for single destination multihop packets of a given&#10;&#10; application layer AM type that are destined for this node.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SingleReceiverC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="UnicastCountToLedsAppC.AMReceiverC.PacketReceiverC" loc="39(UnicastCountToLedsAppC.AMReceiverC.PacketReceiverC):../../../tos/lib/netarch/multihop/PacketReceiverC.nc">
      <documentation loc="39(UnicastCountToLedsAppC.AMReceiverC.PacketReceiverC):../../../tos/lib/netarch/multihop/PacketReceiverC.nc">
        <short>&#10;&#10; Receiver for generic multihop packets of a given application layer&#10;&#10; AM type that are destined for this node.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Receiver for generic multihop packets of a given application layer&#10;&#10; AM type that are destined for this node.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PacketReceiverC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="UnicastCountToLedsAppC.TimerMilliC" loc="36(UnicastCountToLedsAppC.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="36(UnicastCountToLedsAppC.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SingleSenderC" loc="42:../../../tos/lib/netarch/single/SingleSenderC.nc" abstract="">
      <parameters>
        <constant name="upperId" ref="0x7e4c8068" loc="42:../../../tos/lib/netarch/single/SingleSenderC.nc">
          <component-ref qname="SingleSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PacketSenderC" loc="39:../../../tos/lib/netarch/multihop/PacketSenderC.nc" abstract="">
      <documentation loc="39:../../../tos/lib/netarch/multihop/PacketSenderC.nc">
        <short>&#10;&#10; Sender for generic multihop packets of a given application layer&#10;&#10; AM type.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Sender for generic multihop packets of a given application layer&#10;&#10; AM type.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="upperId" ref="0x7d901088" loc="39:../../../tos/lib/netarch/multihop/PacketSenderC.nc">
          <component-ref qname="PacketSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
        <constant name="defLowerId" ref="0x7d901218" loc="39:../../../tos/lib/netarch/multihop/PacketSenderC.nc">
          <component-ref qname="PacketSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
        <constant name="clientId" ref="0x7d9013c8" loc="40:../../../tos/lib/netarch/multihop/PacketSenderC.nc">
          <component-ref qname="PacketSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="packet_client_id_t" ref="0x7e4d3820"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="SingleProcessorSenderC" loc="41:../../../tos/lib/netarch/single/SingleProcessorSenderC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/netarch/single/SingleProcessorSenderC.nc">
        <short>&#10;&#10; Modified sender for single destination multihop packets of created&#10;&#10; by a PacketEngine processor for a given link layer AM type.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Modified sender for single destination multihop packets of created&#10;&#10; by a PacketEngine processor for a given link layer AM type.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="lowerId" ref="0x7d908010" loc="41:../../../tos/lib/netarch/single/SingleProcessorSenderC.nc">
          <component-ref qname="SingleProcessorSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="GraphSparseP" loc="40:../../../tos/lib/data/graph/GraphSparseP.nc" abstract="">
      <documentation loc="40:../../../tos/lib/data/graph/GraphSparseP.nc">
        <short>&#10;&#10; A sparse graph using adjacency lists.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; A sparse graph using adjacency lists.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="maxVertices" ref="0x7de938d0" loc="40:../../../tos/lib/data/graph/GraphSparseP.nc">
          <component-ref qname="GraphSparseP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
          </type-int>
        </constant>
        <constant name="maxEdges" ref="0x7de93a78" loc="41:../../../tos/lib/data/graph/GraphSparseP.nc">
          <component-ref qname="GraphSparseP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
          </type-int>
        </constant>
        <constant name="parallelEdges" ref="0x7de93c18" loc="42:../../../tos/lib/data/graph/GraphSparseP.nc">
          <component-ref qname="GraphSparseP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="23:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="23:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7dbbecc0" loc="23:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7dbbecc0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7dbbee40" loc="23:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc" abstract="">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7e6d7970" loc="32:/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7e6d7b10" loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7e6d7cb0" loc="34:/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7e6d7e48" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PoolC" loc="41:/opt/tinyos-2.x/tos/system/PoolC.nc" abstract="">
      <documentation loc="41:/opt/tinyos-2.x/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.&#10;&#10; </short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006/12/12 18:23:47 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="pool_t" ref="0x7da05938" loc="41:/opt/tinyos-2.x/tos/system/PoolC.nc">
          <component-ref qname="PoolC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x7da05938"/></type-var>
        </typedef>
        <constant name="POOL_SIZE" ref="0x7da05ac8" loc="41:/opt/tinyos-2.x/tos/system/PoolC.nc">
          <component-ref qname="PoolC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PacketEngineClientP" loc="40:../../../tos/lib/netarch/multihop/PacketEngineClientP.nc" abstract="">
      <documentation loc="40:../../../tos/lib/netarch/multihop/PacketEngineClientP.nc">
        <short>&#10;&#10; Stores the upper AM type and default lower AM type for a packet&#10;&#10; engine client. </short>
        <long>&#10;&#10; Stores the upper AM type and default lower AM type for a packet&#10;&#10; engine client.  These values are stored statically so that no&#10;&#10; RAM is used up to hold them.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="upper" ref="0x7d8fc900" loc="40:../../../tos/lib/netarch/multihop/PacketEngineClientP.nc">
          <component-ref qname="PacketEngineClientP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
        <constant name="defLower" ref="0x7d8fca90" loc="40:../../../tos/lib/netarch/multihop/PacketEngineClientP.nc">
          <component-ref qname="PacketEngineClientP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SourceShortestPathC" loc="38:../../../tos/lib/data/graph/SourceShortestPathC.nc" abstract="">
      <documentation loc="38:../../../tos/lib/data/graph/SourceShortestPathC.nc">
        <short>&#10;&#10; Wires supporting modules needed by any SourceShortestPathP.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Wires supporting modules needed by any SourceShortestPathP.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="maxVertices" ref="0x7de44778" loc="38:../../../tos/lib/data/graph/SourceShortestPathC.nc">
          <component-ref qname="SourceShortestPathC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
          </type-int>
        </constant>
        <typedef name="graph_edge_weight_t" ref="0x7de44a40" loc="39:../../../tos/lib/data/graph/SourceShortestPathC.nc">
          <component-ref qname="SourceShortestPathC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="graph_edge_weight_t" scoped="" ref="0x7de44a40"/></type-var>
        </typedef>
      </parameters>
      <configuration/>
    </component>
    <component qname="IndexedAllocBitsP" loc="42:../../../tos/lib/data/alloc/IndexedAllocBitsP.nc" abstract="">
      <documentation loc="42:../../../tos/lib/data/alloc/IndexedAllocBitsP.nc">
        <short>&#10;&#10; A compact indexed allocation scheme using only a bit vector to track the&#10;&#10; elements. </short>
        <long>&#10;&#10; A compact indexed allocation scheme using only a bit vector to track the&#10;&#10; elements.  While this is surely slower than a pointer-based system, it uses&#10;&#10; much less memory.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="maxSize" ref="0x7deb1a08" loc="42:../../../tos/lib/data/alloc/IndexedAllocBitsP.nc">
          <component-ref qname="IndexedAllocBitsP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMSnoopingReceiverC" loc="36:/opt/tinyos-2.x/tos/system/AMSnoopingReceiverC.nc" abstract="">
      <documentation loc="36:/opt/tinyos-2.x/tos/system/AMSnoopingReceiverC.nc">
        <short>&#10; The virtualized abstraction to hearing all packets of a given AM type,&#10; whether destined for this node or not.&#10;&#10;</short>
        <long>&#10; The virtualized abstraction to hearing all packets of a given AM type,&#10; whether destined for this node or not.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7d9632f8" loc="36:/opt/tinyos-2.x/tos/system/AMSnoopingReceiverC.nc">
          <component-ref qname="AMSnoopingReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PoolP" loc="53:/opt/tinyos-2.x/tos/system/PoolP.nc" abstract="">
      <documentation loc="53:/opt/tinyos-2.x/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.&#10; </short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006/12/12 18:23:47 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="pool_t" ref="0x7d9fd410" loc="53:/opt/tinyos-2.x/tos/system/PoolP.nc">
          <component-ref qname="PoolP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x7d9fd410"/></type-var>
        </typedef>
        <constant name="size" ref="0x7d9fd598" loc="53:/opt/tinyos-2.x/tos/system/PoolP.nc">
          <component-ref qname="PoolP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="">
      <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7e671c90" loc="33:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7e671e30" loc="34:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7e669010" loc="35:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7e6691a8" loc="36:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="35:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc" abstract="">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10;</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7da8b608" loc="35:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7da8b608"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7da8b790" loc="35:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PacketProcessorC" loc="39:../../../tos/lib/netarch/multihop/PacketProcessorC.nc" abstract="">
      <documentation loc="39:../../../tos/lib/netarch/multihop/PacketProcessorC.nc">
        <short>&#10;&#10; Connects a component that processes packets of a given AM type to the&#10;&#10; packet engine.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Connects a component that processes packets of a given AM type to the&#10;&#10; packet engine.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="lowerId" ref="0x7d95b8c8" loc="39:../../../tos/lib/netarch/multihop/PacketProcessorC.nc">
          <component-ref qname="PacketProcessorC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueImplP" loc="37:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc" abstract="">
      <documentation loc="37:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7d99b010" loc="37:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="LruDataCacheP" loc="67:../../../tos/lib/data/cache/LruDataCacheP.nc" abstract="">
      <documentation loc="67:../../../tos/lib/data/cache/LruDataCacheP.nc">
        <short>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;. </short>
        <long>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.  Inserting a data item not in the cache will replace&#10; the oldest, and inserting an element already in the cache will refresh&#10; its age.  Insert and lookup return a pointer to the cached data.  This&#10; component should be wired to an Equal interface to check for equality&#10; on the data type used.&#10;&#10; @author Ryan Stinnett&#10; @author Rodrigo Fonseca&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <typedef name="data_cache_item_t" ref="0x7dc48b40" loc="67:../../../tos/lib/data/cache/LruDataCacheP.nc">
          <component-ref qname="LruDataCacheP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="data_cache_item_t" scoped="" ref="0x7dc48b40"/></type-var>
        </typedef>
        <constant name="size" ref="0x7dc48cc8" loc="67:../../../tos/lib/data/cache/LruDataCacheP.nc">
          <component-ref qname="LruDataCacheP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SingleReceiverC" loc="41:../../../tos/lib/netarch/single/SingleReceiverC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/netarch/single/SingleReceiverC.nc">
        <short>&#10;&#10; Receiver for single destination multihop packets of a given&#10;&#10; application layer AM type that are destined for this node.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Receiver for single destination multihop packets of a given&#10;&#10; application layer AM type that are destined for this node.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="upperId" ref="0x7d8e68d0" loc="41:../../../tos/lib/netarch/single/SingleReceiverC.nc">
          <component-ref qname="SingleReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="GraphWeightedC" loc="41:../../../tos/lib/data/graph/GraphWeightedC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/data/graph/GraphWeightedC.nc">
        <short>&#10;&#10; Builds a weighted graph as edges are added and supports finding the single&#10;&#10; source shortest path.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Builds a weighted graph as edges are added and supports finding the single&#10;&#10; source shortest path.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="maxVertices" ref="0x7df015c8" loc="41:../../../tos/lib/data/graph/GraphWeightedC.nc">
          <component-ref qname="GraphWeightedC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
          </type-int>
        </constant>
        <constant name="maxEdges" ref="0x7df01770" loc="42:../../../tos/lib/data/graph/GraphWeightedC.nc">
          <component-ref qname="GraphWeightedC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
          </type-int>
        </constant>
        <constant name="parallelEdges" ref="0x7df01910" loc="43:../../../tos/lib/data/graph/GraphWeightedC.nc">
          <component-ref qname="GraphWeightedC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
        </constant>
        <typedef name="graph_edge_weight_t" ref="0x7df01bd8" loc="44:../../../tos/lib/data/graph/GraphWeightedC.nc">
          <component-ref qname="GraphWeightedC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="graph_edge_weight_t" scoped="" ref="0x7df01bd8"/></type-var>
        </typedef>
      </parameters>
      <configuration/>
    </component>
    <component qname="LruDataCacheC" loc="30:../../../tos/lib/data/cache/LruDataCacheC.nc" abstract="">
      <documentation loc="30:../../../tos/lib/data/cache/LruDataCacheC.nc">
        <short>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.&#10;&#10;</short>
        <long>&#10; A LRU data cache that stores data items, where an insert operation&#10; indicates &#34;use&#34;.&#10;&#10; @author Ryan Stinnett&#10;</long>
      </documentation>
      <parameters>
        <typedef name="data_cache_item_t" ref="0x7dc55538" loc="30:../../../tos/lib/data/cache/LruDataCacheC.nc">
          <component-ref qname="LruDataCacheC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="data_cache_item_t" scoped="" ref="0x7dc55538"/></type-var>
        </typedef>
        <constant name="size" ref="0x7dc556c0" loc="30:../../../tos/lib/data/cache/LruDataCacheC.nc">
          <component-ref qname="LruDataCacheC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="IndexedAllocBitsC" loc="39:../../../tos/lib/data/alloc/IndexedAllocBitsC.nc" abstract="">
      <documentation loc="39:../../../tos/lib/data/alloc/IndexedAllocBitsC.nc">
        <short>&#10;&#10; Packages IndexedAllocBitsP together with its dependencies to create an&#10;&#10; easily usable component.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Packages IndexedAllocBitsP together with its dependencies to create an&#10;&#10; easily usable component.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="maxSize" ref="0x7dedada0" loc="39:../../../tos/lib/data/alloc/IndexedAllocBitsC.nc">
          <component-ref qname="IndexedAllocBitsC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10;</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7e6e5428" loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7e6e55b8" loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7e6e5748" loc="31:/opt/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DataTimerC" loc="39:../../../tos/lib/data/timer/DataTimerC.nc" abstract="">
      <documentation loc="39:../../../tos/lib/data/timer/DataTimerC.nc">
        <short>&#10;&#10; A timed series of data items. </short>
        <long>&#10;&#10; A timed series of data items.  The client is notified as each item&#10;&#10; expires.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <typedef name="data_timer_data_t" ref="0x7dc18280" loc="39:../../../tos/lib/data/timer/DataTimerC.nc">
          <component-ref qname="DataTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="data_timer_data_t" scoped="" ref="0x7dc18280"/></type-var>
        </typedef>
        <constant name="maxSize" ref="0x7dc18408" loc="39:../../../tos/lib/data/timer/DataTimerC.nc">
          <component-ref qname="DataTimerC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PacketTransceiverC" loc="42:../../../tos/lib/netarch/multihop/PacketTransceiverC.nc" abstract="">
      <documentation loc="42:../../../tos/lib/netarch/multihop/PacketTransceiverC.nc">
        <short>&#10;&#10; Multihop protocols instantiate this component to connect the packet&#10;&#10; engine to the AM layer for a given link layer AM type. </short>
        <long>&#10;&#10; Multihop protocols instantiate this component to connect the packet&#10;&#10; engine to the AM layer for a given link layer AM type.  The Packet&#10;&#10; interface used by this component should be provided by the protocol.&#10;&#10; Similarly, the SubPacket interface provided by this component should&#10;&#10; be used by the protocol to complete the chain of Packet interfaces.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="lowerId" ref="0x7da1c408" loc="42:../../../tos/lib/netarch/multihop/PacketTransceiverC.nc">
          <component-ref qname="PacketTransceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="IndexedAllocC" loc="41:../../../tos/lib/data/alloc/IndexedAllocC.nc" abstract="">
      <parameters>
        <constant name="MAX_SIZE" ref="0x7dedd218" loc="41:../../../tos/lib/data/alloc/IndexedAllocC.nc">
          <component-ref qname="IndexedAllocC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DataTimerP" loc="44:../../../tos/lib/data/timer/DataTimerP.nc" abstract="">
      <documentation loc="44:../../../tos/lib/data/timer/DataTimerP.nc">
        <short>&#10;&#10; A timed series of data items. </short>
        <long>&#10;&#10; A timed series of data items.  The client is notified as each item&#10;&#10; expires.  Uses the Equal interface to allow complex data types, but&#10;&#10; the default supplied works for primitive types.&#10;&#10;&#10;&#10; TODO: Change to use a &#34;first&#34;.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <typedef name="data_timer_data_t" ref="0x7da51c48" loc="44:../../../tos/lib/data/timer/DataTimerP.nc">
          <component-ref qname="DataTimerP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="data_timer_data_t" scoped="" ref="0x7da51c48"/></type-var>
        </typedef>
        <constant name="maxSize" ref="0x7da51dd0" loc="44:../../../tos/lib/data/timer/DataTimerP.nc">
          <component-ref qname="DataTimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="BitVectorC" loc="33:/opt/tinyos-2.x/tos/system/BitVectorC.nc" abstract="">
      <documentation loc="33:/opt/tinyos-2.x/tos/system/BitVectorC.nc">
        <short>&#10; Generic bit vector implementation.</short>
        <long>&#10; Generic bit vector implementation. Note that if you use this bit vector&#10; from interrupt code, you must use appropriate &#60;code>atomic&#60;/code>&#10; statements to ensure atomicity.&#10;&#10; @param max_bits Bit vector length.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="max_bits" ref="0x7dec38e8" loc="33:/opt/tinyos-2.x/tos/system/BitVectorC.nc">
          <component-ref qname="BitVectorC"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="35:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc" abstract="">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10;</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7dab0b00" loc="35:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7dab0b00"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="GraphSparseC" loc="41:../../../tos/lib/data/graph/GraphSparseC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/data/graph/GraphSparseC.nc">
        <short>&#10;&#10; Wires supporting modules needed by any GraphSparseP. </short>
        <long>&#10;&#10; Wires supporting modules needed by any GraphSparseP.  This should be&#10;&#10; combined with a weight module and any processing modules.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="maxVertices" ref="0x7dee4380" loc="41:../../../tos/lib/data/graph/GraphSparseC.nc">
          <component-ref qname="GraphSparseC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
          </type-int>
        </constant>
        <constant name="maxEdges" ref="0x7dee4528" loc="42:../../../tos/lib/data/graph/GraphSparseC.nc">
          <component-ref qname="GraphSparseC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
          </type-int>
        </constant>
        <constant name="parallelEdges" ref="0x7dee46c8" loc="43:../../../tos/lib/data/graph/GraphSparseC.nc">
          <component-ref qname="GraphSparseC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="StateC" loc="65:/opt/tinyos-2.x/tos/system/StateC.nc" abstract="">
      <documentation loc="65:/opt/tinyos-2.x/tos/system/StateC.nc">
        <short>&#10;&#10;</short>
        <long>&#10;&#10; @author David Moss&#10;&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncP" loc="23:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="">
      <documentation loc="23:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x7dbb3010" loc="23:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x7dbb3010"/></type-var>
        </typedef>
        <constant name="divider" ref="0x7dbb3190" loc="23:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="39:/opt/tinyos-2.x/tos/system/AMSenderC.nc" abstract="">
      <documentation loc="39:/opt/tinyos-2.x/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7d9bd010" loc="39:/opt/tinyos-2.x/tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="35:/opt/tinyos-2.x/tos/system/AMQueueEntryP.nc" abstract="">
      <documentation loc="35:/opt/tinyos-2.x/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10;</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7d9b7490" loc="35:/opt/tinyos-2.x/tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SourceShortestPathP" loc="40:../../../tos/lib/data/graph/SourceShortestPathP.nc" abstract="">
      <documentation loc="40:../../../tos/lib/data/graph/SourceShortestPathP.nc">
        <short>&#10;&#10; Uses Djikstra's algorithm with a priority queue holding fringe vertices to&#10;&#10; find the single source shortest path. </short>
        <long>&#10;&#10; Uses Djikstra's algorithm with a priority queue holding fringe vertices to&#10;&#10; find the single source shortest path.  All weights are assumed to be&#10;&#10; non-negative.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="maxVertices" ref="0x7ddd0010" loc="40:../../../tos/lib/data/graph/SourceShortestPathP.nc">
          <component-ref qname="SourceShortestPathP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
          </type-int>
        </constant>
        <typedef name="graph_edge_weight_t" ref="0x7ddd02d8" loc="41:../../../tos/lib/data/graph/SourceShortestPathP.nc">
          <component-ref qname="SourceShortestPathP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="graph_edge_weight_t" scoped="" ref="0x7ddd02d8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="DsrControlP" loc="89:../../../tos/lib/netarch/dsr/DsrControlP.nc" abstract="">
      <parameters>
        <constant name="BUFFER_SIZE" ref="0x7e120a98" loc="89:../../../tos/lib/netarch/dsr/DsrControlP.nc">
          <component-ref qname="DsrControlP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="DsrRouteCacheC" loc="40:../../../tos/lib/netarch/dsr/DsrRouteCacheC.nc" abstract="">
      <documentation loc="40:../../../tos/lib/netarch/dsr/DsrRouteCacheC.nc">
        <short>&#10;&#10; Defines the default route cache to use with DSR.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Defines the default route cache to use with DSR.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="maxNodes" ref="0x7df58ae0" loc="40:../../../tos/lib/netarch/dsr/DsrRouteCacheC.nc">
          <component-ref qname="DsrRouteCacheC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
          </type-int>
        </constant>
        <constant name="maxLinks" ref="0x7df58c90" loc="41:../../../tos/lib/netarch/dsr/DsrRouteCacheC.nc">
          <component-ref qname="DsrRouteCacheC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="route_cache_link_id_t" ref="0x7e1217c8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="TlvPacketP" loc="45:../../../tos/lib/netarch/tlv/TlvPacketP.nc" abstract="">
      <documentation loc="45:../../../tos/lib/netarch/tlv/TlvPacketP.nc">
        <short>&#10;&#10; A general Type-Length-Value (TLV) data processor within a packet.&#10;&#10;</short>
        <long>&#10;&#10; A general Type-Length-Value (TLV) data processor within a packet.&#10;&#10; This component does not assume any ordering by type among the TLV&#10;&#10; types in a block of types.  If at most one instance of a type is&#10;&#10; allowed, access the type via the TlvSingle interface.  If any number&#10;&#10; of instances are allowed, access the type via the TlvMultiple and&#10;&#10; TlvList interfaces.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleLinkCacheC" loc="42:../../../tos/lib/netarch/dsr/SimpleLinkCacheC.nc" abstract="">
      <parameters>
        <constant name="maxNodes" ref="0x7df44458" loc="42:../../../tos/lib/netarch/dsr/SimpleLinkCacheC.nc">
          <component-ref qname="SimpleLinkCacheC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
          </type-int>
        </constant>
        <constant name="maxLinks" ref="0x7df44608" loc="43:../../../tos/lib/netarch/dsr/SimpleLinkCacheC.nc">
          <component-ref qname="SimpleLinkCacheC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="route_cache_link_id_t" ref="0x7e1217c8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PriorityQueueP" loc="44:../../../tos/lib/data/queue/PriorityQueueP.nc" abstract="">
      <documentation loc="44:../../../tos/lib/data/queue/PriorityQueueP.nc">
        <short>&#10;&#10; Implements a priority queue sitting on top of an index heap. </short>
        <long>&#10;&#10; Implements a priority queue sitting on top of an index heap.  It be either a&#10;&#10; min or max heap depending on the implementation of the Compare.test command.&#10;&#10; Since this is an index heap, none of the priorities are actually stored here.&#10;&#10; Instead, a component needs only to answer calls of Compare.test (which would&#10;&#10; typically be based on the priorities in some array owned by that component).&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="maxSize" ref="0x7de1fe68" loc="44:../../../tos/lib/data/queue/PriorityQueueP.nc">
          <component-ref qname="PriorityQueueP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="35:/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc" abstract="">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10;</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7da5b228" loc="35:/opt/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7da5b228"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="PriorityQueueC" loc="40:../../../tos/lib/data/queue/PriorityQueueC.nc" abstract="">
      <parameters>
        <constant name="maxSize" ref="0x7de3ac28" loc="40:../../../tos/lib/data/queue/PriorityQueueC.nc">
          <component-ref qname="PriorityQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="TimerMilliC" loc="36:/opt/tinyos-2.x/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="36:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PacketReceiverC" loc="39:../../../tos/lib/netarch/multihop/PacketReceiverC.nc" abstract="">
      <documentation loc="39:../../../tos/lib/netarch/multihop/PacketReceiverC.nc">
        <short>&#10;&#10; Receiver for generic multihop packets of a given application layer&#10;&#10; AM type that are destined for this node.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Receiver for generic multihop packets of a given application layer&#10;&#10; AM type that are destined for this node.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <constant name="upperId" ref="0x7d8e2e80" loc="39:../../../tos/lib/netarch/multihop/PacketReceiverC.nc">
          <component-ref qname="PacketReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="TlvPacketC" loc="45:../../../tos/lib/netarch/tlv/TlvPacketC.nc" abstract="">
      <documentation loc="45:../../../tos/lib/netarch/tlv/TlvPacketC.nc">
        <short>&#10;&#10; A general Type-Length-Value (TLV) data processor within a packet.&#10;&#10;</short>
        <long>&#10;&#10; A general Type-Length-Value (TLV) data processor within a packet.&#10;&#10; This component does not assume any ordering by type among the TLV&#10;&#10; types in a block of types.  If at most one instance of a type is&#10;&#10; allowed, access the type via the TlvSingle interface.  If any number&#10;&#10; of instances are allowed, access the type via the TlvMultiple and&#10;&#10; TlvList interfaces.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="SplitControl" loc="66:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
      <documentation loc="66:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface. </short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7e51a010" loc="92:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="85:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10;</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7e51bd58" loc="92:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7e51ab70" loc="117:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="111:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.&#10;&#10;</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7e51a920" loc="117:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7e51ba38" loc="83:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents. </short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="stop" ref="0x7e51a600" loc="109:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="94:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents. </short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="StaticIndexedIterator" loc="42:../../../tos/interfaces/StaticIndexedIterator.nc">
      <documentation loc="42:../../../tos/interfaces/StaticIndexedIterator.nc">
        <short>&#10;&#10; Iteration operations using indices. </short>
        <long>&#10;&#10; Iteration operations using indices.  This interface is the static or&#10;&#10; stateless version which requires a pointer to the structure containing&#10;&#10; the data to be passed in along with the index.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <typedef name="data_source_t" ref="0x7e3d59d0" loc="42:../../../tos/interfaces/StaticIndexedIterator.nc">
          <interfacedef-ref qname="StaticIndexedIterator"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="data_source_t" scoped="" ref="0x7e3d59d0"/></type-var>
        </typedef>
        <typedef name="iterator_item_t" ref="0x7e3d5ae8" loc="42:../../../tos/interfaces/StaticIndexedIterator.nc">
          <interfacedef-ref qname="StaticIndexedIterator"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e3d5ae8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="end" ref="0x7e3d4de8" loc="60:../../../tos/interfaces/StaticIndexedIterator.nc">
        <documentation loc="53:../../../tos/interfaces/StaticIndexedIterator.nc">
          <short>&#10;&#10; Checks whether you have already reached the end.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Checks whether you have already reached the end.&#10;&#10;&#10;&#10; @param d Pointer to the data source.&#10;&#10; @param m Current item's index.&#10;&#10; @return TRUE if the current item is the end, FALSE otherwise.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="StaticIndexedIterator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="iterator_end_t" ref="0x7e407960"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="data_source_t" scoped="" ref="0x7e3d59d0"/></type-var>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e3d5ae8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="d" ref="0x7e3d49f0" loc="60:../../../tos/interfaces/StaticIndexedIterator.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="data_source_t" scoped="" ref="0x7e3d59d0"/></type-var>
            </type-pointer>
          </variable>
          <variable name="m" ref="0x7e3d4b80" loc="60:../../../tos/interfaces/StaticIndexedIterator.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e3d5ae8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="next" ref="0x7e3d44e0" loc="51:../../../tos/interfaces/StaticIndexedIterator.nc">
        <documentation loc="44:../../../tos/interfaces/StaticIndexedIterator.nc">
          <short>&#10;&#10; Gets the index of the next item.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Gets the index of the next item.&#10;&#10;&#10;&#10; @param d Pointer to the data source.&#10;&#10; @param m Current item's index.&#10;&#10; @return The next item's index.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="StaticIndexedIterator"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e3d5ae8"/></type-var>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="data_source_t" scoped="" ref="0x7e3d59d0"/></type-var>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e3d5ae8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="d" ref="0x7e3d4120" loc="51:../../../tos/interfaces/StaticIndexedIterator.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="data_source_t" scoped="" ref="0x7e3d59d0"/></type-var>
            </type-pointer>
          </variable>
          <variable name="m" ref="0x7e3d42b0" loc="51:../../../tos/interfaces/StaticIndexedIterator.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e3d5ae8"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SinglePacket" loc="39:../../../tos/lib/netarch/single/SinglePacket.nc">
      <documentation loc="39:../../../tos/lib/netarch/single/SinglePacket.nc">
        <short>&#10;&#10; Access and set the properties of a multihop packet with a single&#10;&#10; node address based destination.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Access and set the properties of a multihop packet with a single&#10;&#10; node address based destination.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="source" ref="0x7e4c3010" loc="47:../../../tos/lib/netarch/single/SinglePacket.nc">
        <documentation loc="41:../../../tos/lib/netarch/single/SinglePacket.nc">
          <short>&#10;&#10; Returns the address of the source of the multihop packet.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Returns the address of the source of the multihop packet.&#10;&#10;&#10;&#10; @param msg Pointer to the packet.&#10;&#10; @return The source node of the multihop packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SinglePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e4c4cf8" loc="47:../../../tos/lib/netarch/single/SinglePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7e4c2158" loc="67:../../../tos/lib/netarch/single/SinglePacket.nc">
        <documentation loc="61:../../../tos/lib/netarch/single/SinglePacket.nc">
          <short>&#10;&#10; Returns the address of the destination of the multihop packet.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Returns the address of the destination of the multihop packet.&#10;&#10;&#10;&#10; @param msg Pointer to the packet.&#10;&#10; @return The destination node of the multihop packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SinglePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e4c3ed0" loc="67:../../../tos/lib/netarch/single/SinglePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7e4c39c8" loc="59:../../../tos/lib/netarch/single/SinglePacket.nc">
        <documentation loc="49:../../../tos/lib/netarch/single/SinglePacket.nc">
          <short>&#10;&#10; Sets the address of the source of the multihop packet. </short>
          <long>&#10;&#10; Sets the address of the source of the multihop packet.  As with&#10;&#10; the AM layer, this is set by the multihop layer, and should not&#10;&#10; need to be used when sending a packet.  However, buffers or other&#10;&#10; storage components may wish to use it to store the address for&#10;&#10; later retrieval.&#10;&#10;&#10;&#10; @param msg Pointer to the packet.&#10;&#10; @param src The source node of the multihop packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SinglePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e4c3508" loc="59:../../../tos/lib/netarch/single/SinglePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="src" ref="0x7e4c3698" loc="59:../../../tos/lib/netarch/single/SinglePacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7e4c2b18" loc="79:../../../tos/lib/netarch/single/SinglePacket.nc">
        <documentation loc="69:../../../tos/lib/netarch/single/SinglePacket.nc">
          <short>&#10;&#10; Sets the address of the destination of the multihop packet. </short>
          <long>&#10;&#10; Sets the address of the destination of the multihop packet.  As&#10;&#10; with the AM layer, this is set by the multihop layer, and should not&#10;&#10; need to be used when sending a packet.  However, buffers or other&#10;&#10; storage components may wish to use it to store the address for&#10;&#10; later retrieval.&#10;&#10;&#10;&#10; @param msg Pointer to the packet.&#10;&#10; @param dest The destination node of the multihop packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SinglePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e4c2650" loc="79:../../../tos/lib/netarch/single/SinglePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dest" ref="0x7e4c27e0" loc="79:../../../tos/lib/netarch/single/SinglePacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7e4c0370" loc="89:../../../tos/lib/netarch/single/SinglePacket.nc">
        <documentation loc="81:../../../tos/lib/netarch/single/SinglePacket.nc">
          <short>&#10;&#10; As with the AM layer, returns whether this node is the destination&#10;&#10; for the packet, but can also include special processing for broadcast&#10;&#10; addresses or similar values.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; As with the AM layer, returns whether this node is the destination&#10;&#10; for the packet, but can also include special processing for broadcast&#10;&#10; addresses or similar values.&#10;&#10;&#10;&#10; @param msg Pointer to the packet.&#10;&#10; @return Whether this node is the destination of the multihop packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SinglePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e4c0030" loc="89:../../../tos/lib/netarch/single/SinglePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="39:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
      <documentation loc="39:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10;</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7e752510" loc="49:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
        <documentation loc="40:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Pool" loc="50:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
      <documentation loc="50:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
        <short>&#10;  An allocation pool of a specific type memory objects.&#10; </short>
        <long>&#10;  An allocation pool of a specific type memory objects.&#10;  The Pool allows components to allocate (&#60;code>get&#60;/code>)&#10;  and deallocate (&#60;code>put&#60;/code>) elements. The pool&#10;  does not require that deallocations be items which were&#10;  originally allocated. E.g., a program can create two&#10;  pools of the same type and pass items between them.&#10;  This allows, for example, a component to allocate a pool&#10;  of message buffers and freely buffer swap them on&#10;  Receive.receive events.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2006/12/12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7e2eaee0" loc="50:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
          <interfacedef-ref qname="Pool"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7e2eaee0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7e2e15f8" loc="96:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
        <documentation loc="90:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>&#10; Allocate an element from the pool.&#10;&#10;</short>
          <long>&#10; Allocate an element from the pool.&#10;&#10; @return A pointer if the pool is not empty, NULL if&#10; the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7e2eaee0"/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7e2e2c10" loc="80:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
        <documentation loc="74:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).&#10;&#10;</short>
          <long>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).&#10;&#10; @return Maximum size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="empty" ref="0x7e2e2410" loc="61:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>&#10; Returns whether there any elements remaining in the pool.&#10;</short>
          <long>&#10; Returns whether there any elements remaining in the pool.&#10; If empty returns TRUE, then &#60;code>get&#60;/code> will return&#10; NULL. If empty returns FALSE, then &#60;code>get&#60;/code> will&#10; return a pointer to an object.&#10;&#10; @return Whether the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="put" ref="0x7e2e1248" loc="88:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
        <documentation loc="82:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>&#10; Deallocate an object, putting it back into the pool.&#10;&#10;</short>
          <long>&#10; Deallocate an object, putting it back into the pool.&#10;&#10; @return SUCCESS if the entry was put in successfully, FAIL&#10; if the pool is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7e2eaee0"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7e2e1010" loc="88:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7e2eaee0"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7e2e2850" loc="72:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>&#10; Returns how many elements are in the pool.</short>
          <long>&#10; Returns how many elements are in the pool. If size&#10; returns 0, empty() will return TRUE. If size returns&#10; a non-zero value, empty() will return FALSE. The&#10; return value of size is always &#38;lte; the return&#10; value of maxSize().&#10;&#10; @return How many elements are in the pool.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="44:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7e828370" loc="56:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
        <documentation loc="46:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7e828778" loc="64:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="15:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
      <documentation loc="15:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <short>&#10;&#10;</short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="controlBusy" ref="0x7db91a30" loc="38:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="34:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10;</short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x7db91e28" loc="44:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10;</short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setTimer0Asynchronous" ref="0x7db91638" loc="32:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="29:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x7db89248" loc="50:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10;</short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x7db99d70" loc="21:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="17:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10;</short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe4208"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x7dbe4458"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x7db912f0" loc="27:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="23:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10;</short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe4208"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x7dbe4458"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x7db91100" loc="27:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe4208"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x7dbe4458"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketEngineClient" loc="40:../../../tos/lib/netarch/multihop/PacketEngineClient.nc">
      <documentation loc="40:../../../tos/lib/netarch/multihop/PacketEngineClient.nc">
        <short>&#10;&#10; Stores the upper AM type and default lower AM type for a packet&#10;&#10; engine client. </short>
        <long>&#10;&#10; Stores the upper AM type and default lower AM type for a packet&#10;&#10; engine client.  This information aids in moving between the two kinds&#10;&#10; of AM types.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperType" ref="0x7e2ee3e0" loc="47:../../../tos/lib/netarch/multihop/PacketEngineClient.nc">
        <documentation loc="42:../../../tos/lib/netarch/multihop/PacketEngineClient.nc">
          <short>&#10;&#10; Returns the upper AM type used by this client above the the packet&#10;&#10; engine layer.&#10;&#10;</short>
          <long>&#10;&#10; Returns the upper AM type used by this client above the the packet&#10;&#10; engine layer.&#10;&#10; @return The upper AM type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngineClient"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="defaultLowerType" ref="0x7e2ee9a8" loc="54:../../../tos/lib/netarch/multihop/PacketEngineClient.nc">
        <documentation loc="49:../../../tos/lib/netarch/multihop/PacketEngineClient.nc">
          <short>&#10;&#10; Returns the default lower AM type packets sent by this client should&#10;&#10; initially be set to.&#10;&#10;</short>
          <long>&#10;&#10; Returns the default lower AM type packets sent by this client should&#10;&#10; initially be set to.&#10;&#10; @return The default lower AM type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngineClient"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="TossimPacket" loc="44:/opt/tinyos-2.x/tos/lib/tossim/TossimPacket.nc">
      <documentation loc="44:/opt/tinyos-2.x/tos/lib/tossim/TossimPacket.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.6 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="strength" ref="0x7e587010" loc="45:/opt/tinyos-2.x/tos/lib/tossim/TossimPacket.nc">
        <interfacedef-ref qname="TossimPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x7feb0930"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e588e88" loc="45:/opt/tinyos-2.x/tos/lib/tossim/TossimPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TlvMultiple" loc="42:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
      <documentation loc="42:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
        <short>&#10;&#10; Access data stored in a generalized Type-Length-Value (TLV) block.&#10;&#10;</short>
        <long>&#10;&#10; Access data stored in a generalized Type-Length-Value (TLV) block.&#10;&#10; This interface, when used together with the TlvList interface, has&#10;&#10; no restrictions of the number of instances of a type.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="value" ref="0x7e3a6d50" loc="85:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
        <documentation loc="77:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
          <short>&#10;&#10; Returns the value in this type instance within the TLV block. </short>
          <long>&#10;&#10; Returns the value in this type instance within the TLV block.  If&#10;&#10; the type instance is not found in the block, then NULL is returned.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @param key Key for the TLV type instance.&#10;&#10; @return Pointer to the value in this TLV type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3a68d0" loc="85:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="key" ref="0x7e3a6a60" loc="85:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="list" ref="0x7e3a3078" loc="126:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
        <documentation loc="117:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
          <short>&#10;&#10; Access a list of all instances of a type within the TLV block.&#10;&#10;</short>
          <long>&#10;&#10; Access a list of all instances of a type within the TLV block.&#10;&#10; This command gives the key for the first such instance.&#10;&#10; Traverse the rest of the list with the TlvList interface.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @return The key for the first instance of a type in the TLV&#10;&#10;         block.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3a4d40" loc="126:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="remove" ref="0x7e3a4860" loc="115:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
        <documentation loc="106:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
          <short>&#10;&#10; Removes this type instance from the TLV block.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Removes this type instance from the TLV block.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @param key Key for the TLV type instance.&#10;&#10; @param trailLen Current length of trailing data.&#10;&#10; @return SUCCESS if the type instance was found and removed, EINVAL&#10;&#10;         otherwise.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3a4278" loc="115:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="key" ref="0x7e3a4408" loc="115:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </variable>
          <variable name="trailLen" ref="0x7e3a4598" loc="115:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="length" ref="0x7e3a8348" loc="52:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
        <documentation loc="44:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
          <short>&#10;&#10; Returns the length of this type instance within the TLV block. </short>
          <long>&#10;&#10; Returns the length of this type instance within the TLV block.  If&#10;&#10; the type instance is not found in the block, then 0 is returned.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @param key Key for the TLV type instance.&#10;&#10; @return Length of this TLV type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3a9ed0" loc="52:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="key" ref="0x7e3a8088" loc="52:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLength" ref="0x7e3a6400" loc="73:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
        <documentation loc="54:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
          <short>&#10;&#10; Sets the length of a type instance within the TLV block. </short>
          <long>&#10;&#10; Sets the length of a type instance within the TLV block.  This&#10;&#10; operation moves data around and should always be performed before&#10;&#10; storing a value with a different length than the one currently&#10;&#10; stored.  If the type instance is not found in the block or there&#10;&#10; is not enough room for the new length, returns ESIZE.&#10;&#10;&#10;&#10; Setting the length of a type instance typically invalidates any&#10;&#10; keys received prior to the change.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @param key Key for the TLV type instance.&#10;&#10; @param len Length to set for this TLV type.&#10;&#10; @param trailLen Current length of trailing data.&#10;&#10; @param maxLen Maximum possible length of TLV block and trailing data.&#10;&#10; @return SUCCESS if the type instance was found, enough space was&#10;&#10;         available, and the length was set, ESIZE if wasn't enough&#10;&#10;         space, EINVAL if the instance wasn't found.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3a8828" loc="73:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="key" ref="0x7e3a89b8" loc="73:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </variable>
          <variable name="len" ref="0x7e3a8b50" loc="74:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
          <variable name="trailLen" ref="0x7e3a8ce0" loc="74:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
          <variable name="maxLen" ref="0x7e3a8e78" loc="75:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="add" ref="0x7e3a5d78" loc="103:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
        <documentation loc="87:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
          <short>&#10;&#10; Adds an instance of a type to the TLV block and sets the initial&#10;&#10; length of the instance. </short>
          <long>&#10;&#10; Adds an instance of a type to the TLV block and sets the initial&#10;&#10; length of the instance.  This operation moves data around and&#10;&#10; should always be performed before storing a value of the given&#10;&#10; type.  The type instance will be added to the block as long as&#10;&#10; there are at least len + 2 bytes available in the buffer holding&#10;&#10; the TLV block.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @param key Pointer to store the key for the TLV type instance.&#10;&#10; @param len Length to set for this TLV type.&#10;&#10; @param trailLen Current length of trailing data.&#10;&#10; @param maxLen Maximum possible length of TLV block and trailing data.&#10;&#10; @return SUCCESS if enough space was available and the length was&#10;&#10;         set, ESIZE if there wasn't enough space.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3a5248" loc="103:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="key" ref="0x7e3a53f8" loc="103:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e3a5590" loc="104:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
          <variable name="trailLen" ref="0x7e3a5720" loc="104:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
          <variable name="maxLen" ref="0x7e3a58a8" loc="104:../../../tos/lib/netarch/tlv/TlvMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Intercept" loc="15:/opt/tinyos-2.x/tos/interfaces/Intercept.nc">
      <documentation loc="15:/opt/tinyos-2.x/tos/interfaces/Intercept.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.6 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="forward" ref="0x7e2fa6a8" loc="31:/opt/tinyos-2.x/tos/interfaces/Intercept.nc">
        <documentation loc="16:/opt/tinyos-2.x/tos/interfaces/Intercept.nc">
          <short>&#10; Signals that a message has been received, which is supposed to be&#10; forwarded to another destination. &#10;&#10;</short>
          <long>&#10; Signals that a message has been received, which is supposed to be&#10; forwarded to another destination. &#10;&#10; @param msg The complete message received.&#10;&#10; @param payload The payload portion of the packet for this&#10; protocol layer.&#10;&#10; @param len The length of the payload buffer.&#10;&#10; @return TRUE indicates the packet should be forwarded, FALSE&#10; indicates that it should not be forwarded.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Intercept"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e2fa010" loc="31:/opt/tinyos-2.x/tos/interfaces/Intercept.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7e2fa1b0" loc="31:/opt/tinyos-2.x/tos/interfaces/Intercept.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e2fa340" loc="31:/opt/tinyos-2.x/tos/interfaces/Intercept.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="44:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
      <documentation loc="44:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7e5996f0" loc="54:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet. </short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  msg    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5994a0" loc="54:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7e599d60" loc="67:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  msg    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e599a40" loc="67:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7e5974d0" loc="115:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="98:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.&#10;</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param msg   the packet &#10; @param len   the length of payload required&#10; @return      a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e598e20" loc="115:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e597010" loc="115:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7e598ad8" loc="95:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="85:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7e598600" loc="83:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="69:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param msg   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5980d0" loc="83:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e598258" loc="83:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="42:/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7dbf57c0" loc="42:/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7dbf57c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7dbf5c80" loc="50:/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc">
        <documentation loc="44:/opt/tinyos-2.x/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="47:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
      <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.6 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7e5a7d38" loc="69:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="49:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
            </type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7e5a7488" loc="69:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7e5a7638" loc="69:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e5a77c0" loc="69:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7e5a4930" loc="124:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="115:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.&#10;</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5a44b8" loc="124:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e5a4640" loc="124:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7e5a4170" loc="112:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="102:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7e5a5490" loc="85:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="71:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5a50a8" loc="85:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7e5a5c78" loc="99:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="87:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5a57d8" loc="99:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7e5a5960" loc="99:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Graph" loc="40:../../../tos/lib/data/graph/Graph.nc">
      <documentation loc="40:../../../tos/lib/data/graph/Graph.nc">
        <short>&#10;&#10; Basic operations for processsing and modifying a graph.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Basic operations for processsing and modifying a graph.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="maxEdges" ref="0x7df35520" loc="77:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="69:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; Gets the maximum number of edges that the graph can hold. </short>
          <long>&#10;&#10; Gets the maximum number of edges that the graph can hold.  This should&#10;&#10; return the number of &#34;conceptual&#34; edges.  For example, an undirected graph&#10;&#10; might use two directed edges for each undirected edge in its&#10;&#10; implementation, but this only counts as one edge here.&#10;&#10;&#10;&#10; @return The maximum number of edges that the graph can hold.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="removed" ref="0x7df30240" loc="150:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="145:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; The structure of the graph changed because an edge was removed.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; The structure of the graph changed because an edge was removed.&#10;&#10;&#10;&#10; @param m The key for the edge that was removed.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7df30010" loc="150:../../../tos/lib/data/graph/Graph.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="remove" ref="0x7df33348" loc="115:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="107:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; Remove an edge from the graph between vertices s and d.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Remove an edge from the graph between vertices s and d.&#10;&#10;&#10;&#10; @param s The first vertex or source of the edge.&#10;&#10; @param d The second vertex or destination of the edge.&#10;&#10; @return SUCCESS if the edge was found and removed, EINVAL if it was not.&#10;&#10;         ESIZE returned if either vertex is too large.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="s" ref="0x7df34e90" loc="115:../../../tos/lib/data/graph/Graph.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
          <variable name="d" ref="0x7df33068" loc="115:../../../tos/lib/data/graph/Graph.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7df33cc0" loc="126:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="117:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; Retrieves an edge between vertices s and d, if it exists. </short>
          <long>&#10;&#10; Retrieves an edge between vertices s and d, if it exists.  If the graph is&#10;&#10; directed, s is taken to be the source and d is taken to be the destination&#10;&#10; of the directed edge.&#10;&#10;&#10;&#10; @param s The first vertex or source of the edge.&#10;&#10; @param d The second vertex or destination of the edge.&#10;&#10; @return The edge key if the edge was found, maxEdges() if it was not.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="s" ref="0x7df33808" loc="126:../../../tos/lib/data/graph/Graph.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
          <variable name="d" ref="0x7df339a0" loc="126:../../../tos/lib/data/graph/Graph.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="directed" ref="0x7df35a78" loc="85:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="79:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; Checks if the graph is directed or not. </short>
          <long>&#10;&#10; Checks if the graph is directed or not.  This value should not change at&#10;&#10; run-time.&#10;&#10;&#10;&#10; @return TRUE if the graph is directed, FALSE if it is undirected.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="vertices" ref="0x7df372f0" loc="49:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="42:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; Gets the number of vertices currently in the graph. </short>
          <long>&#10;&#10; Gets the number of vertices currently in the graph.  For some&#10;&#10; implementations, this will always equal maxVertices() if all vertices&#10;&#10; are preallocated.&#10;&#10;&#10;&#10; @return The number of vertices currently in the graph.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="parallelEdges" ref="0x7df34010" loc="93:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="87:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; Checks if parallel edges are allowed or not. </short>
          <long>&#10;&#10; Checks if parallel edges are allowed or not.  This value should not change&#10;&#10; at run-time.&#10;&#10;&#10;&#10; @return TRUE if parallel edges are allowed, FALSE if they are not.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="maxVertices" ref="0x7df37858" loc="56:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="51:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; Gets the maximum number of vertices that the graph can hold.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Gets the maximum number of vertices that the graph can hold.&#10;&#10;&#10;&#10; @return The maximum number of vertices that the graph can hold.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="insert" ref="0x7df349d8" loc="105:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="95:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; Add a new edge to the graph between vertices s and d.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Add a new edge to the graph between vertices s and d.&#10;&#10;&#10;&#10; @param s The first vertex or source of the edge.&#10;&#10; @param d The second vertex or destination of the edge.&#10;&#10; @return If all of the edges have already been allocated or if parallel&#10;&#10;         edges are not supported and this edge has already been added or if either&#10;&#10;         vertex is too large, then maxEdges() is returned.  Otherwise, the key for&#10;&#10;         the new edge is returned.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="s" ref="0x7df344d0" loc="105:../../../tos/lib/data/graph/Graph.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
          <variable name="d" ref="0x7df34668" loc="105:../../../tos/lib/data/graph/Graph.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="inserted" ref="0x7df32b40" loc="143:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="138:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; The structure of the graph changed because an edge was inserted.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; The structure of the graph changed because an edge was inserted.&#10;&#10;&#10;&#10; @param m The key for the edge that was inserted.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7df32910" loc="143:../../../tos/lib/data/graph/Graph.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeList" ref="0x7df32460" loc="136:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="128:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; Retrieves a list of edges adjacent to vertex s. </short>
          <long>&#10;&#10; Retrieves a list of edges adjacent to vertex s.  If the graph is directed,&#10;&#10; s is taken to be the source of the directed edge.&#10;&#10;&#10;&#10; @param s The first vertex or source of the edge.&#10;&#10; @return The key to the first node of the list if the vertex was valid,&#10;&#10;         maxEdges() if it was not.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="s" ref="0x7df32198" loc="136:../../../tos/lib/data/graph/Graph.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="edges" ref="0x7df37eb8" loc="67:../../../tos/lib/data/graph/Graph.nc">
        <documentation loc="58:../../../tos/lib/data/graph/Graph.nc">
          <short>&#10;&#10; Gets the number of edges currently in the graph. </short>
          <long>&#10;&#10; Gets the number of edges currently in the graph.  This should return the&#10;&#10; number of &#34;conceptual&#34; edges.  For example, an undirected graph might use&#10;&#10; two directed edges for each undirected edge in its implementation, but this&#10;&#10; only counts as one edge here.  For some implementations, this will always&#10;&#10; equal maxEdges() if all edges are preallocated.&#10;&#10;&#10;&#10; @return The number of edges currently in the graph.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Graph"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="StaticVoidIndexedIterator" loc="42:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
      <documentation loc="42:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
        <short>&#10;&#10; Iteration operations using indices. </short>
        <long>&#10;&#10; Iteration operations using indices.  This interface is the static or&#10;&#10; stateless version which requires a pointer to the structure containing&#10;&#10; the data to be passed in along with the index.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <typedef name="iterator_item_t" ref="0x7e39e070" loc="42:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
          <interfacedef-ref qname="StaticVoidIndexedIterator"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e39e070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="end" ref="0x7e39d328" loc="60:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
        <documentation loc="53:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
          <short>&#10;&#10; Checks whether you have already reached the end.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Checks whether you have already reached the end.&#10;&#10;&#10;&#10; @param d Pointer to the data source.&#10;&#10; @param m Current item's index.&#10;&#10; @return TRUE if the current item is the end, FALSE otherwise.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="StaticVoidIndexedIterator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="iterator_end_t" ref="0x7e407960"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e39e070"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="d" ref="0x7e39ef18" loc="60:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="m" ref="0x7e39d0c0" loc="60:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e39e070"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="next" ref="0x7e39ea10" loc="51:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
        <documentation loc="44:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
          <short>&#10;&#10; Gets the index of the next item.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Gets the index of the next item.&#10;&#10;&#10;&#10; @param d Pointer to the data source.&#10;&#10; @param m Current item's index.&#10;&#10; @return The next item's index.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="StaticVoidIndexedIterator"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e39e070"/></type-var>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e39e070"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="d" ref="0x7e39e650" loc="51:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="m" ref="0x7e39e7e0" loc="51:../../../tos/interfaces/StaticVoidIndexedIterator.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e39e070"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="29:/opt/tinyos-2.x/tos/interfaces/Random.nc">
      <documentation loc="29:/opt/tinyos-2.x/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10;</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7e2d7988" loc="41:/opt/tinyos-2.x/tos/interfaces/Random.nc">
        <documentation loc="37:/opt/tinyos-2.x/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number. &#10;</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7e2d75d0" loc="35:/opt/tinyos-2.x/tos/interfaces/Random.nc">
        <documentation loc="31:/opt/tinyos-2.x/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number. &#10;</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10;</short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x7db9dcd0" loc="36:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="35:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short> Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe75c0"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x7dbe79f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x7db9cd00" loc="44:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="43:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short> Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe2898"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x7dbe2ae8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x7db9c4f0" loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short> Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe3558"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x7dbe37a8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x7db9c9a8" loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe3558"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x7dbe37a8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7db9c840" loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe3558"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x7dbe37a8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x7db9a1d0" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe2898"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x7dbe2ae8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x7db9a068" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe2898"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x7dbe2ae8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7db9c198" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe75c0"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x7dbe79f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7db9c030" loc="37:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe75c0"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x7dbe79f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="44:/opt/tinyos-2.x/tos/interfaces/Send.nc">
      <documentation loc="44:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.6 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7d9b1a28" loc="64:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="46:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   msg     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7d9b1390" loc="64:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7d9b1518" loc="64:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7d9ac6f8" loc="114:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="104:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length. </short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   msg    the packet&#10; @return         a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7d9ac1f8" loc="114:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7d9ac380" loc="114:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7d9b0e98" loc="101:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="91:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7d9b0250" loc="78:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="66:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   msg    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7d9b1d70" loc="78:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7d9b0a48" loc="89:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param msg   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7d9b0598" loc="89:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7d9b0720" loc="89:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DataTimer" loc="41:../../../tos/lib/data/timer/DataTimer.nc">
      <parameters>
        <typedef name="data_t" ref="0x7e0f5288" loc="41:../../../tos/lib/data/timer/DataTimer.nc">
          <interfacedef-ref qname="DataTimer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="data_t" scoped="" ref="0x7e0f5288"/></type-var>
        </typedef>
      </parameters>
      <function event="" provided="0" name="expired" ref="0x7e0f4ab0" loc="68:../../../tos/lib/data/timer/DataTimer.nc">
        <documentation loc="63:../../../tos/lib/data/timer/DataTimer.nc">
          <short>&#10;&#10; The timer for a given data item has expired.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; The timer for a given data item has expired.&#10;&#10;&#10;&#10; @param data The data item which expired.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="DataTimer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="data_t" scoped="" ref="0x7e0f5288"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7e0f48b0" loc="68:../../../tos/lib/data/timer/DataTimer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="data_t" scoped="" ref="0x7e0f5288"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7e0f5c88" loc="51:../../../tos/lib/data/timer/DataTimer.nc">
        <documentation loc="43:../../../tos/lib/data/timer/DataTimer.nc">
          <short>&#10;&#10; Starts the non-periodic timer for a given data item. </short>
          <long>&#10;&#10; Starts the non-periodic timer for a given data item.  If the same&#10;&#10; item is started multiple times, it will be tracked multiple times.&#10;&#10;&#10;&#10; @param data The data item to start timing.&#10;&#10; @param delay Time units before the data expires.&#10;&#10; @return SUCCESS, or FAIL if already full.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="DataTimer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="data_t" scoped="" ref="0x7e0f5288"/></type-var>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="data_timer_time_t" ref="0x7e0f6ea8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7e0f5820" loc="51:../../../tos/lib/data/timer/DataTimer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="data_t" scoped="" ref="0x7e0f5288"/></type-var>
          </variable>
          <variable name="delay" ref="0x7e0f59b8" loc="51:../../../tos/lib/data/timer/DataTimer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="data_timer_time_t" ref="0x7e0f6ea8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7e0f43f8" loc="61:../../../tos/lib/data/timer/DataTimer.nc">
        <documentation loc="53:../../../tos/lib/data/timer/DataTimer.nc">
          <short>&#10;&#10; Stops the timer for a given data item. </short>
          <long>&#10;&#10; Stops the timer for a given data item.  If the item was started&#10;&#10; multiple times, this removes the instance that was closest to&#10;&#10; expiring.&#10;&#10;&#10;&#10; @param data The data item to stop timing.&#10;&#10; @return SUCCESS, or EINVAL if the item was not found.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="DataTimer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="data_t" scoped="" ref="0x7e0f5288"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7e0f4168" loc="61:../../../tos/lib/data/timer/DataTimer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="data_t" scoped="" ref="0x7e0f5288"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="42:/opt/tinyos-2.x/tos/interfaces/ParameterInit.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/ParameterInit.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.6 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7e1411c0" loc="42:/opt/tinyos-2.x/tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7e1411c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7e1418c0" loc="53:/opt/tinyos-2.x/tos/interfaces/ParameterInit.nc">
        <documentation loc="44:/opt/tinyos-2.x/tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7e1411c0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7e1415c0" loc="53:/opt/tinyos-2.x/tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7e1411c0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TlvMultiplePacket" loc="42:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
      <documentation loc="42:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
        <short>&#10;&#10; Access data stored in a generalized Type-Length-Value (TLV) block&#10;&#10; within a packet. </short>
        <long>&#10;&#10; Access data stored in a generalized Type-Length-Value (TLV) block&#10;&#10; within a packet.  This interface, when used together with the TlvList&#10;&#10; interface, has no restrictions of the number of instances of a type.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="value" ref="0x7e3dae30" loc="82:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
        <documentation loc="74:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
          <short>&#10;&#10; Returns the value in this type instance within the TLV block. </short>
          <long>&#10;&#10; Returns the value in this type instance within the TLV block.  If&#10;&#10; the type instance is not found in the block, then NULL is returned.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @param key Key for the TLV type instance.&#10;&#10; @return Pointer to the value in this TLV type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiplePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3da9b8" loc="82:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="key" ref="0x7e3dab48" loc="82:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="list" ref="0x7e3d8c18" loc="120:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
        <documentation loc="111:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
          <short>&#10;&#10; Access a list of all instances of a type within the TLV block.&#10;&#10;</short>
          <long>&#10;&#10; Access a list of all instances of a type within the TLV block.&#10;&#10; This command gives the key for the first such instance.&#10;&#10; Traverse the rest of the list with the TlvList interface.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @return The key for the first instance of a type in the TLV&#10;&#10;         block.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiplePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3d8938" loc="120:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="remove" ref="0x7e3d8428" loc="109:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
        <documentation loc="101:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
          <short>&#10;&#10; Removes this type instance from the TLV block.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Removes this type instance from the TLV block.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @param key Key for the TLV type instance.&#10;&#10; @return SUCCESS if the type instance was found and removed, EINVAL&#10;&#10;         otherwise.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiplePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3d8010" loc="109:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="key" ref="0x7e3d81a0" loc="109:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="length" ref="0x7e3dc798" loc="52:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
        <documentation loc="44:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
          <short>&#10;&#10; Returns the length of this type instance within the TLV block. </short>
          <long>&#10;&#10; Returns the length of this type instance within the TLV block.  If&#10;&#10; the type instance is not found in the block, then 0 is returned.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @param key Key for the TLV type instance.&#10;&#10; @return Length of this TLV type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiplePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3dc350" loc="52:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="key" ref="0x7e3dc4e0" loc="52:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLength" ref="0x7e3da4b8" loc="71:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
        <documentation loc="54:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
          <short>&#10;&#10; Sets the length of a type instance within the TLV block. </short>
          <long>&#10;&#10; Sets the length of a type instance within the TLV block.  This&#10;&#10; operation moves data around and should always be performed before&#10;&#10; storing a value with a different length than the one currently&#10;&#10; stored.  If the type instance is not found in the block or there&#10;&#10; is not enough room for the new length, returns ESIZE.&#10;&#10;&#10;&#10; Setting the length of a type instance typically invalidates any&#10;&#10; keys received prior to the change.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @param key Key for the TLV type instance.&#10;&#10; @param len Length to set for this TLV type.&#10;&#10; @return SUCCESS if the type instance was found, enough space was&#10;&#10;         available, and the length was set, ESIZE if wasn't enough&#10;&#10;         space, EINVAL if the instance wasn't found.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiplePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3dcca8" loc="71:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="key" ref="0x7e3dce38" loc="71:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
            </type-int>
          </variable>
          <variable name="len" ref="0x7e3da010" loc="72:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="add" ref="0x7e3d9ad8" loc="98:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
        <documentation loc="84:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
          <short>&#10;&#10; Adds an instance of a type to the TLV block and sets the initial&#10;&#10; length of the instance. </short>
          <long>&#10;&#10; Adds an instance of a type to the TLV block and sets the initial&#10;&#10; length of the instance.  This operation moves data around and&#10;&#10; should always be performed before storing a value of the given&#10;&#10; type.  The type instance will be added to the block as long as&#10;&#10; there are at least len + 2 bytes available in the buffer holding&#10;&#10; the TLV block.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @param key Pointer to store the key for the TLV type instance.&#10;&#10; @param len Length to set for this TLV type.&#10;&#10; @return SUCCESS if enough space was available and the length was&#10;&#10;         set, ESIZE if there wasn't enough space.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvMultiplePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3d9350" loc="98:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="key" ref="0x7e3d9500" loc="98:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e3d9698" loc="99:../../../tos/lib/netarch/tlv/TlvMultiplePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="45:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
      <documentation loc="45:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10;</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7dbc87d8" loc="45:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7dbc87d8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7dbc88f0" loc="45:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc88f0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7dbc6740" loc="98:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="94:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.&#10;</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc88f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="fired" ref="0x7dbc7700" loc="67:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="64:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7dbc63c8" loc="92:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="79:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc88f0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc88f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7dbc7e78" loc="92:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc88f0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7dbc6030" loc="92:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc88f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7dbc7b38" loc="77:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="70:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7dbc6b78" loc="105:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="100:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10;</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc88f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="start" ref="0x7dbc7010" loc="55:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc88f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7dbc8d18" loc="55:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc88f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7dbc73c8" loc="62:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="57:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="40:/opt/tinyos-2.x/tos/interfaces/Init.nc">
      <documentation loc="40:/opt/tinyos-2.x/tos/interfaces/Init.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.6 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7e750c40" loc="51:/opt/tinyos-2.x/tos/interfaces/Init.nc">
        <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="32:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.&#10;</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x7db98778" loc="32:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7db98778"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7db96278" loc="65:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10;</short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="fired" ref="0x7db97520" loc="49:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="get" ref="0x7db98bf0" loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="35:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.&#10;</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7db98778"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="reset" ref="0x7db97858" loc="53:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7db96600" loc="71:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10;</short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0x7db971f0" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.&#10;</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7db98778"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7db97010" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7db98778"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7db97b88" loc="56:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="stop" ref="0x7db97eb8" loc="59:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="PacketEngine" loc="46:../../../tos/lib/netarch/multihop/PacketEngine.nc">
      <documentation loc="46:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <short>&#10;&#10; The PacketEngine interface connects the packet engine to any data&#10;&#10; control components. </short>
        <long>&#10;&#10; The PacketEngine interface connects the packet engine to any data&#10;&#10; control components.  Data control components can implement any number&#10;&#10; of functions on set of packets.  In fact, an entire routing Allow a data control component to manage its packets in the data&#10;&#10; engine.  Packet IDs are passed to the control component to simplify&#10;&#10; management of any additional data structures for each packet in the&#10;&#10; buffer.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperType" ref="0x7e40da10" loc="179:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="173:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; Returns the upper layer AM type of a given packet.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Returns the upper layer AM type of a given packet.&#10;&#10;&#10;&#10; @param pid ID of the packet.&#10;&#10; @return The upper layer AM type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="packet_am_id_t" ref="0x7e4d25d0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e40d7e8" loc="179:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="send" ref="0x7e4a4b70" loc="98:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="89:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; Marks this packet as next in line to be sent. </short>
          <long>&#10;&#10; Marks this packet as next in line to be sent.  The packet must be one&#10;&#10; that was signaled via the added event and cannot be the ID of any&#10;&#10; arbitrary packet.&#10;&#10;&#10;&#10; @param pid ID of the packet.&#10;&#10; @return SUCCESS if the action takes place, FAIL if not, EINVAL if the&#10;&#10;         packet is not found in the buffer or is not a waiting packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e4a4878" loc="98:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7e4a28a8" loc="135:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="126:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; Passes this packet to upper layer as a received packet immediately. </short>
          <long>&#10;&#10; Passes this packet to upper layer as a received packet immediately.  The&#10;&#10; packet must be one that was signaled via the added event and cannot be&#10;&#10; the ID of any arbitrary packet.&#10;&#10;&#10;&#10; @param pid ID of the packet.&#10;&#10; @return SUCCESS if the action takes place, FAIL if not, EINVAL if the&#10;&#10;         packet is not found in the buffer or is not a waiting packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e4a2588" loc="135:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendIntercept" ref="0x7e4a20a0" loc="124:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="115:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; Marks this packet as next in line to be sent, but allows the upper layer&#10;&#10; to intercept the packet first. </short>
          <long>&#10;&#10; Marks this packet as next in line to be sent, but allows the upper layer&#10;&#10; to intercept the packet first.  The packet must be one that was signaled&#10;&#10; via the added event and cannot be the ID of any arbitrary packet.&#10;&#10;&#10;&#10; @param pid ID of the packet.&#10;&#10; @return SUCCESS if the action takes place, FAIL if not, EINVAL if the&#10;&#10;         packet is not found in the buffer or is not a waiting packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e4a3cc0" loc="124:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendAdded" ref="0x7e4a7788" loc="57:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="48:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; A packet to be sent was added to the packet engine by an upper layer.&#10;&#10;</short>
          <long>&#10;&#10; A packet to be sent was added to the packet engine by an upper layer.&#10;&#10; Unlike the Receive interface, this event does not allow swapping packet&#10;&#10; buffers because ownership of the packet does not leave the packet&#10;&#10; engine.&#10;&#10;&#10;&#10; @param pid Packet ID within the packet engine.&#10;&#10; @param msg Pointer to the packet that was added.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e4a72c8" loc="57:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7e4a7478" loc="57:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveAdded" ref="0x7e4a51d0" loc="68:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="59:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; A received packet was added to the packet engine from a lower layer.&#10;&#10;</short>
          <long>&#10;&#10; A received packet was added to the packet engine from a lower layer.&#10;&#10; Unlike the Receive interface, this event does not allow swapping packet&#10;&#10; buffers because ownership of the packet does not leave the packet&#10;&#10; engine.&#10;&#10;&#10;&#10; @param pid Packet ID within the packet engine.&#10;&#10; @param msg Pointer to the packet that was added.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e4a7c70" loc="68:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7e4a7e20" loc="68:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="snoopAdded" ref="0x7e4a5bd0" loc="79:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="70:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; An overheard packet (this node is not the intended destination) was&#10;&#10; added to the packet engine from a lower layer. </short>
          <long>&#10;&#10; An overheard packet (this node is not the intended destination) was&#10;&#10; added to the packet engine from a lower layer.  Unlike the Receive&#10;&#10; interface, this event does not allow swapping packet buffers because&#10;&#10; ownership of the packet does not leave the packet engine.&#10;&#10;&#10;&#10; @param pid Packet ID within the packet engine.&#10;&#10; @param msg Pointer to the packet that was added.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e4a56b8" loc="79:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7e4a5868" loc="79:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="packet" ref="0x7e4a4390" loc="87:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="81:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; Gets the packet associated with a given ID in the packet engine.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Gets the packet associated with a given ID in the packet engine.&#10;&#10;&#10;&#10; @param pid ID of packet to access.&#10;&#10; @return Pointer to the packet, NULL if the ID is not in use or too large.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
              <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e4a4100" loc="87:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7e4a37d0" loc="113:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="100:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; Signals the completion of a send event to the lower layer. </short>
          <long>&#10;&#10; Signals the completion of a send event to the lower layer.  The return&#10;&#10; value indicates what should be done next with the packet.&#10;&#10;&#10;&#10; @param pid Packet ID within the packet engine.&#10;&#10; @param msg Pointer to the packet.&#10;&#10; @param result SUCCESS if it was transmitted successfully, FAIL if&#10;&#10;               it was not, ECANCEL if it was cancelled by the upper&#10;&#10;               layer.&#10;&#10; @return If the packet is no longer needed, return PKT_SEND_DONE. If the&#10;&#10;         packet should be resent, return PKT_SEND_RETRY.  If the packet&#10;&#10;         should move back to the wait state, return PKT_SEND_WAIT.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="packet_send_action_t" ref="0x7e4d2cd8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e4a3088" loc="113:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7e4a3238" loc="113:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="result" ref="0x7e4a33c0" loc="113:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="drop" ref="0x7e4a01c0" loc="146:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="137:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; Drops the packet from the buffer immediately. </short>
          <long>&#10;&#10; Drops the packet from the buffer immediately.  The packet must be one&#10;&#10; that was signaled via the added event and cannot be the ID of any&#10;&#10; arbitrary packet.&#10;&#10;&#10;&#10; @param pid ID of the packet.&#10;&#10; @return SUCCESS if the action takes place, FAIL if not, EINVAL if the&#10;&#10;         packet is not found in the buffer or is not a waiting packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e4a2d90" loc="146:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="upperSendDone" ref="0x7e4a0ba8" loc="158:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="148:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; Manually signals the upper layer sendDone event with the given result&#10;&#10; for the given packet. </short>
          <long>&#10;&#10; Manually signals the upper layer sendDone event with the given result&#10;&#10; for the given packet.  This should be used carefully to avoid signally&#10;&#10; sendDone multiple times for the same packet.&#10;&#10;&#10;&#10; @param pid ID of the packet.&#10;&#10; @param result Send result.&#10;&#10; @return SUCCESS if the action takes place, FAIL if not, EINVAL if the&#10;&#10;         packet is not found in the buffer or is not a waiting packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e4a06b0" loc="158:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
          <variable name="result" ref="0x7e4a0838" loc="158:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="waitList" ref="0x7e40d2f0" loc="171:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="160:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; Access a list of all packets still waiting for a control descision. </short>
          <long>&#10;&#10; Access a list of all packets still waiting for a control descision.  For&#10;&#10; example, if a routing path is found to destination B, this could be used&#10;&#10; to check if any other packets were also waiting for that same path since&#10;&#10; they can now be sent.  This command gives the index of the first packet&#10;&#10; in a list of waiting packets.  Traverse the rest of the list with the&#10;&#10; PacketWaitList interface provided by the engine.&#10;&#10;&#10;&#10; @return The ID for the first waiting packet, bufferSize if there aren't&#10;&#10;         any waiting packets.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setUpperType" ref="0x7e40c2c0" loc="187:../../../tos/lib/netarch/multihop/PacketEngine.nc">
        <documentation loc="181:../../../tos/lib/netarch/multihop/PacketEngine.nc">
          <short>&#10;&#10; Sets the upper layer AM type of a given packet.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Sets the upper layer AM type of a given packet.&#10;&#10;&#10;&#10; @param pid ID of the packet.&#10;&#10; @param newUid The new upper layer AM type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketEngine"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pid" ref="0x7e40def8" loc="187:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
            </type-int>
          </variable>
          <variable name="newUid" ref="0x7e40c090" loc="187:../../../tos/lib/netarch/multihop/PacketEngine.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Equal" loc="39:../../../tos/interfaces/Equal.nc">
      <documentation loc="39:../../../tos/interfaces/Equal.nc">
        <short>&#10;&#10; Generalized equality interface between two items. </short>
        <long>&#10;&#10; Generalized equality interface between two items.  Many uses are possible&#10;&#10; here, since the inputs could be array indices, as just one example.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <typedef name="equal_t" ref="0x7e2f4360" loc="39:../../../tos/interfaces/Equal.nc">
          <interfacedef-ref qname="Equal"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="equal_t" scoped="" ref="0x7e2f4360"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7e2f4ca8" loc="48:../../../tos/interfaces/Equal.nc">
        <documentation loc="41:../../../tos/interfaces/Equal.nc">
          <short>&#10;&#10; Checks whether two items are equal.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Checks whether two items are equal.&#10;&#10;&#10;&#10; @param a First item to test.&#10;&#10; @param b Second item to test.&#10;&#10; @return TRUE if they are equal, FALSE if they are not.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Equal"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="equal_t" scoped="" ref="0x7e2f4360"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="equal_t" scoped="" ref="0x7e2f4360"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x7e2f48d8" loc="48:../../../tos/interfaces/Equal.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="equal_t" scoped="" ref="0x7e2f4360"/></type-var>
          </variable>
          <variable name="b" ref="0x7e2f4a60" loc="48:../../../tos/interfaces/Equal.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="equal_t" scoped="" ref="0x7e2f4360"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SourceShortestPath" loc="38:../../../tos/lib/data/graph/SourceShortestPath.nc">
      <documentation loc="38:../../../tos/lib/data/graph/SourceShortestPath.nc">
        <short>&#10;&#10; Access details on the shortest path between vertices of a graph.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Access details on the shortest path between vertices of a graph.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="rebuildNeeded" ref="0x7df20a28" loc="82:../../../tos/lib/data/graph/SourceShortestPath.nc">
        <documentation loc="75:../../../tos/lib/data/graph/SourceShortestPath.nc">
          <short>&#10;&#10; Checks if the tree should be rebuilt either because the source has changed&#10;&#10; or because the underlying graph structure has changed.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Checks if the tree should be rebuilt either because the source has changed&#10;&#10; or because the underlying graph structure has changed.&#10;&#10;&#10;&#10; @param src The source vertex.&#10;&#10; @return Whether a rebuild is needed.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SourceShortestPath"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7df20758" loc="82:../../../tos/lib/data/graph/SourceShortestPath.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="buildTree" ref="0x7df22720" loc="47:../../../tos/lib/data/graph/SourceShortestPath.nc">
        <documentation loc="40:../../../tos/lib/data/graph/SourceShortestPath.nc">
          <short>&#10;&#10; Build a shortest path tree from vertex src.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Build a shortest path tree from vertex src.&#10;&#10;&#10;&#10; @param src The source vertex.&#10;&#10; @return If the vertex is too large then ESIZE or if a tree is currently&#10;&#10;         being built then EBUSY, else SUCCESS.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SourceShortestPath"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7df224b0" loc="47:../../../tos/lib/data/graph/SourceShortestPath.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="builtTree" ref="0x7df22e18" loc="54:../../../tos/lib/data/graph/SourceShortestPath.nc">
        <documentation loc="49:../../../tos/lib/data/graph/SourceShortestPath.nc">
          <short>&#10;&#10; The shortest path tree from vertex src is complete.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; The shortest path tree from vertex src is complete.&#10;&#10;&#10;&#10; @param src The source vertex.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SourceShortestPath"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7df22c10" loc="54:../../../tos/lib/data/graph/SourceShortestPath.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="buildingTree" ref="0x7df1f010" loc="89:../../../tos/lib/data/graph/SourceShortestPath.nc">
        <documentation loc="84:../../../tos/lib/data/graph/SourceShortestPath.nc">
          <short>&#10;&#10; Checks if the tree is currently being built.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Checks if the tree is currently being built.&#10;&#10;&#10;&#10; @return Whether the tree is being built.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SourceShortestPath"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="edgeCount" ref="0x7df1f800" loc="100:../../../tos/lib/data/graph/SourceShortestPath.nc">
        <documentation loc="91:../../../tos/lib/data/graph/SourceShortestPath.nc">
          <short>&#10;&#10; Get the number of edges to the destination vertex.&#10;&#10;</short>
          <long>&#10;&#10; Get the number of edges to the destination vertex.&#10;&#10; For example, if the shortest path from A to C was A -> D -> C, edgeCount()&#10;&#10; would return 2.&#10;&#10;&#10;&#10; @param dest The destination vertex.&#10;&#10; @return The number of edges.  If there is no path to the given destination,&#10;&#10;         or if an input vertex is too large, then the count is 0.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SourceShortestPath"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7df1f510" loc="100:../../../tos/lib/data/graph/SourceShortestPath.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="buildTreeTo" ref="0x7df21788" loc="64:../../../tos/lib/data/graph/SourceShortestPath.nc">
        <documentation loc="56:../../../tos/lib/data/graph/SourceShortestPath.nc">
          <short>&#10;&#10; Build the shortest path from vertex src to vertex dest.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Build the shortest path from vertex src to vertex dest.&#10;&#10;&#10;&#10; @param src The source vertex.&#10;&#10; @param dest The destination vertex.&#10;&#10; @return If the vertex is too large then ESIZE or if a tree is currently&#10;&#10;         being built then EBUSY, else SUCCESS.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SourceShortestPath"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7df21340" loc="64:../../../tos/lib/data/graph/SourceShortestPath.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
          <variable name="dest" ref="0x7df214d8" loc="64:../../../tos/lib/data/graph/SourceShortestPath.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="builtTreeTo" ref="0x7df20260" loc="72:../../../tos/lib/data/graph/SourceShortestPath.nc">
        <documentation loc="66:../../../tos/lib/data/graph/SourceShortestPath.nc">
          <short>&#10;&#10; The shortest path from vertex src to vertex dest is complete.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; The shortest path from vertex src to vertex dest is complete.&#10;&#10;&#10;&#10; @param src The source vertex.&#10;&#10; @param dest The destination vertex.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="SourceShortestPath"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7df21c78" loc="72:../../../tos/lib/data/graph/SourceShortestPath.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
          <variable name="dest" ref="0x7df21e10" loc="72:../../../tos/lib/data/graph/SourceShortestPath.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
            </type-int>
          </variable>
          <variable name="pathResult" ref="0x7df20010" loc="73:../../../tos/lib/data/graph/SourceShortestPath.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="45:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
      <documentation loc="45:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.6 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7e59c410" loc="67:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  msg      the receied packet&#10; @param  payload  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return          a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
              <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5a19e0" loc="67:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7e5a1b80" loc="67:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e5a1d08" loc="67:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="IndexedAlloc" loc="42:../../../tos/lib/data/alloc/IndexedAlloc.nc">
      <documentation loc="42:../../../tos/lib/data/alloc/IndexedAlloc.nc">
        <short>&#10;&#10; Interface to a component that implements a run-time allocation policy on top&#10;&#10; of a static size array via indices. </short>
        <long>&#10;&#10; Interface to a component that implements a run-time allocation policy on top&#10;&#10; of a static size array via indices.  This simplifies component design by&#10;&#10; moving the policy out of each component, leading to cleaner code.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="size" ref="0x7ded8770" loc="64:../../../tos/lib/data/alloc/IndexedAlloc.nc">
        <documentation loc="58:../../../tos/lib/data/alloc/IndexedAlloc.nc">
          <short>&#10;&#10; The number of elements currently allocated.&#10;&#10;</short>
          <long>&#10;&#10; The number of elements currently allocated.&#10;&#10; Always less than or equal to maxSize().&#10;&#10;&#10;&#10; @return The number of elements currently allocated.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="IndexedAlloc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="allocated" ref="0x7ded50d8" loc="95:../../../tos/lib/data/alloc/IndexedAlloc.nc">
        <documentation loc="90:../../../tos/lib/data/alloc/IndexedAlloc.nc">
          <short>&#10;&#10; Checks if an index is currently allocated.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Checks if an index is currently allocated.&#10;&#10;&#10;&#10; @return TRUE if the index is allocated, FALSE if it is not.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="IndexedAlloc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7ded6ea0" loc="95:../../../tos/lib/data/alloc/IndexedAlloc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7ded8cc8" loc="71:../../../tos/lib/data/alloc/IndexedAlloc.nc">
        <documentation loc="66:../../../tos/lib/data/alloc/IndexedAlloc.nc">
          <short>&#10;&#10; The maximum number of elements that can be allocated.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; The maximum number of elements that can be allocated.&#10;&#10;&#10;&#10; @return The maximum size that can be allocated.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="IndexedAlloc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="alloc" ref="0x7ded6270" loc="79:../../../tos/lib/data/alloc/IndexedAlloc.nc">
        <documentation loc="73:../../../tos/lib/data/alloc/IndexedAlloc.nc">
          <short>&#10;&#10; Allocate an index in the set.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Allocate an index in the set.&#10;&#10;&#10;&#10; @return If an index is free, it will be allocated and returned.  Otherwise,&#10;&#10;         maxSize() is returned to indicate that all elements are allocated.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="IndexedAlloc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="none" ref="0x7ded9c80" loc="49:../../../tos/lib/data/alloc/IndexedAlloc.nc">
        <documentation loc="44:../../../tos/lib/data/alloc/IndexedAlloc.nc">
          <short>&#10;&#10; Checks if none of the elements are allocated.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Checks if none of the elements are allocated.&#10;&#10;&#10;&#10; @return TRUE if none of the elements are allocated, FALSE otherwise.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="IndexedAlloc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="free" ref="0x7ded69c8" loc="88:../../../tos/lib/data/alloc/IndexedAlloc.nc">
        <documentation loc="81:../../../tos/lib/data/alloc/IndexedAlloc.nc">
          <short>&#10;&#10; Frees an index in the set.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Frees an index in the set.&#10;&#10;&#10;&#10; @return If an index is allocated, it will be freed and SUCCESS is returned.&#10;&#10;         If it was already free, no change is made and EALREADY is returned.&#10;&#10;         If the index is too large, ESIZE is returned.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="IndexedAlloc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7ded6740" loc="88:../../../tos/lib/data/alloc/IndexedAlloc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="all" ref="0x7ded81f8" loc="56:../../../tos/lib/data/alloc/IndexedAlloc.nc">
        <documentation loc="51:../../../tos/lib/data/alloc/IndexedAlloc.nc">
          <short>&#10;&#10; Checks if all of the elements are allocated.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Checks if all of the elements are allocated.&#10;&#10;&#10;&#10; @return TRUE if all of the elements are allocated, FALSE otherwise.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="IndexedAlloc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="SimMote" loc="34:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <short>&#10; TOSSIM-specific interface to access a mote's state.</short>
        <long>&#10; TOSSIM-specific interface to access a mote's state. TinyOS programs&#10; should never use this interface.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="setEuid" ref="0x7e5e2b78" loc="36:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="euid" ref="0x7e5e2a10" loc="36:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getVariableInfo" ref="0x7e5e1a30" loc="39:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="size_t" ref="0x7f3e0748"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="name" ref="0x7e5e1550" loc="39:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="ptr" ref="0x7e5e1710" loc="39:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e5e18b8" loc="39:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="size_t" ref="0x7f3e0748"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOff" ref="0x7e5db060" loc="41:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x7e5e1d20" loc="40:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getEuid" ref="0x7e5e26a0" loc="35:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7e5e11f8" loc="38:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getStartTime" ref="0x7e5e2ed0" loc="37:/opt/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="DataCache" loc="32:../../../tos/lib/data/cache/DataCache.nc">
      <documentation loc="32:../../../tos/lib/data/cache/DataCache.nc">
        <short>&#10; A data cache. </short>
        <long>&#10; A data cache.  While this is quite similar to the Cache interface, here a&#10; pointer to the element in the cache matching the given input item is&#10; returned.  Additional features, such as remove and eviction, are also&#10; available.&#10;&#10; @author Ryan Stinnett&#10;</long>
      </documentation>
      <parameters>
        <typedef name="item_t" ref="0x7e2eca38" loc="32:../../../tos/lib/data/cache/DataCache.nc">
          <interfacedef-ref qname="DataCache"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="remove" ref="0x7e2e86f0" loc="74:../../../tos/lib/data/cache/DataCache.nc">
        <documentation loc="68:../../../tos/lib/data/cache/DataCache.nc">
          <short>&#10; Removes an item from the cache.&#10;&#10;</short>
          <long>&#10; Removes an item from the cache.&#10;&#10; @param item Pointer to the data item to remove from the cache.&#10; @return SUCCESS if found and removed, EINVAL if not found.&#10;</long>
        </documentation>
        <interfacedef-ref qname="DataCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="item" ref="0x7e2e84c0" loc="74:../../../tos/lib/data/cache/DataCache.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0x7e2e9b18" loc="57:../../../tos/lib/data/cache/DataCache.nc">
        <documentation loc="49:../../../tos/lib/data/cache/DataCache.nc">
          <short>&#10; Notification that the given item is about to be evicted due to an insert&#10; which was requested when the cache was already full. </short>
          <long>&#10; Notification that the given item is about to be evicted due to an insert&#10; which was requested when the cache was already full.  Note that this is&#10; &#60;b>not&#60;/b> signaled on calls of remove.  The pointer passed here should&#10; not saved, as it will not longer be vaild once this event returns.&#10;&#10; @param item Pointer to the data item being evicted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="DataCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="item" ref="0x7e2e97d0" loc="57:../../../tos/lib/data/cache/DataCache.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insert" ref="0x7e2e9498" loc="47:../../../tos/lib/data/cache/DataCache.nc">
        <documentation loc="40:../../../tos/lib/data/cache/DataCache.nc">
          <short>&#10; Inserts an item in the cache, evicting if necessary. </short>
          <long>&#10; Inserts an item in the cache, evicting if necessary.  An atomic lookup&#10; after insert should return true.&#10;&#10; @param item Pointer to the data item to insert into the cache.&#10; @return A pointer to the item in the cache.&#10;</long>
        </documentation>
        <interfacedef-ref qname="DataCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="item" ref="0x7e2e91f8" loc="47:../../../tos/lib/data/cache/DataCache.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7e2e8a08" loc="79:../../../tos/lib/data/cache/DataCache.nc">
        <documentation loc="76:../../../tos/lib/data/cache/DataCache.nc">
          <short>&#10; Flush the cache of all entries.&#10;</short>
        </documentation>
        <interfacedef-ref qname="DataCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="lookup" ref="0x7e2e8180" loc="66:../../../tos/lib/data/cache/DataCache.nc">
        <documentation loc="59:../../../tos/lib/data/cache/DataCache.nc">
          <short>&#10; Returns a pointer to the item in the cache by matching various keys or&#10; NULL if it was not found.&#10;&#10;</short>
          <long>&#10; Returns a pointer to the item in the cache by matching various keys or&#10; NULL if it was not found.&#10;&#10; @param item Pointer to the data item to find in the cache.&#10; @return A pointer to the item in the cache, or NULL if not found.&#10;</long>
        </documentation>
        <interfacedef-ref qname="DataCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="item" ref="0x7e2e9e58" loc="66:../../../tos/lib/data/cache/DataCache.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="item_t" scoped="" ref="0x7e2eca38"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7e2ecea8" loc="38:../../../tos/lib/data/cache/DataCache.nc">
        <documentation loc="34:../../../tos/lib/data/cache/DataCache.nc">
          <short>&#10; Returns the number of items currently stored in the cache.&#10;</short>
          <long>&#10; Returns the number of items currently stored in the cache.&#10; @return The number of items.&#10;</long>
        </documentation>
        <interfacedef-ref qname="DataCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="TlvBlockPacket" loc="39:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
      <documentation loc="39:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
        <short>&#10;&#10; Manipulate a packet with a TLV block independent of the types it&#10;&#10; contains.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Manipulate a packet with a TLV block independent of the types it&#10;&#10; contains.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="remove" ref="0x7e3e84b8" loc="58:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
        <documentation loc="52:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
          <short>&#10;&#10; Removes a TLV block from the beginning of a given packet.</short>
          <long>&#10;&#10; Removes a TLV block from the beginning of a given packet. Other&#10;&#10; data is moved to fill the gap.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvBlockPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3e8280" loc="58:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="length" ref="0x7e3e8c20" loc="67:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
        <documentation loc="60:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
          <short>&#10;&#10; Returns the length of the entire TLV block, including the block&#10;&#10; length value itself.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Returns the length of the entire TLV block, including the block&#10;&#10; length value itself.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @return Length of the TLV block.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvBlockPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3e89b0" loc="67:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="add" ref="0x7e3e9d70" loc="50:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
        <documentation loc="41:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
          <short>&#10;&#10; Adds a TLV block at the beginning of a given packet. </short>
          <long>&#10;&#10; Adds a TLV block at the beginning of a given packet.  Other&#10;&#10; data is moved to accomidate it.  This must be called on any new TLV&#10;&#10; block before using any other TLV commands.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @return SUCCESS if the add completed, ESIZE if there wasn't enough&#10;&#10;         space.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvBlockPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3e9a98" loc="50:../../../tos/lib/netarch/tlv/TlvBlockPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="State" loc="38:/opt/tinyos-2.x/tos/interfaces/State.nc">
      <documentation loc="38:/opt/tinyos-2.x/tos/interfaces/State.nc">
        <short>&#10; State machine interface&#10;</short>
        <long>&#10; State machine interface&#10; @author David Moss - dmm@rincon.com&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x7e2dbd80" loc="71:/opt/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10; Get the current state&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="toIdle" ref="0x7e2db1f8" loc="56:/opt/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="53:/opt/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10; Set the current state back to S_IDLE&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isState" ref="0x7e2dba40" loc="66:/opt/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10;</short>
          <long>&#10; @return TRUE if the state machine is in the given state&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="myState" ref="0x7e2db890" loc="66:/opt/tinyos-2.x/tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isIdle" ref="0x7e2db550" loc="61:/opt/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10;</short>
          <long>&#10; @return TRUE if the state machine is in S_IDLE&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="requestState" ref="0x7e2dc998" loc="45:/opt/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="40:/opt/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10;</short>
          <long>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10; @return SUCCESS if the state is change, FAIL if it isn't&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7e2dc758" loc="45:/opt/tinyos-2.x/tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="forceState" ref="0x7e2dceb0" loc="51:/opt/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7e2dcce0" loc="51:/opt/tinyos-2.x/tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="46:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
      <documentation loc="46:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10;</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7dbc1830" loc="46:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7dbc1830"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7dbc1948" loc="46:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc1948"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7dbc1e18" loc="53:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7dbc1948"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7dbc0598" loc="65:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="62:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7dbc0258" loc="60:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits. </short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7dbc0968" loc="71:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed. </short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="27:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
      <documentation loc="27:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <short>&#10;</short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7e725a30" loc="33:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7e725d48" loc="34:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7e725400" loc="31:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7e7243b0" loc="36:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="get" ref="0x7e725718" loc="32:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7e724090" loc="35:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0x7e729db8" loc="29:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="clr" ref="0x7e7250f0" loc="30:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="40:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
      <documentation loc="40:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <short>&#10; Constants for manipulating LEDs.&#10;&#10;</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7e532ae0" loc="50:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7e532eb8" loc="56:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10;</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7e531250" loc="61:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7e531998" loc="72:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10;</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7e530460" loc="89:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="85:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10;</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="get" ref="0x7e5309a8" loc="106:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="92:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7e5315c0" loc="66:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0x7e52b268" loc="123:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="109:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask. </short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7e530ce0" loc="123:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7e532770" loc="45:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7e531d08" loc="78:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7e530088" loc="83:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="RouteCache" loc="39:../../../tos/lib/netarch/dsr/RouteCache.nc">
      <documentation loc="39:../../../tos/lib/netarch/dsr/RouteCache.nc">
        <short>&#10;&#10; Access some kind of route cache or table that stores information about&#10;&#10; paths or links in the network and looks for routes when requested.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Access some kind of route cache or table that stores information about&#10;&#10; paths or links in the network and looks for routes when requested.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="removeLink" ref="0x7e101518" loc="61:../../../tos/lib/netarch/dsr/RouteCache.nc">
        <documentation loc="51:../../../tos/lib/netarch/dsr/RouteCache.nc">
          <short>&#10;&#10; Removes any information stored for a given link from the route cache.&#10;&#10;</short>
          <long>&#10;&#10; Removes any information stored for a given link from the route cache.&#10;&#10; If the cache stores entire paths, then any path containing the link&#10;&#10; must at least be shortened enough to remove the given link or else&#10;&#10; discarded entirely.&#10;&#10;&#10;&#10; @param src The source node in the link to remove.&#10;&#10; @param dest The destination node in the link to remove.&#10;&#10; @param reverse If TRUE, the reverse path is also removed.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="RouteCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7e110e68" loc="61:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </variable>
          <variable name="dest" ref="0x7e101030" loc="61:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </variable>
          <variable name="reverse" ref="0x7e1011b8" loc="61:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="routeUpdate" ref="0x7e0fe578" loc="97:../../../tos/lib/netarch/dsr/RouteCache.nc">
        <documentation loc="80:../../../tos/lib/netarch/dsr/RouteCache.nc">
          <short>&#10;&#10; Provides the newest information available pertaining to a requested&#10;&#10; route. </short>
          <long>&#10;&#10; Provides the newest information available pertaining to a requested&#10;&#10; route.  Whether or not a route is available when the request is made,&#10;&#10; a routeUpdate will be signaled once the current availability is known.&#10;&#10; If the route is not initially available, a subsequent routeUpdate will&#10;&#10; be signaled if a route is later found and the route was requested via&#10;&#10; the trackRoute command.  If a route was found, numLinks is the number&#10;&#10; of links along the route.  If a route was not found, numLinks is 0.&#10;&#10; The route itself is accessible via the RouteNodeList interface.  Note&#10;&#10; that RouteNodeList traverses the route &#60;b>in reverse&#60;/b>, returning the&#10;&#10; previous or source node for a given node in the route.&#10;&#10;&#10;&#10; @param src The source node of the route.&#10;&#10; @param dest The destination node of the route.&#10;&#10; @param numLinks Number of links along the route if one was found, 0&#10;&#10;                 if no route was found.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="RouteCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_link_id_t" ref="0x7e1217c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7e0ffbf0" loc="97:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </variable>
          <variable name="dest" ref="0x7e0ffd88" loc="97:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </variable>
          <variable name="numLinks" ref="0x7e0fe010" loc="98:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_link_id_t" ref="0x7e1217c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="addPath" ref="0x7e110998" loc="49:../../../tos/lib/netarch/dsr/RouteCache.nc">
        <documentation loc="41:../../../tos/lib/netarch/dsr/RouteCache.nc">
          <short>&#10;&#10; Adds a path to the route cache with a given number of links along the&#10;&#10; path and optionally adds the reverse path as well.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Adds a path to the route cache with a given number of links along the&#10;&#10; path and optionally adds the reverse path as well.&#10;&#10;&#10;&#10; @param nodes An array of nodes that make up the path to add.&#10;&#10; @param numLinks The number of links along the path.&#10;&#10; @param reverse If TRUE, the reverse path is also added.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="RouteCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_link_id_t" ref="0x7e1217c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="nodes" ref="0x7e110338" loc="49:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numLinks" ref="0x7e1104d8" loc="49:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_link_id_t" ref="0x7e1217c8"/></typename>
            </type-int>
          </variable>
          <variable name="reverse" ref="0x7e110660" loc="49:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="trackRoute" ref="0x7e101e10" loc="70:../../../tos/lib/netarch/dsr/RouteCache.nc">
        <documentation loc="63:../../../tos/lib/netarch/dsr/RouteCache.nc">
          <short>&#10;&#10; Indicates the need for a route from node src to node dest. </short>
          <long>&#10;&#10; Indicates the need for a route from node src to node dest.  This is&#10;&#10; tracked by the route cache until the need is met.&#10;&#10;&#10;&#10; @param src The source node of the route.&#10;&#10; @param dest The destination node of the route.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="RouteCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7e1019e8" loc="70:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </variable>
          <variable name="dest" ref="0x7e101b80" loc="70:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkRoute" ref="0x7e0ff720" loc="78:../../../tos/lib/netarch/dsr/RouteCache.nc">
        <documentation loc="72:../../../tos/lib/netarch/dsr/RouteCache.nc">
          <short>&#10;&#10; Requests an initial check for a route from node src to node dest.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Requests an initial check for a route from node src to node dest.&#10;&#10;&#10;&#10; @param src The source node of the route.&#10;&#10; @param dest The destination node of the route.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="RouteCache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7e0ff320" loc="78:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </variable>
          <variable name="dest" ref="0x7e0ff4b8" loc="78:../../../tos/lib/netarch/dsr/RouteCache.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BitVector" loc="29:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
      <documentation loc="29:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
        <short>&#10; Interface to a bit vector.&#10;&#10;</short>
        <long>&#10; Interface to a bit vector.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clearAll" ref="0x7e0e1780" loc="34:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
        <documentation loc="31:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
          <short>&#10; Clear all bits in the vector.&#10;</short>
        </documentation>
        <interfacedef-ref qname="BitVector"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="clear" ref="0x7e0e0a18" loc="58:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
        <documentation loc="54:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
          <short>&#10; Set a bit in the vector.&#10;</short>
          <long>&#10; Set a bit in the vector.&#10; @param bitnum Bit to clear.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BitVector"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="bitnum" ref="0x7e0e0850" loc="58:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7e0e0f20" loc="64:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
        <documentation loc="60:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
          <short>&#10; Toggle a bit in the vector.&#10;</short>
          <long>&#10; Toggle a bit in the vector.&#10; @param bitnum Bit to toggle.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BitVector"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="bitnum" ref="0x7e0e0d58" loc="64:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7e0e0010" loc="46:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
        <documentation loc="41:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
          <short>&#10; Read a bit from the vector.&#10;</short>
          <long>&#10; Read a bit from the vector.&#10; @param bitnum Bit to read.&#10; @return Bit value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BitVector"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="bitnum" ref="0x7e0e1df8" loc="46:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="assign" ref="0x7e0de5e8" loc="71:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
        <documentation loc="66:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
          <short>&#10; Write a bit in the vector.&#10;</short>
          <long>&#10; Write a bit in the vector.&#10; @param bitnum Bit to clear.&#10; @param value New bit value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BitVector"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="bitnum" ref="0x7e0de278" loc="71:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </variable>
          <variable name="value" ref="0x7e0de400" loc="71:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAll" ref="0x7e0e1ab0" loc="39:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
        <documentation loc="36:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
          <short>&#10; Set all bits in the vector.&#10;</short>
        </documentation>
        <interfacedef-ref qname="BitVector"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0x7e0e0510" loc="52:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
          <short>&#10; Set a bit in the vector.&#10;</short>
          <long>&#10; Set a bit in the vector.&#10; @param bitnum Bit to set.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BitVector"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="bitnum" ref="0x7e0e0350" loc="52:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7e0de968" loc="77:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
        <documentation loc="73:/opt/tinyos-2.x/tos/interfaces/BitVector.nc">
          <short>&#10; Return bit vector length.&#10;</short>
          <long>&#10; Return bit vector length.&#10; @return Bit vector length.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BitVector"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="TlvSinglePacket" loc="42:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
      <function command="" provided="0" name="value" ref="0x7e3e1078" loc="75:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
        <documentation loc="68:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
          <short>&#10;&#10; Returns the value in this type instance within the TLV block. </short>
          <long>&#10;&#10; Returns the value in this type instance within the TLV block.  If&#10;&#10; the type instance is not found in the block, then NULL is returned.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @return Pointer to the value in this TLV type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvSinglePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3e2d70" loc="75:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="remove" ref="0x7e3e0288" loc="100:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
        <documentation loc="93:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
          <short>&#10;&#10; Removes this type instance from the TLV block.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Removes this type instance from the TLV block.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @return SUCCESS if the type instance was found and removed, EINVAL&#10;&#10;         otherwise.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvSinglePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3e0030" loc="100:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="length" ref="0x7e3e4d88" loc="51:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
        <documentation loc="44:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
          <short>&#10;&#10; Returns the length of this type instance within the TLV block. </short>
          <long>&#10;&#10; Returns the length of this type instance within the TLV block.  If&#10;&#10; the type instance is not found in the block, then 0 is returned.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @return Length of this TLV type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvSinglePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3e4b00" loc="51:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLength" ref="0x7e3e2880" loc="66:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
        <documentation loc="53:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
          <short>&#10;&#10; Sets the length of a type instance within the TLV block. </short>
          <long>&#10;&#10; Sets the length of a type instance within the TLV block.  This&#10;&#10; operation moves data around and should always be performed before&#10;&#10; storing a value with a different length than the one currently&#10;&#10; stored.  If the type instance is not found in the block or there&#10;&#10; is not enough room for the new length, returns ESIZE.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @param len Length to set for this TLV type.&#10;&#10; @return SUCCESS if the type instance was found, enough space was&#10;&#10;         available, and the length was set, ESIZE if there wasn't&#10;&#10;         enough space, EINVAL if the instance wasn't found.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvSinglePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3e22e8" loc="66:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e3e2470" loc="66:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="add" ref="0x7e3e1b20" loc="91:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
        <documentation loc="77:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
          <short>&#10;&#10; Adds an instance of a type to the TLV block and sets the initial&#10;&#10; length of the instance. </short>
          <long>&#10;&#10; Adds an instance of a type to the TLV block and sets the initial&#10;&#10; length of the instance.  This operation moves data around and&#10;&#10; should always be performed before storing a value of the given&#10;&#10; type.  The type instance will be added to the block as long as&#10;&#10; there are at least len + 2 bytes available in the buffer holding&#10;&#10; the TLV block.&#10;&#10;&#10;&#10; @param pkt Pointer to the packet.&#10;&#10; @param len Length to set for this TLV type.&#10;&#10; @return SUCCESS if enough space was available and the length was&#10;&#10;         set, EALREADY if an instance already exists, ESIZE if&#10;&#10;         there wasn't enough space.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvSinglePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pkt" ref="0x7e3e1570" loc="91:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e3e16f8" loc="91:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="33:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10;</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7e3fc270" loc="48:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="35:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10;</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param msg - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e401d60" loc="48:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7e3fc908" loc="60:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="50:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10;</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param msg - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e3fc5d8" loc="60:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7e3fb010" loc="74:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="62:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10;</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param msg - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e3fcc78" loc="74:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GraphEdge" loc="38:../../../tos/lib/data/graph/GraphEdge.nc">
      <documentation loc="38:../../../tos/lib/data/graph/GraphEdge.nc">
        <short>&#10;&#10; Access information about an edge of the graph.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Access information about an edge of the graph.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="src" ref="0x7defb010" loc="46:../../../tos/lib/data/graph/GraphEdge.nc">
        <documentation loc="40:../../../tos/lib/data/graph/GraphEdge.nc">
          <short>&#10;&#10; Get the first or source vertex of the edge.&#10;&#10; &#10;&#10;</short>
          <long>&#10;&#10; Get the first or source vertex of the edge.&#10;&#10; &#10;&#10; @param m The key for the edge.&#10;&#10; @return The first or source vertex.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="GraphEdge"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7defcdd0" loc="46:../../../tos/lib/data/graph/GraphEdge.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dest" ref="0x7defb718" loc="54:../../../tos/lib/data/graph/GraphEdge.nc">
        <documentation loc="48:../../../tos/lib/data/graph/GraphEdge.nc">
          <short>&#10;&#10; Get the second or destination vertex of the edge.&#10;&#10; &#10;&#10;</short>
          <long>&#10;&#10; Get the second or destination vertex of the edge.&#10;&#10; &#10;&#10; @param m The key for the edge.&#10;&#10; @return The second or destination vertex.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="GraphEdge"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7defb4e8" loc="54:../../../tos/lib/data/graph/GraphEdge.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GainRadioModel" loc="39:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
      <documentation loc="39:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.6 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="putOnAirTo" ref="0x7dd3ba38" loc="40:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
            </type-int>
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="sim_time_t" ref="0x7ec90658"/></typename>
            </type-int>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7dd3b088" loc="40:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="msg" ref="0x7dd3b248" loc="41:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7dd3b3e0" loc="42:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
            </type-int>
          </variable>
          <variable name="endTime" ref="0x7dd3b580" loc="43:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="sim_time_t" ref="0x7ec90658"/></typename>
            </type-int>
          </variable>
          <variable name="gain" ref="0x7dd3b710" loc="44:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
          <variable name="reverseGain" ref="0x7dd3b8a8" loc="45:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0x7dd39b28" loc="51:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7dd399c0" loc="51:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearChannel" ref="0x7dd391d8" loc="48:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setClearValue" ref="0x7dd3beb8" loc="47:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x7dd3bd50" loc="47:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="acked" ref="0x7dd39680" loc="50:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7dd39518" loc="50:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="shouldAck" ref="0x7dd38010" loc="52:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7dd39e78" loc="52:/opt/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PriorityQueue" loc="40:../../../tos/lib/data/queue/PriorityQueue.nc">
      <documentation loc="40:../../../tos/lib/data/queue/PriorityQueue.nc">
        <short>&#10;&#10; Interface to a priority queue sitting on top of an index heap. </short>
        <long>&#10;&#10; Interface to a priority queue sitting on top of an index heap.  The meaning&#10;&#10; of some terms defined here is implementation dependent since either a min or&#10;&#10; max heap could be used.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7de30350" loc="122:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="119:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; Removes all elements from the priority queue.&#10;&#10;</short>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="findBest" ref="0x7de31860" loc="109:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="103:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; Finds the index of the element with the best priority (at the root of the&#10;&#10; heap), but does not remove it.&#10;&#10; &#10;&#10;</short>
          <long>&#10;&#10; Finds the index of the element with the best priority (at the root of the&#10;&#10; heap), but does not remove it.&#10;&#10; &#10;&#10; @return Index of the element with the best priority.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7de35d00" loc="62:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="57:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; The maximum number of elements the priority queue can hold.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; The maximum number of elements the priority queue can hold.&#10;&#10;&#10;&#10; @return The maximum priority queue size.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="insert" ref="0x7de334b0" loc="72:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="64:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; Insert the element at index m into the priority queue.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Insert the element at index m into the priority queue.&#10;&#10;&#10;&#10; @param m Index of the element to insert.&#10;&#10; @return If the priority queue is full then FAIL, if m is too large for the&#10;&#10;         queue then ESIZE, if m has already been inserted then EALREADY,&#10;&#10;         otherwise SUCCESS.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7de331e8" loc="72:../../../tos/lib/data/queue/PriorityQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="moveUp" ref="0x7de32368" loc="87:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="82:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; If the priority of element m has improved, move that element up the heap&#10;&#10; if needed.&#10;&#10;</short>
          <long>&#10;&#10; If the priority of element m has improved, move that element up the heap&#10;&#10; if needed.&#10;&#10; @param m Index of the element with altered priority.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7de32108" loc="87:../../../tos/lib/data/queue/PriorityQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="move" ref="0x7de31280" loc="101:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="96:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; If the priority of element m has changed, move that element up or down the &#10;&#10; heap if needed.&#10;&#10;</short>
          <long>&#10;&#10; If the priority of element m has changed, move that element up or down the &#10;&#10; heap if needed.&#10;&#10; @param m Index of the element with altered priority.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7de31010" loc="101:../../../tos/lib/data/queue/PriorityQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="inserted" ref="0x7de33bf0" loc="80:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="74:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; Checks whether element m has already been inserted.&#10;&#10; &#10;&#10;</short>
          <long>&#10;&#10; Checks whether element m has already been inserted.&#10;&#10; &#10;&#10; @param m Index of the element to check on.&#10;&#10; @return TRUE if element m has already been inserted, otherwise FALSE.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7de33990" loc="80:../../../tos/lib/data/queue/PriorityQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="moveDown" ref="0x7de32aa0" loc="94:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="89:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; If the priority of element m has worsened, move that element down the heap&#10;&#10; if needed.&#10;&#10;</short>
          <long>&#10;&#10; If the priority of element m has worsened, move that element down the heap&#10;&#10; if needed.&#10;&#10; @param m Index of the element with altered priority.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7de32840" loc="94:../../../tos/lib/data/queue/PriorityQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7de35200" loc="47:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="42:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; Checks if the priority queue is empty.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Checks if the priority queue is empty.&#10;&#10;&#10;&#10; @return Whether the priority queue is empty.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="removeBest" ref="0x7de31e60" loc="117:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="111:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; Finds the index of the element with the best priority (at the root of the&#10;&#10; heap) and removes it from the priority queue.&#10;&#10; &#10;&#10;</short>
          <long>&#10;&#10; Finds the index of the element with the best priority (at the root of the&#10;&#10; heap) and removes it from the priority queue.&#10;&#10; &#10;&#10; @return Index of the element with the best priority.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="size" ref="0x7de35798" loc="55:../../../tos/lib/data/queue/PriorityQueue.nc">
        <documentation loc="49:../../../tos/lib/data/queue/PriorityQueue.nc">
          <short>&#10;&#10; The number of elements currently in the priority queue.&#10;&#10;</short>
          <long>&#10;&#10; The number of elements currently in the priority queue.&#10;&#10; Always less than or equal to maxSize().&#10;&#10;&#10;&#10; @return The number of elements in the priority queue.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PriorityQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="GraphEdgeWeight" loc="38:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
      <documentation loc="38:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
        <short>&#10;&#10; Access information about the weight of an edge of the graph.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Access information about the weight of an edge of the graph.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <typedef name="weight_t" ref="0x7def8c90" loc="38:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
          <interfacedef-ref qname="GraphEdgeWeight"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="weight_t" scoped="" ref="0x7def8c90"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="canChangeWeights" ref="0x7def5320" loc="46:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
        <documentation loc="40:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
          <short>&#10;&#10; Checks if the graph weights can be changed. </short>
          <long>&#10;&#10; Checks if the graph weights can be changed.  This value should not change &#10;&#10; at run-time.&#10;&#10; &#10;&#10; @return TRUE if the graph weights can change, FALSE if they cannot.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="GraphEdgeWeight"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="weightChanged" ref="0x7def49e0" loc="71:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
        <documentation loc="66:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
          <short>&#10;&#10; The weight of an edge in the graph changed.&#10;&#10; &#10;&#10;</short>
          <long>&#10;&#10; The weight of an edge in the graph changed.&#10;&#10; &#10;&#10; @param m The key for the edge that had its weight changed.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="GraphEdgeWeight"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7def47c8" loc="71:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setWeight" ref="0x7def42f0" loc="64:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
        <documentation loc="57:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
          <short>&#10;&#10; Set the weight of the edge. </short>
          <long>&#10;&#10; Set the weight of the edge.  If the graph is actually unweighted, no&#10;&#10; action is taken.&#10;&#10; &#10;&#10; @param m The key for the edge.&#10;&#10; @param w The updated weight.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="GraphEdgeWeight"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="weight_t" scoped="" ref="0x7def8c90"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7def5f18" loc="64:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </variable>
          <variable name="w" ref="0x7def40c0" loc="64:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="weight_t" scoped="" ref="0x7def8c90"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="weight" ref="0x7def5a40" loc="55:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
        <documentation loc="48:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
          <short>&#10;&#10; Get the weight of the edge. </short>
          <long>&#10;&#10; Get the weight of the edge.  If the graph is actually unweighted, a unit&#10;&#10; weight is always returned.&#10;&#10; &#10;&#10; @param m The key for the edge.&#10;&#10; @return The weight of the edge.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="GraphEdgeWeight"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="weight_t" scoped="" ref="0x7def8c90"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7def5800" loc="55:../../../tos/lib/data/graph/GraphEdgeWeight.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TlvBlock" loc="38:../../../tos/lib/netarch/tlv/TlvBlock.nc">
      <documentation loc="38:../../../tos/lib/netarch/tlv/TlvBlock.nc">
        <short>&#10;&#10; Manipulate a TLV block independent of the types it contains.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Manipulate a TLV block independent of the types it contains.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="remove" ref="0x7e3b4790" loc="60:../../../tos/lib/netarch/tlv/TlvBlock.nc">
        <documentation loc="53:../../../tos/lib/netarch/tlv/TlvBlock.nc">
          <short>&#10;&#10; Removes a TLV block from the beginning of a given data buffer.&#10;&#10;</short>
          <long>&#10;&#10; Removes a TLV block from the beginning of a given data buffer.&#10;&#10; Other data is moved to fill the gap.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @param trailLen Current length of trailing data.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvBlock"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3b4378" loc="60:../../../tos/lib/netarch/tlv/TlvBlock.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="trailLen" ref="0x7e3b4508" loc="60:../../../tos/lib/netarch/tlv/TlvBlock.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="length" ref="0x7e3b4ee0" loc="69:../../../tos/lib/netarch/tlv/TlvBlock.nc">
        <documentation loc="62:../../../tos/lib/netarch/tlv/TlvBlock.nc">
          <short>&#10;&#10; Returns the length of the entire TLV block, including the block&#10;&#10; length value itself.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Returns the length of the entire TLV block, including the block&#10;&#10; length value itself.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @return Length of the TLV block.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvBlock"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3b4c68" loc="69:../../../tos/lib/netarch/tlv/TlvBlock.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="add" ref="0x7e3b5e98" loc="51:../../../tos/lib/netarch/tlv/TlvBlock.nc">
        <documentation loc="40:../../../tos/lib/netarch/tlv/TlvBlock.nc">
          <short>&#10;&#10; Adds a TLV block at the beginning of a given data buffer. </short>
          <long>&#10;&#10; Adds a TLV block at the beginning of a given data buffer.  Other&#10;&#10; data is moved to accomidate it.  This must be called on any new TLV&#10;&#10; block before using any other TLV commands.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @param trailLen Current length of trailing data.&#10;&#10; @param maxLen Maximum possible length of TLV block and trailing data.&#10;&#10; @return SUCCESS if the add completed, ESIZE if there wasn't enough&#10;&#10;         space.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvBlock"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3b5810" loc="51:../../../tos/lib/netarch/tlv/TlvBlock.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="trailLen" ref="0x7e3b59a0" loc="51:../../../tos/lib/netarch/tlv/TlvBlock.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
          <variable name="maxLen" ref="0x7e3b5b28" loc="51:../../../tos/lib/netarch/tlv/TlvBlock.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TossimPacketModel" loc="37:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
      <documentation loc="37:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.6 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7e584250" loc="49:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="39:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="node" ref="0x7e585b68" loc="49:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="msg" ref="0x7e585d18" loc="49:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e585ea0" loc="49:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0x7e5825a0" loc="77:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="71:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short>&#10; Signal that a packet was received.</short>
          <long>&#10; Signal that a packet was received. Note that there is no buffer&#10; swap: a component using this interface must copy out the message&#10; if it needs it.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e582378" loc="77:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7e5848e8" loc="61:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="51:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e584598" loc="61:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7e582038" loc="68:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e584c30" loc="68:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7e584db8" loc="68:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="shouldAck" ref="0x7e582a58" loc="79:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7e5828f0" loc="79:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TlvSingle" loc="41:../../../tos/lib/netarch/tlv/TlvSingle.nc">
      <documentation loc="41:../../../tos/lib/netarch/tlv/TlvSingle.nc">
        <short>&#10;&#10; Access data stored in a generalized Type-Length-Value (TLV) block.&#10;&#10;</short>
        <long>&#10;&#10; Access data stored in a generalized Type-Length-Value (TLV) block.&#10;&#10; This interface allows at most one instance of a type.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="value" ref="0x7e3ad4d0" loc="77:../../../tos/lib/netarch/tlv/TlvSingle.nc">
        <documentation loc="70:../../../tos/lib/netarch/tlv/TlvSingle.nc">
          <short>&#10;&#10; Returns the value in this type instance within the TLV block. </short>
          <long>&#10;&#10; Returns the value in this type instance within the TLV block.  If&#10;&#10; the type instance is not found in the block, then NULL is returned.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @return Pointer to the value in this TLV type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3ad210" loc="77:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="remove" ref="0x7e3acc80" loc="106:../../../tos/lib/netarch/tlv/TlvSingle.nc">
        <documentation loc="98:../../../tos/lib/netarch/tlv/TlvSingle.nc">
          <short>&#10;&#10; Removes this type instance from the TLV block.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Removes this type instance from the TLV block.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @param trailLen Current length of trailing data.&#10;&#10; @return SUCCESS if the type instance was found and removed, EINVAL&#10;&#10;         otherwise.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3ac858" loc="106:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="trailLen" ref="0x7e3ac9e8" loc="106:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="length" ref="0x7e3b1ee8" loc="50:../../../tos/lib/netarch/tlv/TlvSingle.nc">
        <documentation loc="43:../../../tos/lib/netarch/tlv/TlvSingle.nc">
          <short>&#10;&#10; Returns the length of this type instance within the TLV block. </short>
          <long>&#10;&#10; Returns the length of this type instance within the TLV block.  If&#10;&#10; the type instance is not found in the block, then 0 is returned.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @return Length of this TLV type.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3b1c58" loc="50:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLength" ref="0x7e3b0d28" loc="67:../../../tos/lib/netarch/tlv/TlvSingle.nc">
        <documentation loc="52:../../../tos/lib/netarch/tlv/TlvSingle.nc">
          <short>&#10;&#10; Sets the length of a type instance within the TLV block. </short>
          <long>&#10;&#10; Sets the length of a type instance within the TLV block.  This&#10;&#10; operation moves data around and should always be performed before&#10;&#10; storing a value with a different length than the one currently&#10;&#10; stored.  If the type instance is not found in the block or there&#10;&#10; is not enough room for the new length, returns ESIZE.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @param len Length to set for this TLV type.&#10;&#10; @param trailLen Current length of trailing data.&#10;&#10; @param maxLen Maximum possible length of TLV block and trailing data.&#10;&#10; @return SUCCESS if the type instance was found, enough space was&#10;&#10;         available, and the length was set, ESIZE if there wasn't&#10;&#10;         enough space, EINVAL if the instance wasn't found.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3b03d8" loc="67:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e3b0560" loc="67:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
          <variable name="trailLen" ref="0x7e3b0700" loc="68:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
          <variable name="maxLen" ref="0x7e3b0888" loc="68:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="add" ref="0x7e3ac380" loc="95:../../../tos/lib/netarch/tlv/TlvSingle.nc">
        <documentation loc="79:../../../tos/lib/netarch/tlv/TlvSingle.nc">
          <short>&#10;&#10; Adds an instance of a type to the TLV block and sets the initial&#10;&#10; length of the instance. </short>
          <long>&#10;&#10; Adds an instance of a type to the TLV block and sets the initial&#10;&#10; length of the instance.  This operation moves data around and&#10;&#10; should always be performed before storing a value of the given&#10;&#10; type.  The type instance will be added to the block as long as&#10;&#10; there are at least len + 2 bytes available in the buffer holding&#10;&#10; the TLV block.&#10;&#10;&#10;&#10; @param block Pointer to the TLV block.&#10;&#10; @param len Length to set for this TLV type.&#10;&#10; @param trailLen Current length of trailing data.&#10;&#10; @param maxLen Maximum possible length of TLV block and trailing data.&#10;&#10; @return SUCCESS if enough space was available and the length was&#10;&#10;         set, EALREADY if an instance already exists, ESIZE if&#10;&#10;         there wasn't enough space.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="TlvSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block" ref="0x7e3ad9a8" loc="95:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7e3adb30" loc="95:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
          <variable name="trailLen" ref="0x7e3adcd0" loc="96:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
          <variable name="maxLen" ref="0x7e3ade58" loc="96:../../../tos/lib/netarch/tlv/TlvSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.  &#10;</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x7dba4010" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7dba4010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x7dba20e8" loc="89:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="88:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="test" ref="0x7dba3a18" loc="78:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10;</short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="get" ref="0x7dba4470" loc="52:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.&#10;</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7dba4010"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setScale" ref="0x7dba2600" loc="95:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="91:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.&#10;</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x7dba2428" loc="95:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x7dba2998" loc="101:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.&#10;</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="reset" ref="0x7dba3010" loc="66:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="65:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7dba4cb8" loc="61:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="60:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7dba3da8" loc="84:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10;</short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0x7dba4970" loc="58:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="54:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.&#10;</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7dba4010"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x7dba47b0" loc="58:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x7dba4010"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7dba3348" loc="69:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="stop" ref="0x7dba3678" loc="72:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="71:/opt/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts. </short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="50:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
      <documentation loc="50:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7e58cee8" loc="166:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="153:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param amsg the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7e875c90"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e58cba0" loc="166:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7e592148" loc="77:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="69:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.&#10;</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param amsg  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e593e68" loc="77:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7e593530" loc="57:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.&#10;</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="destination" ref="0x7e593b18" loc="67:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="59:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.&#10;</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param amsg    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e593888" loc="67:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7e591328" loc="110:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="94:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet. </short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e592d20" loc="110:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7e592eb0" loc="110:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7e5929d8" loc="92:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="79:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet. </short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e592490" loc="92:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7e592620" loc="92:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7e58c010" loc="136:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="127:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.&#10;</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  amsg   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e591da0" loc="136:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7e58c850" loc="151:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet. </short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  amsg    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e58c350" loc="151:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7e58c4d8" loc="151:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7e591a58" loc="125:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="112:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e591670" loc="125:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7e58b670" loc="176:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="168:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param amsg the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7e875c90"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7e58b248" loc="176:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
                <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7e58b3d8" loc="176:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7e875c90"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7e58ba20" loc="184:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="178:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.&#10;&#10;</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7e875c90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="65:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
      <documentation loc="65:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it. </short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7e2ff010" loc="74:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.&#10;&#10;</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="stop" ref="0x7e2ff488" loc="84:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
        <documentation loc="76:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10;</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Compare" loc="39:../../../tos/interfaces/Compare.nc">
      <documentation loc="39:../../../tos/interfaces/Compare.nc">
        <short>&#10;&#10; Generalized comparison interface between two items. </short>
        <long>&#10;&#10; Generalized comparison interface between two items.  Many uses are possible&#10;&#10; here, since the inputs could be array indices, as just one example.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <parameters>
        <typedef name="compare_t" ref="0x7de22038" loc="39:../../../tos/interfaces/Compare.nc">
          <interfacedef-ref qname="Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="compare_t" scoped="" ref="0x7de22038"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x7de22a50" loc="49:../../../tos/interfaces/Compare.nc">
        <documentation loc="41:../../../tos/interfaces/Compare.nc">
          <short>&#10;&#10; Returns a negative integer, zero, or a positive integer if the first&#10;&#10; argument is less than, equal to, or greater than the second.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Returns a negative integer, zero, or a positive integer if the first&#10;&#10; argument is less than, equal to, or greater than the second.&#10;&#10;&#10;&#10; @param a First item to test.&#10;&#10; @param b Second item to test.&#10;&#10; @return A negative integer, zero, or a positive integer.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="short" size="I:2" alignment="I:2">
            <typename><typedef-ref name="int16_t" ref="0x7feb0af0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="compare_t" scoped="" ref="0x7de22038"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="compare_t" scoped="" ref="0x7de22038"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="a" ref="0x7de225b8" loc="49:../../../tos/interfaces/Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="compare_t" scoped="" ref="0x7de22038"/></type-var>
          </variable>
          <variable name="b" ref="0x7de22748" loc="49:../../../tos/interfaces/Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="compare_t" scoped="" ref="0x7de22038"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="41:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
      <documentation loc="41:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.&#10;&#10;</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7ed72ba8" loc="46:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="43:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7e8343e0" loc="61:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7e834010" loc="54:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10;</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="42:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7e528e58" loc="42:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7e528e58"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7e525e70" loc="125:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="121:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.&#10;</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="fired" ref="0x7e526188" loc="72:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="69:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</short>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7e5252c8" loc="103:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="89:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7e526c10" loc="103:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7e526da0" loc="103:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7e5268e8" loc="87:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="83:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.&#10;</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7e5236a0" loc="140:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="135:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7e5232c8" loc="133:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="127:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7e526558" loc="81:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7e527530" loc="53:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="45:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7e527288" loc="53:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7e525b18" loc="118:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="105:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7e5255f0" loc="118:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7e525780" loc="118:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7e527b00" loc="62:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7e527858" loc="62:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7e527e08" loc="67:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="64:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="IndexedIterator" loc="40:../../../tos/interfaces/IndexedIterator.nc">
      <parameters>
        <typedef name="iterator_item_t" ref="0x7e406a70" loc="40:../../../tos/interfaces/IndexedIterator.nc">
          <interfacedef-ref qname="IndexedIterator"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e406a70"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="end" ref="0x7e404940" loc="56:../../../tos/interfaces/IndexedIterator.nc">
        <documentation loc="50:../../../tos/interfaces/IndexedIterator.nc">
          <short>&#10;&#10; Checks whether you have already reached the end.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Checks whether you have already reached the end.&#10;&#10;&#10;&#10; @param m Current item's index.&#10;&#10; @return TRUE if the current item is the end, FALSE otherwise.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="IndexedIterator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="iterator_end_t" ref="0x7e407960"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e406a70"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7e404700" loc="56:../../../tos/interfaces/IndexedIterator.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e406a70"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="next" ref="0x7e404230" loc="48:../../../tos/interfaces/IndexedIterator.nc">
        <documentation loc="42:../../../tos/interfaces/IndexedIterator.nc">
          <short>&#10;&#10; Gets the index of the next item.&#10;&#10;&#10;&#10;</short>
          <long>&#10;&#10; Gets the index of the next item.&#10;&#10;&#10;&#10; @param m Current item's index.&#10;&#10; @return The next item's index.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="IndexedIterator"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e406a70"/></type-var>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e406a70"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x7e404030" loc="48:../../../tos/interfaces/IndexedIterator.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="iterator_item_t" scoped="" ref="0x7e406a70"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
    <struct loc="161:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe0460" defined="" size="I:1" alignment="I:1">
      <field name="psr321" ref="0x7dbe0578" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="psr0" ref="0x7dbe05e0" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="pud" ref="0x7dbe0648" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="acme" ref="0x7dbe06b0" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0x7dbe0718" bit-offset="I:4" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="tsm" ref="0x7dbe0780" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="111:/usr/include/cygwin/signal.h" ref="0x7eac08e8" defined="" size="I:8" alignment="I:4">
      <field name="si_tid" ref="0x7eac0a00" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="timer_t" ref="0x7f3a0010"/></typename>
        </type-int>
      </field>
      <field name="si_overrun" ref="0x7eac0a68" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="itimerspec" loc="119:/usr/include/sys/types.h" ref="0x7f3c0ae0" defined="" size="I:16" alignment="I:4">
      <field name="it_interval" ref="0x7f3c0e68" bit-offset="I:0" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timespec" ref="0x7f3c0700"/></type-tag>
      </field>
      <field name="it_value" ref="0x7f3c0ed0" bit-offset="I:64" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timespec" ref="0x7f3c0700"/></type-tag>
      </field>
    </struct>
    <enum name="__fdlibm_version" loc="399:/usr/include/math.h" ref="0x7ecb1198" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="43:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h" ref="0x7ea632e8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct name="tossim_metadata" loc="18:/opt/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h" ref="0x7e873790" defined="" size="I:4" alignment="I:1">
      <field name="strength" ref="0x7e873b00" bit-offset="I:0" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1" network="nx_int8_t">
          <typename><typedef-ref name="nx_int8_t" ref="0x7f471308"/></typename>
        </type-int>
      </field>
      <field name="ack" ref="0x7e873b68" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="time" ref="0x7e873bd0" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f461390"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct name="gain_entry" loc="45:/opt/tinyos-2.x/tos/lib/tossim/sim_gain.h" ref="0x7e9c67c0" defined="" size="I:16" alignment="I:4">
      <field name="mote" ref="0x7e9c6b50" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="gain" ref="0x7e9c6bb8" bit-offset="I:32" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="next" ref="0x7e9c6c20" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0x7e9c67c0"/></type-tag>
        </type-pointer>
      </field>
    </struct>
    <struct name="sim_gain_noise" loc="3:/opt/tinyos-2.x/tos/lib/tossim/sim_gain.c" ref="0x7e9b71a8" defined="" size="I:16" alignment="I:4">
      <field name="mean" ref="0x7e9b7438" bit-offset="I:0" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="range" ref="0x7e9b74a0" bit-offset="I:64" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
    </struct>
    <struct name="timeval" loc="16:/usr/include/sys/time.h" ref="0x7eb02518" defined="" size="I:8" alignment="I:4">
      <field name="tv_sec" ref="0x7eb027a8" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="time_t" ref="0x7f3c0590"/></typename>
        </type-int>
      </field>
      <field name="tv_usec" ref="0x7eb02810" bit-offset="I:32" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="suseconds_t" ref="0x7f3a03c0"/></typename>
        </type-int>
      </field>
    </struct>
    <union loc="84:/usr/include/cygwin/signal.h" ref="0x7eac2a48" defined="" size="I:4" alignment="I:4">
      <field name="_si_fd" ref="0x7eac2b60" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_si_pipe_fhandler" ref="0x7eac2bc8" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="_si_str" ref="0x7eac2c30" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </union>
    <nx_struct loc="38:../../../tos/lib/netarch/tlv/Tlv.h" ref="0x7e3e5ad0" defined="" size="I:2" alignment="I:1">
      <field name="type" ref="0x7e3e5be8" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="len" ref="0x7e3e5c50" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="val" ref="0x7e3e5cb8" bit-offset="I:16" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <enum loc="49:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e764040" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="sigaction" loc="195:/usr/include/cygwin/signal.h" ref="0x7eab0908" defined="" size="I:12" alignment="I:4">
      <field name="sa_handler" ref="0x7eaa65e0" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </function-parameters>
          </type-function>
          <typename><typedef-ref name="_sig_func_ptr" ref="0x7eab0788"/></typename>
        </type-pointer>
      </field>
      <field name="sa_sigaction" ref="0x7eaa6648" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
              <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:148" alignment="I:4"><struct-ref ref="0x7eab5240"/>
                  <typename><typedef-ref name="siginfo_t" ref="0x7eab5a58"/></typename>
                </type-tag>
              </type-pointer>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="sa_mask" ref="0x7eaa66b0" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="sigset_t" ref="0x7ead1c20"/></typename>
        </type-int>
      </field>
      <field name="sa_flags" ref="0x7eaa6718" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <nx_struct loc="99:../../../tos/lib/netarch/dsr/DsrOptions.h" ref="0x7e3f5cb0" defined="" size="I:0" alignment="I:1">
      <field name="addr" ref="0x7e3f5dc8" bit-offset="I:0" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
            <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <attribute name="number"  loc="NONE" ref="0x7fef00c8" size="V:" alignment="V:">
    </attribute>
    <enum loc="176:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe0c38" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="66:../../../tos/lib/netarch/dsr/DsrControl.h" ref="0x7e4b3268" defined="" size="I:16" alignment="I:2">
      <field name="node" ref="0x7e4b3380" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
        </type-int>
      </field>
      <field name="next" ref="0x7e4b33e8" bit-offset="I:16" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ident" ref="0x7e4b3450" bit-offset="I:24" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="target" ref="0x7e4b34b8" bit-offset="I:64" size="I:8">
        <type-array elements="I:4" size="I:8" alignment="I:2">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
          </type-int>
        </type-array>
      </field>
    </struct>
    <struct name="node" loc="51:/opt/tinyos-2.x/tos/lib/tossim/heap.c" ref="0x7eb94b60" defined="" size="I:12" alignment="I:4">
      <field name="data" ref="0x7eb94e40" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="key" ref="0x7eb94ea8" bit-offset="I:32" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <struct name="__pthread_rwlockattr_t" loc="228:/usr/include/cygwin/types.h" ref="0x7f340770" defined="" size="I:1" alignment="I:1">
      <field name="__dummy" ref="0x7f340a20" bit-offset="I:0" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
    </struct>
    <enum loc="135:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e759e80" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct loc="45:../../../tos/lib/netarch/tlv/Tlv.h" ref="0x7e3e4148" defined="" size="I:1" alignment="I:1">
      <field name="len" ref="0x7e3e4260" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="tlv" ref="0x7e3e42c8" bit-offset="I:8" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><nx_struct-ref ref="0x7e3e5ad0"/>
            <typename><typedef-ref name="tlv_t" ref="0x7e3e5d88"/></typename>
          </type-tag>
        </type-array>
      </field>
    </nx_struct>
    <nx_struct name="serial_packet" loc="120:/opt/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7e867c38" defined="" size="I:7" alignment="I:1">
      <field name="header" ref="0x7e867f00" bit-offset="I:0" size="I:7">
        <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x7e868d88"/>
          <typename><typedef-ref name="serial_header_t" ref="0x7e867aa8"/></typename>
        </type-tag>
      </field>
      <field name="data" ref="0x7e867f68" bit-offset="I:56" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <enum loc="43:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbf2610" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="81:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe8380" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="integer"  loc="NONE" ref="0x7ff20f30" size="V:" alignment="V:">
    </attribute>
    <attribute name="exactlyonce" loc="83:/opt/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x7ec452a8" defined="" size="I:0" alignment="I:1">
    </attribute>
    <union name="message_footer" loc="46:/opt/tinyos-2.x/tos/lib/tossim/platform_message.h" ref="0x7e866a40" defined="" size="I:2" alignment="I:1">
      <field name="tossim" ref="0x7e866c38" bit-offset="I:0" size="I:2">
        <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="tossim_footer" ref="0x7e873340"/>
          <typename><typedef-ref name="tossim_footer_t" ref="0x7e873600"/></typename>
        </type-tag>
      </field>
    </union>
    <struct loc="244:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbda718" defined="" size="I:1" alignment="I:1">
      <field name="rsvd" ref="0x7dbda830" bit-offset="I:0" bit-size="I:5">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="focC" ref="0x7dbda898" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="focB" ref="0x7dbda900" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="focA" ref="0x7dbda968" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="ucontext" loc="30:/usr/include/cygwin/signal.h" ref="0x7ead0eb0" defined="" size="I:212" alignment="I:4">
      <field name="cr2" ref="0x7eac4480" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="dr0" ref="0x7eac44e8" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="dr1" ref="0x7eac4550" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="dr2" ref="0x7eac45b8" bit-offset="I:96" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="dr3" ref="0x7eac4620" bit-offset="I:128" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="dr6" ref="0x7eac4688" bit-offset="I:160" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="dr7" ref="0x7eac46f0" bit-offset="I:192" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="fpstate" ref="0x7eac4758" bit-offset="I:224" size="I:112">
        <type-tag size="I:112" alignment="I:4"><struct-ref name="_fpstate" ref="0x7ead0198"/></type-tag>
      </field>
      <field name="gs" ref="0x7eac47c0" bit-offset="I:1120" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="fs" ref="0x7eac4828" bit-offset="I:1152" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="es" ref="0x7eac4890" bit-offset="I:1184" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="ds" ref="0x7eac48f8" bit-offset="I:1216" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="edi" ref="0x7eac4960" bit-offset="I:1248" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="esi" ref="0x7eac4a48" bit-offset="I:1280" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="ebx" ref="0x7eac4ab0" bit-offset="I:1312" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="edx" ref="0x7eac4b18" bit-offset="I:1344" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="ecx" ref="0x7eac4b80" bit-offset="I:1376" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="eax" ref="0x7eac4be8" bit-offset="I:1408" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="ebp" ref="0x7eac4c50" bit-offset="I:1440" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="eip" ref="0x7eac4cb8" bit-offset="I:1472" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="cs" ref="0x7eac4d20" bit-offset="I:1504" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="eflags" ref="0x7eac4d88" bit-offset="I:1536" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="esp" ref="0x7eac4df0" bit-offset="I:1568" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="ss" ref="0x7eac4e58" bit-offset="I:1600" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_internal" ref="0x7eac4ec0" bit-offset="I:1632" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="oldmask" ref="0x7eac3110" bit-offset="I:1664" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <union name="message_metadata" loc="50:/opt/tinyos-2.x/tos/lib/tossim/platform_message.h" ref="0x7e866ea0" defined="" size="I:4" alignment="I:1">
      <field name="tossim" ref="0x7e8640c8" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0x7e873790"/>
          <typename><typedef-ref name="tossim_metadata_t" ref="0x7e873ca0"/></typename>
        </type-tag>
      </field>
    </union>
    <attribute name="combine"  loc="NONE" ref="0x7fef0a80" size="V:" alignment="V:">
      <field name="fn" ref="0x7fef0b98" bit-offset="U:" bit-size="U:">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </attribute>
    <union name="__fmath" loc="17:/usr/include/math.h" ref="0x7ed921b8" defined="" size="I:4" alignment="I:4">
      <field name="i" ref="0x7ed924d8" bit-offset="I:0" size="I:4">
        <type-array elements="I:1" size="I:4" alignment="I:4">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="__ULong" ref="0x7f1c1498"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="f" ref="0x7ed92540" bit-offset="I:0" size="I:4">
        <type-float cname="float" size="I:4" alignment="I:4"></type-float>
      </field>
    </union>
    <struct loc="39:../../../tos/lib/data/graph/Graph.h" ref="0x7df50410" defined="" size="I:2" alignment="I:1">
      <field name="dest" ref="0x7df50528" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
        </type-int>
      </field>
      <field name="next" ref="0x7df50590" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="221:/usr/include/cygwin/types.h" ref="0x7f341ee8" defined="" size="I:8" alignment="I:4">
      <field name="mutex" ref="0x7f340050" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_mutex_t" ref="0x7f3513b0"/></type-tag>
          <typename><typedef-ref name="pthread_mutex_t" ref="0x7f351660"/></typename>
        </type-pointer>
      </field>
      <field name="state" ref="0x7f3400b8" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="85:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e7617e8" defined="" size="I:1" alignment="I:1">
      <field name="mux" ref="0x7e761900" bit-offset="I:0" bit-size="I:5">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="adlar" ref="0x7e761968" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="refs" ref="0x7e7619d0" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <nx_struct name="serial_header" loc="112:/opt/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7e868d88" defined="" size="I:7" alignment="I:1">
      <field name="dest" ref="0x7e867838" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
      <field name="src" ref="0x7e8678a0" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
      <field name="length" ref="0x7e867908" bit-offset="I:32" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="group" ref="0x7e867970" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_group_t" ref="0x7e875720"/></typename>
        </type-int>
      </field>
      <field name="type" ref="0x7e8679d8" bit-offset="I:48" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_id_t" ref="0x7e875548"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <union loc="89:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe75c0" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x7dbe76d8" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x7dbe7740" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7dbe71d8"/></type-tag>
      </field>
    </union>
    <struct name="__pthread_cond_t" loc="218:/usr/include/cygwin/types.h" ref="0x7f341938" defined="" size="I:1" alignment="I:1">
      <field name="__dummy" ref="0x7f341ae8" bit-offset="I:0" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
    </struct>
    <union name="message_header" loc="41:/opt/tinyos-2.x/tos/lib/tossim/platform_message.h" ref="0x7e8664c8" defined="" size="I:7" alignment="I:1">
      <field name="tossim" ref="0x7e866778" bit-offset="I:0" size="I:7">
        <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0x7e874a10"/>
          <typename><typedef-ref name="tossim_header_t" ref="0x7e8731b0"/></typename>
        </type-tag>
      </field>
      <field name="serial" ref="0x7e8667e0" bit-offset="I:0" size="I:7">
        <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x7e868d88"/>
          <typename><typedef-ref name="serial_header_t" ref="0x7e867aa8"/></typename>
        </type-tag>
      </field>
    </union>
    <struct name="timespec" loc="114:/usr/include/sys/types.h" ref="0x7f3c0700" defined="" size="I:8" alignment="I:4">
      <field name="tv_sec" ref="0x7f3c0980" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="time_t" ref="0x7f3c0590"/></typename>
        </type-int>
      </field>
      <field name="tv_nsec" ref="0x7f3c09e8" bit-offset="I:32" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="__tzinfo_struct" loc="85:/usr/include/time.h" ref="0x7eae1df0" defined="" size="I:64" alignment="I:4">
      <field name="__tznorth" ref="0x7ead6200" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__tzyear" ref="0x7ead6268" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__tzrule" ref="0x7ead62d0" bit-offset="I:64" size="I:56">
        <type-array elements="I:2" size="I:56" alignment="I:4">
          <type-tag size="I:28" alignment="I:4"><struct-ref name="__tzrule_struct" ref="0x7eae1338"/>
            <typename><typedef-ref name="__tzrule_type" ref="0x7eae1c50"/></typename>
          </type-tag>
        </type-array>
      </field>
    </struct>
    <struct ref="0x7ff202f8" size="V:" alignment="V:">
    </struct>
    <enum loc="39:/opt/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x7ec33158" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="673:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h" ref="0x7e7d8278" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="__pthread_mutexattr_t" loc="216:/usr/include/cygwin/types.h" ref="0x7f341098" defined="" size="I:1" alignment="I:1">
      <field name="__dummy" ref="0x7f341248" bit-offset="I:0" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
    </struct>
    <enum loc="42:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e765b90" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="29:/opt/tinyos-2.x/tos/lib/timer/Timer.h" ref="0x7e7f3aa0" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0x7e7f3bb8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="55:/opt/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x7ec32220" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="timezone" loc="21:/usr/include/sys/time.h" ref="0x7eb02908" defined="" size="I:8" alignment="I:4">
      <field name="tz_minuteswest" ref="0x7eb02b90" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tz_dsttime" ref="0x7eb02bf8" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="__pthread_mutex_t" loc="212:/usr/include/cygwin/types.h" ref="0x7f3513b0" defined="" size="I:1" alignment="I:1">
      <field name="__dummy" ref="0x7f351560" bit-offset="I:0" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
    </struct>
    <enum loc="14:/opt/tinyos-2.x/tos/types/AM.h" ref="0x7e874010" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct loc="137:../../../tos/lib/netarch/dsr/DsrOptions.h" ref="0x7e3f2850" defined="" size="I:1" alignment="I:1">
      <field name="type" ref="0x7e3f2968" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct loc="44:../../../tos/lib/data/graph/Graph.h" ref="0x7df50960" defined="" size="I:2" alignment="I:1">
      <field name="src" ref="0x7df50a78" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
        </type-int>
      </field>
      <field name="current" ref="0x7df50ae0" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
        </type-int>
      </field>
    </struct>
    <union loc="141:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe2898" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x7dbe29b0" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x7dbe2a18" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7dbe2380"/></type-tag>
      </field>
    </union>
    <union loc="303:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbd3700" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x7dbd3818" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x7dbd3880" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7dbd3250"/></type-tag>
      </field>
    </union>
    <struct name="sim_event" loc="45:/opt/tinyos-2.x/tos/lib/tossim/sim_event_queue.h" ref="0x7ec80ce0" defined="" size="I:28" alignment="I:4">
      <field name="time" ref="0x7ec73bb0" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0x7ec90658"/></typename>
        </type-int>
      </field>
      <field name="mote" ref="0x7ec73c18" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="force" ref="0x7ec73c80" bit-offset="I:96" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
        </type-int>
      </field>
      <field name="cancelled" ref="0x7ec73ce8" bit-offset="I:104" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
        </type-int>
      </field>
      <field name="data" ref="0x7ec73d50" bit-offset="I:128" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="handle" ref="0x7ec73db8" bit-offset="I:160" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x7ec80ce0"/>
                  <typename><typedef-ref name="sim_event_t" ref="0x7ec80eb0"/></typename>
                </type-tag>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="cleanup" ref="0x7ec73e30" bit-offset="I:192" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x7ec80ce0"/>
                  <typename><typedef-ref name="sim_event_t" ref="0x7ec80eb0"/></typename>
                </type-tag>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
    </struct>
    <struct name="_fpstate" loc="17:/usr/include/cygwin/signal.h" ref="0x7ead0198" defined="" size="I:112" alignment="I:4">
      <field name="cw" ref="0x7ead0a68" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="sw" ref="0x7ead0ad0" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tag" ref="0x7ead0b38" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="ipoff" ref="0x7ead0ba0" bit-offset="I:96" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="cssel" ref="0x7ead0c08" bit-offset="I:128" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="dataoff" ref="0x7ead0c70" bit-offset="I:160" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="datasel" ref="0x7ead0cd8" bit-offset="I:192" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_st" ref="0x7ead0d40" bit-offset="I:224" size="I:80">
        <type-array elements="I:80" size="I:80" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="nxst" ref="0x7ead0da8" bit-offset="I:864" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="66:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbf0610" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="34:/usr/include/stdlib.h" ref="0x7ee82b40" defined="" size="I:8" alignment="I:4">
      <field name="quot" ref="0x7ee82c58" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rem" ref="0x7ee82cc0" bit-offset="I:32" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="95:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e761da0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum name="dsr_option_types" loc="59:../../../tos/lib/netarch/dsr/DsrOptions.h" ref="0x7e3f6590" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct name="tossim_footer" loc="14:/opt/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h" ref="0x7e873340" defined="" size="I:2" alignment="I:1">
      <field name="crc" ref="0x7e873530" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nxle_uint16_t">
          <typename><typedef-ref name="nxle_uint16_t" ref="0x7f450e10"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct name="sim_packet" loc="51:/opt/tinyos-2.x/tos/lib/tossim/sim_packet.h" ref="0x7e884908" defined="" size="I:0" alignment="I:1">
    </struct>
    <struct name="__tm" loc="48:/usr/include/sys/reent.h" ref="0x7f1c0040" defined="" size="I:36" alignment="I:4">
      <field name="__tm_sec" ref="0x7f1c0798" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__tm_min" ref="0x7f1c0800" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__tm_hour" ref="0x7f1c0868" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__tm_mday" ref="0x7f1c08d0" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__tm_mon" ref="0x7f1c0938" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__tm_year" ref="0x7f1c09a0" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__tm_wday" ref="0x7f1c0a08" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__tm_yday" ref="0x7f1c0a70" bit-offset="I:224" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__tm_isdst" ref="0x7f1c0ad8" bit-offset="I:256" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="28:/usr/include/stdlib.h" ref="0x7ee82618" defined="" size="I:8" alignment="I:4">
      <field name="quot" ref="0x7ee82730" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rem" ref="0x7ee82798" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="__tzrule_struct" loc="74:/usr/include/time.h" ref="0x7eae1338" defined="" size="I:28" alignment="I:4">
      <field name="ch" ref="0x7eae1910" bit-offset="I:0" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="m" ref="0x7eae1978" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="n" ref="0x7eae19e0" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="d" ref="0x7eae1a48" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="s" ref="0x7eae1ab0" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="change" ref="0x7eae1b18" bit-offset="I:160" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="time_t" ref="0x7f3c0590"/></typename>
        </type-int>
      </field>
      <field name="offset" ref="0x7eae1b80" bit-offset="I:192" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="181:/usr/include/cygwin/signal.h" ref="0x7eab1e28" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="26:/opt/tinyos-2.x/tos/types/AM.h" ref="0x7e874300" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct loc="167:../../../tos/lib/netarch/dsr/DsrOptions.h" ref="0x7e3f1568" defined="" size="I:5" alignment="I:1">
      <field name="ident" ref="0x7e3f1680" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="src" ref="0x7e3f16e8" bit-offset="I:8" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
      <field name="dest" ref="0x7e3f1750" bit-offset="I:24" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <nx_struct loc="119:../../../tos/lib/netarch/dsr/DsrOptions.h" ref="0x7e3f3708" defined="" size="I:5" alignment="I:1">
      <field name="type" ref="0x7e3f3820" bit-offset="I:0" bit-size="I:4">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="salvage" ref="0x7e3f3888" bit-offset="I:4" bit-size="I:4">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="src" ref="0x7e3f38f0" bit-offset="I:8" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
      <field name="dest" ref="0x7e3f3958" bit-offset="I:24" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
      <field name="info" ref="0x7e3f39c0" bit-offset="I:40" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <union loc="111:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe4208" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x7dbe4320" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x7dbe4388" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7dbe6dc8"/></type-tag>
      </field>
    </union>
    <union loc="241:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbdaa98" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x7dbdabb0" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x7dbdac18" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7dbda718"/></type-tag>
      </field>
    </union>
    <enum loc="68:UnicastCountToLeds.h" ref="0x7e7f6150" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="__pthread_rwlock_t" loc="227:/usr/include/cygwin/types.h" ref="0x7f340320" defined="" size="I:1" alignment="I:1">
      <field name="__dummy" ref="0x7f3404d0" bit-offset="I:0" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
    </struct>
    <union loc="288:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbd5558" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x7dbd5670" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x7dbd56d8" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7dbd50a8"/></type-tag>
      </field>
    </union>
    <attribute name="atmostonce" loc="81:/opt/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x7ec50d38" defined="" size="I:0" alignment="I:1">
    </attribute>
    <struct name="_types_fd_set" loc="233:/usr/include/sys/types.h" ref="0x7f3a10c8" defined="" size="I:8" alignment="I:4">
      <field name="fds_bits" ref="0x7f3a18b0" bit-offset="I:0" size="I:8">
        <type-array elements="I:2" size="I:8" alignment="I:4">
          <type-int cname="long" size="I:4" alignment="I:4">
            <typename><typedef-ref name="fd_mask" ref="0x7f3b1f28"/></typename>
          </type-int>
        </type-array>
      </field>
    </struct>
    <union loc="30:/usr/include/sys/_types.h" ref="0x7f3f0b08" defined="" size="I:4" alignment="I:4">
      <field name="__wch" ref="0x7f3f0c20" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="wint_t" ref="0x7f3f0010"/></typename>
        </type-int>
      </field>
      <field name="__wchb" ref="0x7f3f0c88" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
    </union>
    <union name="__ldmath" loc="23:/usr/include/math.h" ref="0x7ed92648" defined="" size="I:16" alignment="I:4">
      <field name="i" ref="0x7ed92988" bit-offset="I:0" size="I:16">
        <type-array elements="I:4" size="I:16" alignment="I:4">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="__ULong" ref="0x7f1c1498"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="ld" ref="0x7ed929f0" bit-offset="I:0" size="I:12">
        <type-float cname="long double" size="I:12" alignment="I:4"></type-float>
      </field>
    </union>
    <attribute name="hwevent"  loc="NONE" ref="0x7fef0620" size="V:" alignment="V:">
    </attribute>
    <struct name="_rand48" loc="290:/usr/include/sys/reent.h" ref="0x7f170340" defined="" size="I:14" alignment="I:2">
      <field name="_seed" ref="0x7f170800" bit-offset="I:0" size="I:6">
        <type-array elements="I:3" size="I:6" alignment="I:2">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
        </type-array>
      </field>
      <field name="_mult" ref="0x7f170868" bit-offset="I:48" size="I:6">
        <type-array elements="I:3" size="I:6" alignment="I:2">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
        </type-array>
      </field>
      <field name="_add" ref="0x7f1708d0" bit-offset="I:96" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
      </field>
    </struct>
    <union loc="124:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe3558" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x7dbe3670" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x7dbe36d8" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7dbe3040"/></type-tag>
      </field>
    </union>
    <struct name="hashtable" ref="0x7ec44ab8" size="V:" alignment="V:">
    </struct>
    <struct loc="31:/opt/tinyos-2.x/tos/lib/timer/Timer.h" ref="0x7e5392e0" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0x7e5393f8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="heap" loc="50:/opt/tinyos-2.x/tos/lib/tossim/heap.h" ref="0x7eba3df0" defined="" size="I:12" alignment="I:4">
      <field name="size" ref="0x7eba2168" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="data" ref="0x7eba21d0" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="private_size" ref="0x7eba2238" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <nx_struct loc="133:../../../tos/lib/netarch/dsr/DsrOptions.h" ref="0x7e3f2420" defined="" size="I:2" alignment="I:1">
      <field name="addr" ref="0x7e3f2538" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="129:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e759a38" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="60:/opt/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x7ec91660" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="25:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h" ref="0x7e7f2ee8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="54:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbf1600" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="_reent" loc="565:/usr/include/sys/reent.h" ref="0x7f192060" defined="" size="I:1060" alignment="I:4">
      <field name="_errno" ref="0x7f151650" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_stdin" ref="0x7f1516b8" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:104" alignment="I:4"><struct-ref name="__sFILE64" ref="0x7f192dc8"/>
            <typename><typedef-ref name="__FILE" ref="0x7f172c38"/></typename>
          </type-tag>
        </type-pointer>
      </field>
      <field name="_stdout" ref="0x7f151720" bit-offset="I:64" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:104" alignment="I:4"><struct-ref name="__sFILE64" ref="0x7f192dc8"/>
            <typename><typedef-ref name="__FILE" ref="0x7f172c38"/></typename>
          </type-tag>
        </type-pointer>
      </field>
      <field name="_stderr" ref="0x7f151788" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:104" alignment="I:4"><struct-ref name="__sFILE64" ref="0x7f192dc8"/>
            <typename><typedef-ref name="__FILE" ref="0x7f172c38"/></typename>
          </type-tag>
        </type-pointer>
      </field>
      <field name="_inc" ref="0x7f1517f0" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_emergency" ref="0x7f151858" bit-offset="I:160" size="I:25">
        <type-array elements="I:25" size="I:25" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_current_category" ref="0x7f1518c0" bit-offset="I:384" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_current_locale" ref="0x7f151928" bit-offset="I:416" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="__sdidinit" ref="0x7f151990" bit-offset="I:448" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__cleanup" ref="0x7f1519f8" bit-offset="I:480" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:1060" alignment="I:4"><struct-ref name="_reent" ref="0x7f192060"/></type-tag>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="_result" ref="0x7f151a90" bit-offset="I:512" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:24" alignment="I:4"><struct-ref name="_Bigint" ref="0x7f1c17f0"/></type-tag>
        </type-pointer>
      </field>
      <field name="_result_k" ref="0x7f151af8" bit-offset="I:544" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_p5s" ref="0x7f151b60" bit-offset="I:576" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:24" alignment="I:4"><struct-ref name="_Bigint" ref="0x7f1c17f0"/></type-tag>
        </type-pointer>
      </field>
      <field name="_freelist" ref="0x7f151c48" bit-offset="I:608" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:24" alignment="I:4"><struct-ref name="_Bigint" ref="0x7f1c17f0"/></type-tag>
          </type-pointer>
        </type-pointer>
      </field>
      <field name="_cvtlen" ref="0x7f151cb0" bit-offset="I:640" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_cvtbuf" ref="0x7f151d18" bit-offset="I:672" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_new" ref="0x7f151d80" bit-offset="I:704" size="I:240">
        <type-tag size="I:240" alignment="I:4"><union-ref ref="0x7f152be0"/></type-tag>
      </field>
      <field name="_atexit" ref="0x7f151de8" bit-offset="I:2624" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:400" alignment="I:4"><struct-ref name="_atexit" ref="0x7f1b1578"/></type-tag>
        </type-pointer>
      </field>
      <field name="_atexit0" ref="0x7f151e50" bit-offset="I:2656" size="I:400">
        <type-tag size="I:400" alignment="I:4"><struct-ref name="_atexit" ref="0x7f1b1578"/></type-tag>
      </field>
      <field name="_sig_func" ref="0x7f151eb8" bit-offset="I:5856" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-function size="I:1" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
              <function-parameters>
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
              </function-parameters>
            </type-function>
          </type-pointer>
        </type-pointer>
      </field>
      <field name="__sglue" ref="0x7f151f30" bit-offset="I:5888" size="I:12">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="_glue" ref="0x7f172db0"/></type-tag>
      </field>
      <field name="__sf" ref="0x7f151f98" bit-offset="I:5984" size="I:312">
        <type-array elements="I:3" size="I:312" alignment="I:4">
          <type-tag size="I:104" alignment="I:4"><struct-ref name="__sFILE64" ref="0x7f192dc8"/>
            <typename><typedef-ref name="__FILE" ref="0x7f172c38"/></typename>
          </type-tag>
        </type-array>
      </field>
    </struct>
    <struct loc="30:/opt/tinyos-2.x/tos/lib/timer/Timer.h" ref="0x7e7f3e88" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0x7e539010" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <nx_struct loc="187:../../../tos/lib/netarch/dsr/DsrOptions.h" ref="0x7e3f0088" defined="" size="I:1" alignment="I:1">
      <field name="routeReply" ref="0x7e3f01a0" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="salvage" ref="0x7e3f0208" bit-offset="I:1" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="segsLeft" ref="0x7e3f0270" bit-offset="I:4" bit-size="I:4">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="addr" ref="0x7e3f02d8" bit-offset="I:8" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
            <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <struct name="tm" loc="33:/usr/include/time.h" ref="0x7eaf4340" defined="" size="I:36" alignment="I:4">
      <field name="tm_sec" ref="0x7eaf4a58" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_min" ref="0x7eaf4ac0" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_hour" ref="0x7eaf4b28" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_mday" ref="0x7eaf4b90" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_mon" ref="0x7eaf4bf8" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_year" ref="0x7eaf4c60" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_wday" ref="0x7eaf4cc8" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_yday" ref="0x7eaf4d30" bit-offset="I:224" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_isdst" ref="0x7eaf4d98" bit-offset="I:256" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="144:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe2380" defined="" size="I:1" alignment="I:1">
      <field name="tov0" ref="0x7dbe2498" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocf0" ref="0x7dbe2500" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="tov1" ref="0x7dbe2568" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocf1b" ref="0x7dbe25d0" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocf1a" ref="0x7dbe2638" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="icf1" ref="0x7dbe26a0" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="tov2" ref="0x7dbe2708" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocf2" ref="0x7dbe2770" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="sim_log_output" loc="43:/opt/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x7ec33470" defined="" size="I:8" alignment="I:4">
      <field name="num" ref="0x7ec33748" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="files" ref="0x7ec337b0" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:104" alignment="I:4"><struct-ref name="__sFILE64" ref="0x7f192dc8"/>
              <typename><typedef-ref name="FILE" ref="0x7f1407c8"/></typename>
            </type-tag>
          </type-pointer>
        </type-pointer>
      </field>
    </struct>
    <struct name="__pthread_condattr_t" loc="217:/usr/include/cygwin/types.h" ref="0x7f3414e8" defined="" size="I:1" alignment="I:1">
      <field name="__dummy" ref="0x7f341698" bit-offset="I:0" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
    </struct>
    <struct loc="90:../../../tos/lib/netarch/multihop/PacketEngine.h" ref="0x7e4ca9d0" defined="" size="I:2" alignment="I:1">
      <field name="pid" ref="0x7e4caae8" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
        </type-int>
      </field>
      <field name="cid" ref="0x7e4cab50" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="packet_client_id_t" ref="0x7e4d3820"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="306:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbd3250" defined="" size="I:1" alignment="I:1">
      <field name="ocf1c" ref="0x7dbd3368" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocf3c" ref="0x7dbd33d0" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="tov3" ref="0x7dbd3438" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocf3b" ref="0x7dbd34a0" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocf3a" ref="0x7dbd3508" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="icf3" ref="0x7dbd3570" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0x7dbd35d8" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="_sigcommune" loc="78:/usr/include/cygwin/signal.h" ref="0x7eac23b8" defined="" size="I:20" alignment="I:4">
      <field name="_si_code" ref="0x7eac2d58" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__uint32_t" ref="0x7f421438"/></typename>
        </type-int>
      </field>
      <field name="_si_read_handle" ref="0x7eac2dc0" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="_si_write_handle" ref="0x7eac2e28" bit-offset="I:64" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="_si_process_handle" ref="0x7eac2e90" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="_si_fd" ref="0x7eac2ef8" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_si_pipe_fhandler" ref="0x7eac2f60" bit-offset="I:128" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="_si_str" ref="0x7eac0010" bit-offset="I:128" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </struct>
    <enum loc="123:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e7595e0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="radio_stats" loc="98:/opt/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7e870d98" defined="" size="I:18" alignment="I:2">
      <field name="version" ref="0x7e868718" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="flags" ref="0x7e868780" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="reserved" ref="0x7e8687e8" bit-offset="I:16" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="platform" ref="0x7e868850" bit-offset="I:24" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="MTU" ref="0x7e8688b8" bit-offset="I:32" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
        </type-int>
      </field>
      <field name="radio_crc_fail" ref="0x7e868920" bit-offset="I:48" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
        </type-int>
      </field>
      <field name="radio_queue_drops" ref="0x7e868988" bit-offset="I:64" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
        </type-int>
      </field>
      <field name="serial_crc_fail" ref="0x7e8689f0" bit-offset="I:80" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
        </type-int>
      </field>
      <field name="serial_tx_fail" ref="0x7e868a58" bit-offset="I:96" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
        </type-int>
      </field>
      <field name="serial_short_packets" ref="0x7e868ac0" bit-offset="I:112" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
        </type-int>
      </field>
      <field name="serial_proto_drops" ref="0x7e868b28" bit-offset="I:128" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
        </type-int>
      </field>
    </struct>
    <nx_struct name="unicast_count_msg" loc="64:UnicastCountToLeds.h" ref="0x7f460c78" defined="" size="I:2" alignment="I:1">
      <field name="counter" ref="0x7f460e70" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f461390"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct name="__sbuf" loc="101:/usr/include/sys/reent.h" ref="0x7f1b1e70" defined="" size="I:8" alignment="I:4">
      <field name="_base" ref="0x7f1b0158" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_size" ref="0x7f1b01c0" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <attribute name="atleastonce" loc="82:/opt/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x7ec45100" defined="" size="I:0" alignment="I:1">
    </attribute>
    <enum loc="91:/opt/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7e870560" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="141:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e758a80" defined="" size="I:1" alignment="I:1">
      <field name="adps" ref="0x7e758b98" bit-offset="I:0" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="adie" ref="0x7e758c00" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="adif" ref="0x7e758c68" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="adfr" ref="0x7e758cd0" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="adsc" ref="0x7e758d38" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="aden" ref="0x7e758da0" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="92:/usr/include/cygwin/signal.h" ref="0x7eab5240" defined="" size="I:148" alignment="I:4">
      <field name="si_signo" ref="0x7eab5358" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="si_code" ref="0x7eab53c0" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="si_pid" ref="0x7eab5428" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4">
          <typename><typedef-ref name="pid_t" ref="0x7f3b17c8"/></typename>
        </type-int>
      </field>
      <field name="si_uid" ref="0x7eab5490" bit-offset="I:96" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uid_t" ref="0x7f3712b8"/></typename>
        </type-int>
      </field>
      <field name="si_errno" ref="0x7eab54f8" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__pad" ref="0x7eab5560" bit-offset="I:160" size="I:128">
        <type-array elements="I:32" size="I:128" alignment="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="__uint32_t" ref="0x7f421438"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="_si_commune" ref="0x7eab55c8" bit-offset="I:160" size="I:20">
        <type-tag size="I:20" alignment="I:4"><struct-ref name="_sigcommune" ref="0x7eac23b8"/></type-tag>
      </field>
      <field name="si_tid" ref="0x7eab5630" bit-offset="I:160" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="timer_t" ref="0x7f3a0010"/></typename>
        </type-int>
      </field>
      <field name="si_overrun" ref="0x7eab5698" bit-offset="I:192" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="si_sigval" ref="0x7eab5700" bit-offset="I:160" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
      <field name="si_value" ref="0x7eab5768" bit-offset="I:160" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
      <field name="si_status" ref="0x7eab57d0" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="si_utime" ref="0x7eab5838" bit-offset="I:192" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="clock_t" ref="0x7f3c03d0"/></typename>
        </type-int>
      </field>
      <field name="si_stime" ref="0x7eab5920" bit-offset="I:224" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="clock_t" ref="0x7f3c03d0"/></typename>
        </type-int>
      </field>
      <field name="si_addr" ref="0x7eab5988" bit-offset="I:160" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
    </struct>
    <enum loc="30:/opt/tinyos-2.x/tos/types/Leds.h" ref="0x7e537be0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="118:../../../tos/lib/netarch/multihop/PacketEngine.h" ref="0x7e4c9200" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct loc="151:../../../tos/lib/netarch/dsr/DsrOptions.h" ref="0x7e3f2e18" defined="" size="I:1" alignment="I:1">
      <field name="ident" ref="0x7e3f2f30" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="111:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e760c80" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="110:../../../tos/lib/netarch/multihop/PacketEngine.h" ref="0x7e4caf20" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="83:/opt/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7e871d58" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="itimerval" loc="36:/usr/include/sys/time.h" ref="0x7ea72d90" defined="" size="I:16" alignment="I:4">
      <field name="it_interval" ref="0x7ea700b0" bit-offset="I:0" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timeval" ref="0x7eb02518"/></type-tag>
      </field>
      <field name="it_value" ref="0x7ea70118" bit-offset="I:64" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timeval" ref="0x7eb02518"/></type-tag>
      </field>
    </struct>
    <nx_struct loc="82:../../../tos/lib/netarch/dsr/DsrOptions.h" ref="0x7e3f5548" defined="" size="I:1" alignment="I:1">
      <field name="ident" ref="0x7e3f5660" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="addr" ref="0x7e3f56c8" bit-offset="I:8" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
            <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <struct loc="114:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe6dc8" defined="" size="I:1" alignment="I:1">
      <field name="tcr0ub" ref="0x7dbe6ee0" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocr0ub" ref="0x7dbe6f48" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="tcn0ub" ref="0x7dbe4010" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="as0" ref="0x7dbe4078" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0x7dbe40e0" bit-offset="I:4" bit-size="I:4">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="123:/usr/include/cygwin/signal.h" ref="0x7eab6880" defined="" size="I:12" alignment="I:4">
      <field name="si_status" ref="0x7eab6998" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="si_utime" ref="0x7eab6a00" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="clock_t" ref="0x7f3c03d0"/></typename>
        </type-int>
      </field>
      <field name="si_stime" ref="0x7eab6a68" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="clock_t" ref="0x7f3c03d0"/></typename>
        </type-int>
      </field>
    </struct>
    <union loc="158:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe08a8" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x7dbe09c0" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x7dbe0a28" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7dbe0460"/></type-tag>
      </field>
    </union>
    <enum loc="117:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e759188" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="sigevent" loc="68:/usr/include/cygwin/signal.h" ref="0x7eac37c0" defined="" size="I:20" alignment="I:4">
      <field name="sigev_value" ref="0x7eac3f68" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
      <field name="sigev_signo" ref="0x7eac2010" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="sigev_notify" ref="0x7eac2078" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="sigev_notify_function" ref="0x7eac20e0" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
                <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
              </type-tag>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="sigev_notify_attributes" ref="0x7eac2158" bit-offset="I:128" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_attr_t" ref="0x7f351c38"/></type-tag>
            <typename><typedef-ref name="pthread_attr_t" ref="0x7f351ee8"/></typename>
          </type-pointer>
        </type-pointer>
      </field>
    </struct>
    <struct name="__sFILE64" loc="214:/usr/include/sys/reent.h" ref="0x7f192dc8" defined="" size="I:104" alignment="I:4">
      <field name="_p" ref="0x7f180f40" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_r" ref="0x7f172010" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_w" ref="0x7f172078" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_flags" ref="0x7f1720e0" bit-offset="I:96" size="I:2">
        <type-int cname="short" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="_file" ref="0x7f172148" bit-offset="I:112" size="I:2">
        <type-int cname="short" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="_bf" ref="0x7f1721b0" bit-offset="I:128" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="__sbuf" ref="0x7f1b1e70"/></type-tag>
      </field>
      <field name="_lbfsize" ref="0x7f172218" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_data" ref="0x7f172280" bit-offset="I:224" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:1060" alignment="I:4"><struct-ref name="_reent" ref="0x7f192060"/></type-tag>
        </type-pointer>
      </field>
      <field name="_cookie" ref="0x7f1722e8" bit-offset="I:256" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="_read" ref="0x7f172350" bit-offset="I:288" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-int cname="int" size="I:4" alignment="I:4">
              <typename><typedef-ref name="_ssize_t" ref="0x7f401da8"/></typename>
            </type-int>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
              <type-pointer size="I:4" alignment="I:4">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
              </type-pointer>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="_write" ref="0x7f1723f8" bit-offset="I:320" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-int cname="int" size="I:4" alignment="I:4">
              <typename><typedef-ref name="_ssize_t" ref="0x7f401da8"/></typename>
            </type-int>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
              <type-pointer size="I:4" alignment="I:4">
                <type-qualified const="">
                  <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-qualified>
              </type-pointer>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="_seek" ref="0x7f1724a0" bit-offset="I:352" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-int cname="long" size="I:4" alignment="I:4">
              <typename><typedef-ref name="_fpos_t" ref="0x7f1b0308"/></typename>
            </type-int>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
              <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="_fpos_t" ref="0x7f1b0308"/></typename>
              </type-int>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="_close" ref="0x7f172548" bit-offset="I:384" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="_ub" ref="0x7f172660" bit-offset="I:416" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="__sbuf" ref="0x7f1b1e70"/></type-tag>
      </field>
      <field name="_up" ref="0x7f1726c8" bit-offset="I:480" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_ur" ref="0x7f172730" bit-offset="I:512" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_ubuf" ref="0x7f172798" bit-offset="I:544" size="I:3">
        <type-array elements="I:3" size="I:3" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_nbuf" ref="0x7f172800" bit-offset="I:568" size="I:1">
        <type-array elements="I:1" size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_lb" ref="0x7f172868" bit-offset="I:576" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="__sbuf" ref="0x7f1b1e70"/></type-tag>
      </field>
      <field name="_blksize" ref="0x7f1728d0" bit-offset="I:640" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_flags2" ref="0x7f172938" bit-offset="I:672" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_offset" ref="0x7f1729a0" bit-offset="I:704" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="_off64_t" ref="0x7f401bc0"/></typename>
        </type-int>
      </field>
      <field name="_seek64" ref="0x7f172a08" bit-offset="I:768" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="_fpos64_t" ref="0x7f1b04e0"/></typename>
            </type-int>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
              <type-int cname="long long" size="I:8" alignment="I:8">
                <typename><typedef-ref name="_fpos64_t" ref="0x7f1b04e0"/></typename>
              </type-int>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="_lock" ref="0x7f172ab0" bit-offset="I:800" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
          <typename><typedef-ref name="_flock_t" ref="0x7f3e11f0"/></typename>
        </type-pointer>
      </field>
    </struct>
    <enum loc="34:/opt/tinyos-2.x/tos/types/TinyError.h" ref="0x7e832758" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="291:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbd50a8" defined="" size="I:1" alignment="I:1">
      <field name="ocie1c" ref="0x7dbd51c0" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocie3c" ref="0x7dbd5228" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="toie3" ref="0x7dbd5290" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocie3b" ref="0x7dbd52f8" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocie3a" ref="0x7dbd5360" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ticie3" ref="0x7dbd53c8" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0x7dbd5430" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="_glue" loc="262:/usr/include/sys/reent.h" ref="0x7f172db0" defined="" size="I:12" alignment="I:4">
      <field name="_next" ref="0x7f170180" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:12" alignment="I:4"><struct-ref name="_glue" ref="0x7f172db0"/></type-tag>
        </type-pointer>
      </field>
      <field name="_niobs" ref="0x7f1701e8" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_iobs" ref="0x7f170250" bit-offset="I:64" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:104" alignment="I:4"><struct-ref name="__sFILE64" ref="0x7f192dc8"/>
            <typename><typedef-ref name="__FILE" ref="0x7f172c38"/></typename>
          </type-tag>
        </type-pointer>
      </field>
    </struct>
    <enum loc="76:/opt/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7e871898" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="50:../../../tos/lib/netarch/multihop/PacketEngine.h" ref="0x7e4d2e18" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="_Bigint" loc="40:/usr/include/sys/reent.h" ref="0x7f1c17f0" defined="" size="I:24" alignment="I:4">
      <field name="_next" ref="0x7f1c1d18" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:24" alignment="I:4"><struct-ref name="_Bigint" ref="0x7f1c17f0"/></type-tag>
        </type-pointer>
      </field>
      <field name="_k" ref="0x7f1c1d80" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_maxwds" ref="0x7f1c1de8" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_sign" ref="0x7f1c1e50" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_wds" ref="0x7f1c1eb8" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_x" ref="0x7f1c1f20" bit-offset="I:160" size="I:4">
        <type-array elements="I:1" size="I:4" alignment="I:4">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="__ULong" ref="0x7f1c1498"/></typename>
          </type-int>
        </type-array>
      </field>
    </struct>
    <struct loc="127:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe3040" defined="" size="I:1" alignment="I:1">
      <field name="toie0" ref="0x7dbe3158" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocie0" ref="0x7dbe31c0" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="toie1" ref="0x7dbe3228" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocie1b" ref="0x7dbe3290" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocie1a" ref="0x7dbe32f8" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ticie1" ref="0x7dbe3360" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="toie2" ref="0x7dbe33c8" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ocie2" ref="0x7dbe3430" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <attribute name="spontaneous"  loc="NONE" ref="0x7fef0910" size="V:" alignment="V:">
    </attribute>
    <struct name="__pthread_attr_t" loc="215:/usr/include/cygwin/types.h" ref="0x7f351c38" defined="" size="I:1" alignment="I:1">
      <field name="__dummy" ref="0x7f351de8" bit-offset="I:0" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
    </struct>
    <union loc="594:/usr/include/sys/reent.h" ref="0x7f152be0" defined="" size="I:240" alignment="I:4">
      <field name="_reent" ref="0x7f152cf8" bit-offset="I:0" size="I:200">
        <type-tag size="I:200" alignment="I:4"><struct-ref ref="0x7f160c48"/></type-tag>
      </field>
      <field name="_unused" ref="0x7f152d60" bit-offset="I:0" size="I:240">
        <type-tag size="I:240" alignment="I:4"><struct-ref ref="0x7f152940"/></type-tag>
      </field>
    </union>
    <union name="__dmath" loc="11:/usr/include/math.h" ref="0x7ed93d18" defined="" size="I:8" alignment="I:4">
      <field name="i" ref="0x7ed92050" bit-offset="I:0" size="I:8">
        <type-array elements="I:2" size="I:8" alignment="I:4">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="__ULong" ref="0x7f1c1498"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="d" ref="0x7ed920b8" bit-offset="I:0" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
    </union>
    <union loc="100:/usr/include/cygwin/signal.h" ref="0x7eab6c18" defined="" size="I:128" alignment="I:4">
      <field name="__pad" ref="0x7eab6d30" bit-offset="I:0" size="I:128">
        <type-array elements="I:32" size="I:128" alignment="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="__uint32_t" ref="0x7f421438"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="_si_commune" ref="0x7eab6d98" bit-offset="I:0" size="I:20">
        <type-tag size="I:20" alignment="I:4"><struct-ref name="_sigcommune" ref="0x7eac23b8"/></type-tag>
      </field>
      <field name="si_tid" ref="0x7eab6e00" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="timer_t" ref="0x7f3a0010"/></typename>
        </type-int>
      </field>
      <field name="si_overrun" ref="0x7eab6e68" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="si_sigval" ref="0x7eab6ed0" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
      <field name="si_value" ref="0x7eab6f38" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
      <field name="si_status" ref="0x7eab5010" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="si_utime" ref="0x7eab5078" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="clock_t" ref="0x7f3c03d0"/></typename>
        </type-int>
      </field>
      <field name="si_stime" ref="0x7eab50e0" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="clock_t" ref="0x7f3c03d0"/></typename>
        </type-int>
      </field>
      <field name="si_addr" ref="0x7eab5148" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
    </union>
    <nx_struct loc="39:../../../tos/lib/netarch/single/SinglePacket.h" ref="0x7e4d4a90" defined="" size="I:4" alignment="I:1">
      <field name="src" ref="0x7e4d4ba8" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
      <field name="dest" ref="0x7e4d4c10" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
      <field name="data" ref="0x7e4d4c78" bit-offset="I:32" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <enum loc="49:../../../tos/lib/data/graph/Graph.h" ref="0x7df50cf0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="184:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbdfd08" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x7dbdfe20" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x7dbdfe88" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7dbdf980"/></type-tag>
      </field>
    </union>
    <struct name="flock" loc="140:/usr/include/cygwin/types.h" ref="0x7f370358" defined="" size="I:24" alignment="I:4">
      <field name="l_type" ref="0x7f3707e8" bit-offset="I:0" size="I:2">
        <type-int cname="short" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="l_whence" ref="0x7f370850" bit-offset="I:16" size="I:2">
        <type-int cname="short" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="l_start" ref="0x7f3708b8" bit-offset="I:32" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="off_t" ref="0x7f390278"/></typename>
        </type-int>
      </field>
      <field name="l_len" ref="0x7f370920" bit-offset="I:96" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="off_t" ref="0x7f390278"/></typename>
        </type-int>
      </field>
      <field name="l_pid" ref="0x7f370988" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4">
          <typename><typedef-ref name="pid_t" ref="0x7f3b17c8"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="107:/usr/include/cygwin/signal.h" ref="0x7eab6010" defined="" size="I:8" alignment="I:4">
      <field name="si_tid" ref="0x7eab6128" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="timer_t" ref="0x7f3a0010"/></typename>
        </type-int>
      </field>
      <field name="si_overrun" ref="0x7eab6190" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="si_sigval" ref="0x7eab61f8" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
      <field name="si_value" ref="0x7eab6260" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
    </struct>
    <enum loc="35:../../../tos/lib/netarch/single/SinglePacket.h" ref="0x7e4d44c0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="222:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbdc9d0" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x7dbdcae8" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x7dbdcb50" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7dbdc5e0"/></type-tag>
      </field>
    </union>
    <struct name="_on_exit_args" loc="67:/usr/include/sys/reent.h" ref="0x7f1c0bd0" defined="" size="I:264" alignment="I:4">
      <field name="_fnargs" ref="0x7f1b1160" bit-offset="I:0" size="I:128">
        <type-array elements="I:32" size="I:128" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
        </type-array>
      </field>
      <field name="_dso_handle" ref="0x7f1b11c8" bit-offset="I:1024" size="I:128">
        <type-array elements="I:32" size="I:128" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
        </type-array>
      </field>
      <field name="_fntypes" ref="0x7f1b1230" bit-offset="I:2048" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__ULong" ref="0x7f1c1498"/></typename>
        </type-int>
      </field>
      <field name="_is_cxa" ref="0x7f1b1298" bit-offset="I:2080" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__ULong" ref="0x7f1c1498"/></typename>
        </type-int>
      </field>
    </struct>
    <union loc="109:/usr/include/cygwin/signal.h" ref="0x7eac0cb0" defined="" size="I:8" alignment="I:4">
      <field name="si_tid" ref="0x7eac0dc8" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="timer_t" ref="0x7f3a0010"/></typename>
        </type-int>
      </field>
      <field name="si_overrun" ref="0x7eac0e30" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="si_sigval" ref="0x7eac0e98" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
      <field name="si_value" ref="0x7eac0f00" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
    </union>
    <struct loc="620:/usr/include/sys/reent.h" ref="0x7f152940" defined="" size="I:240" alignment="I:4">
      <field name="_nextf" ref="0x7f152a58" bit-offset="I:0" size="I:120">
        <type-array elements="I:30" size="I:120" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </type-array>
      </field>
      <field name="_nmalloc" ref="0x7f152ac0" bit-offset="I:960" size="I:120">
        <type-array elements="I:30" size="I:120" alignment="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
        </type-array>
      </field>
    </struct>
    <enum loc="120:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h" ref="0x7e766210" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="73:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbf0c28" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="596:/usr/include/sys/reent.h" ref="0x7f160c48" defined="" size="I:200" alignment="I:4">
      <field name="_unused_rand" ref="0x7f160d60" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_strtok_last" ref="0x7f160dc8" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_asctime_buf" ref="0x7f160e30" bit-offset="I:64" size="I:26">
        <type-array elements="I:26" size="I:26" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_localtime_buf" ref="0x7f160e98" bit-offset="I:288" size="I:36">
        <type-tag size="I:36" alignment="I:4"><struct-ref name="__tm" ref="0x7f1c0040"/></type-tag>
      </field>
      <field name="_gamma_signgam" ref="0x7f160f00" bit-offset="I:576" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_rand_next" ref="0x7f160f68" bit-offset="I:608" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="_r48" ref="0x7f152010" bit-offset="I:672" size="I:14">
        <type-tag size="I:14" alignment="I:2"><struct-ref name="_rand48" ref="0x7f170340"/></type-tag>
      </field>
      <field name="_mblen_state" ref="0x7f152078" bit-offset="I:800" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f3f0db0"/>
          <typename><typedef-ref name="_mbstate_t" ref="0x7f3e1020"/></typename>
        </type-tag>
      </field>
      <field name="_mbtowc_state" ref="0x7f1520e0" bit-offset="I:864" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f3f0db0"/>
          <typename><typedef-ref name="_mbstate_t" ref="0x7f3e1020"/></typename>
        </type-tag>
      </field>
      <field name="_wctomb_state" ref="0x7f152148" bit-offset="I:928" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f3f0db0"/>
          <typename><typedef-ref name="_mbstate_t" ref="0x7f3e1020"/></typename>
        </type-tag>
      </field>
      <field name="_l64a_buf" ref="0x7f1521b0" bit-offset="I:992" size="I:8">
        <type-array elements="I:8" size="I:8" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_signal_buf" ref="0x7f152218" bit-offset="I:1056" size="I:24">
        <type-array elements="I:24" size="I:24" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_getdate_err" ref="0x7f152280" bit-offset="I:1248" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_mbrlen_state" ref="0x7f152368" bit-offset="I:1280" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f3f0db0"/>
          <typename><typedef-ref name="_mbstate_t" ref="0x7f3e1020"/></typename>
        </type-tag>
      </field>
      <field name="_mbrtowc_state" ref="0x7f1523d0" bit-offset="I:1344" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f3f0db0"/>
          <typename><typedef-ref name="_mbstate_t" ref="0x7f3e1020"/></typename>
        </type-tag>
      </field>
      <field name="_mbsrtowcs_state" ref="0x7f152438" bit-offset="I:1408" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f3f0db0"/>
          <typename><typedef-ref name="_mbstate_t" ref="0x7f3e1020"/></typename>
        </type-tag>
      </field>
      <field name="_wcrtomb_state" ref="0x7f1524a0" bit-offset="I:1472" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f3f0db0"/>
          <typename><typedef-ref name="_mbstate_t" ref="0x7f3e1020"/></typename>
        </type-tag>
      </field>
      <field name="_wcsrtombs_state" ref="0x7f152508" bit-offset="I:1536" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f3f0db0"/>
          <typename><typedef-ref name="_mbstate_t" ref="0x7f3e1020"/></typename>
        </type-tag>
      </field>
    </struct>
    <struct name="exception" loc="344:/usr/include/math.h" ref="0x7ecb23c0" defined="" size="I:36" alignment="I:4">
      <field name="type" ref="0x7ecb28f8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="name" ref="0x7ecb2960" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="arg1" ref="0x7ecb29c8" bit-offset="I:64" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="arg2" ref="0x7ecb2a30" bit-offset="I:128" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="retval" ref="0x7ecb2a98" bit-offset="I:192" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="err" ref="0x7ecb2b00" bit-offset="I:256" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="34:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7e7653e8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="sim_log_channel" loc="48:/opt/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x7ec33a10" defined="" size="I:16" alignment="I:4">
      <field name="name" ref="0x7ec33e80" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="numOutputs" ref="0x7ec33ee8" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="size" ref="0x7ec33f50" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="outputs" ref="0x7ec32010" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:104" alignment="I:4"><struct-ref name="__sFILE64" ref="0x7f192dc8"/>
              <typename><typedef-ref name="FILE" ref="0x7f1407c8"/></typename>
            </type-tag>
          </type-pointer>
        </type-pointer>
      </field>
    </struct>
    <enum loc="48:/opt/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h" ref="0x7e7575c8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="C"  loc="NONE" ref="0x7fef04b0" size="V:" alignment="V:">
    </attribute>
    <struct name="sim_noise_hash_t" loc="56:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h" ref="0x7ea62ac8" defined="" size="I:480" alignment="I:4">
      <field name="key" ref="0x7ea61168" bit-offset="I:0" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="numElements" ref="0x7ea611d0" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="size" ref="0x7ea61238" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="elements" ref="0x7ea612a0" bit-offset="I:224" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="flag" ref="0x7ea61308" bit-offset="I:256" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="dist" ref="0x7ea61370" bit-offset="I:288" size="I:444">
        <type-array elements="I:111" size="I:444" alignment="I:4">
          <type-float cname="float" size="I:4" alignment="I:4"></type-float>
        </type-array>
      </field>
    </struct>
    <enum loc="136:/usr/include/cygwin/signal.h" ref="0x7eab5bb8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union name="sigval" loc="62:/usr/include/cygwin/signal.h" ref="0x7eac3230" defined="" size="I:4" alignment="I:4">
      <field name="sival_int" ref="0x7eac34e8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="sival_ptr" ref="0x7eac3550" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
    </union>
    <nx_struct name="message_t" loc="14:/opt/tinyos-2.x/tos/types/message.h" ref="0x7e864528" defined="" size="I:49" alignment="I:1">
      <field name="header" ref="0x7e864cb8" bit-offset="I:0" size="I:7">
        <type-array elements="I:7" size="I:7" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="data" ref="0x7e864d20" bit-offset="I:56" size="I:36">
        <type-array elements="I:36" size="I:36" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="footer" ref="0x7e864d88" bit-offset="I:344" size="I:2">
        <type-array elements="I:2" size="I:2" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="metadata" ref="0x7e864df0" bit-offset="I:360" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <nx_struct name="tossim_header" loc="6:/opt/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h" ref="0x7e874a10" defined="" size="I:7" alignment="I:1">
      <field name="dest" ref="0x7e874ee0" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
      <field name="src" ref="0x7e874f48" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
        </type-int>
      </field>
      <field name="length" ref="0x7e873010" bit-offset="I:32" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
        </type-int>
      </field>
      <field name="group" ref="0x7e873078" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_group_t" ref="0x7e875720"/></typename>
        </type-int>
      </field>
      <field name="type" ref="0x7e8730e0" bit-offset="I:48" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_id_t" ref="0x7e875548"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct name="__pthread_key_t" loc="214:/usr/include/cygwin/types.h" ref="0x7f3517f0" defined="" size="I:1" alignment="I:1">
      <field name="__dummy" ref="0x7f3519a0" bit-offset="I:0" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
    </struct>
    <struct loc="187:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbdf980" defined="" size="I:1" alignment="I:1">
      <field name="wgm10" ref="0x7dbdfa98" bit-offset="I:0" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="comC" ref="0x7dbdfb00" bit-offset="I:2" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="comB" ref="0x7dbdfb68" bit-offset="I:4" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="comA" ref="0x7dbdfbd0" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="228:/usr/include/inttypes.h" ref="0x7fe304e0" defined="" size="I:16" alignment="I:4">
      <field name="quot" ref="0x7fe305f8" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="intmax_t" ref="0x7fe70bf8"/></typename>
        </type-int>
      </field>
      <field name="rem" ref="0x7fe30660" bit-offset="I:64" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="intmax_t" ref="0x7fe70bf8"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="225:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbdc5e0" defined="" size="I:1" alignment="I:1">
      <field name="cs" ref="0x7dbdc6f8" bit-offset="I:0" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="wgm32" ref="0x7dbdc760" bit-offset="I:3" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0x7dbdc7c8" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="ices1" ref="0x7dbdc830" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="icnc1" ref="0x7dbdc898" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="59:../../../tos/lib/netarch/multihop/PacketEngine.h" ref="0x7e4d0808" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="sim_noise_node_t" loc="65:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h" ref="0x7ea616a0" defined="" size="I:68" alignment="I:4">
      <field name="key" ref="0x7ea56010" bit-offset="I:0" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="freqKey" ref="0x7ea56078" bit-offset="I:160" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="lastNoiseVal" ref="0x7ea560e0" bit-offset="I:320" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="noiseGenTime" ref="0x7ea56148" bit-offset="I:352" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
        </type-int>
      </field>
      <field name="noiseTable" ref="0x7ea561b0" bit-offset="I:384" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x7ec44ab8"/></type-tag>
        </type-pointer>
      </field>
      <field name="noiseTrace" ref="0x7ea56218" bit-offset="I:416" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="noiseTraceLen" ref="0x7ea56280" bit-offset="I:448" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
        </type-int>
      </field>
      <field name="noiseTraceIndex" ref="0x7ea562e8" bit-offset="I:480" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
        </type-int>
      </field>
      <field name="generated" ref="0x7ea56350" bit-offset="I:512" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="27:/usr/include/sys/_types.h" ref="0x7f3f0db0" defined="" size="I:8" alignment="I:4">
      <field name="__count" ref="0x7f3f0ec8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__value" ref="0x7f3f0f30" bit-offset="I:32" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref ref="0x7f3f0b08"/></type-tag>
      </field>
    </struct>
    <enum loc="202:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbde520" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="41:/usr/include/stdlib.h" ref="0x7ee80110" defined="" size="I:16" alignment="I:4">
      <field name="quot" ref="0x7ee80228" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="rem" ref="0x7ee80290" bit-offset="I:64" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <union loc="104:/usr/include/cygwin/signal.h" ref="0x7eab6328" defined="" size="I:8" alignment="I:4">
      <field name="si_tid" ref="0x7eab6440" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="timer_t" ref="0x7f3a0010"/></typename>
        </type-int>
      </field>
      <field name="si_overrun" ref="0x7eab64a8" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="si_sigval" ref="0x7eab6510" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
      <field name="si_value" ref="0x7eab6578" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
          <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
        </type-tag>
      </field>
    </union>
    <struct name="_atexit" loc="85:/usr/include/sys/reent.h" ref="0x7f1b1578" defined="" size="I:400" alignment="I:4">
      <field name="_next" ref="0x7f1b1c40" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:400" alignment="I:4"><struct-ref name="_atexit" ref="0x7f1b1578"/></type-tag>
        </type-pointer>
      </field>
      <field name="_ind" ref="0x7f1b1ca8" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_fns" ref="0x7f1b1d10" bit-offset="I:64" size="I:128">
        <type-array elements="I:32" size="I:128" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-function size="I:1" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
              <function-parameters>
              </function-parameters>
            </type-function>
          </type-pointer>
        </type-array>
      </field>
      <field name="_on_exit_args" ref="0x7f1b1d80" bit-offset="I:1088" size="I:264">
        <type-tag size="I:264" alignment="I:4"><struct-ref name="_on_exit_args" ref="0x7f1c0bd0"/></type-tag>
      </field>
    </struct>
    <struct name="__sFILE" loc="166:/usr/include/sys/reent.h" ref="0x7f1b0838" defined="" size="I:92" alignment="I:4">
      <field name="_p" ref="0x7f1922d8" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_r" ref="0x7f192340" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_w" ref="0x7f1923a8" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_flags" ref="0x7f192410" bit-offset="I:96" size="I:2">
        <type-int cname="short" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="_file" ref="0x7f192478" bit-offset="I:112" size="I:2">
        <type-int cname="short" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="_bf" ref="0x7f1924e0" bit-offset="I:128" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="__sbuf" ref="0x7f1b1e70"/></type-tag>
      </field>
      <field name="_lbfsize" ref="0x7f192548" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_cookie" ref="0x7f1925b0" bit-offset="I:224" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="_read" ref="0x7f192618" bit-offset="I:256" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-int cname="int" size="I:4" alignment="I:4">
              <typename><typedef-ref name="_ssize_t" ref="0x7f401da8"/></typename>
            </type-int>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
              <type-pointer size="I:4" alignment="I:4">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
              </type-pointer>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="_write" ref="0x7f1926c0" bit-offset="I:288" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-int cname="int" size="I:4" alignment="I:4">
              <typename><typedef-ref name="_ssize_t" ref="0x7f401da8"/></typename>
            </type-int>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
              <type-pointer size="I:4" alignment="I:4">
                <type-qualified const="">
                  <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-qualified>
              </type-pointer>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="_seek" ref="0x7f192768" bit-offset="I:320" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-int cname="long" size="I:4" alignment="I:4">
              <typename><typedef-ref name="_fpos_t" ref="0x7f1b0308"/></typename>
            </type-int>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
              <type-int cname="long" size="I:4" alignment="I:4">
                <typename><typedef-ref name="_fpos_t" ref="0x7f1b0308"/></typename>
              </type-int>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="_close" ref="0x7f192810" bit-offset="I:352" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="_ub" ref="0x7f1928a8" bit-offset="I:384" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="__sbuf" ref="0x7f1b1e70"/></type-tag>
      </field>
      <field name="_up" ref="0x7f192990" bit-offset="I:448" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_ur" ref="0x7f1929f8" bit-offset="I:480" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_ubuf" ref="0x7f192a60" bit-offset="I:512" size="I:3">
        <type-array elements="I:3" size="I:3" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_nbuf" ref="0x7f192ac8" bit-offset="I:536" size="I:1">
        <type-array elements="I:1" size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_lb" ref="0x7f192b30" bit-offset="I:544" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="__sbuf" ref="0x7f1b1e70"/></type-tag>
      </field>
      <field name="_blksize" ref="0x7f192b98" bit-offset="I:608" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_offset" ref="0x7f192c00" bit-offset="I:640" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_data" ref="0x7f192c68" bit-offset="I:672" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:1060" alignment="I:4"><struct-ref name="_reent" ref="0x7f192060"/></type-tag>
        </type-pointer>
      </field>
      <field name="_lock" ref="0x7f192cd0" bit-offset="I:704" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
          <typename><typedef-ref name="_flock_t" ref="0x7f3e11f0"/></typename>
        </type-pointer>
      </field>
    </struct>
    <enum loc="37:../../../tos/lib/netarch/dsr/DsrControl.h" ref="0x7e4b5310" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="197:/usr/include/cygwin/signal.h" ref="0x7eaa61b0" defined="" size="I:4" alignment="I:4">
      <field name="sa_handler" ref="0x7eaa62c8" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </function-parameters>
          </type-function>
          <typename><typedef-ref name="_sig_func_ptr" ref="0x7eab0788"/></typename>
        </type-pointer>
      </field>
      <field name="sa_sigaction" ref="0x7eaa6330" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
              <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:148" alignment="I:4"><struct-ref ref="0x7eab5240"/>
                  <typename><typedef-ref name="siginfo_t" ref="0x7eab5a58"/></typename>
                </type-tag>
              </type-pointer>
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
    </union>
    <enum name="dsr_route_error_types" loc="127:../../../tos/lib/netarch/dsr/DsrOptions.h" ref="0x7e3f3c08" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="atomic_hwevent"  loc="NONE" ref="0x7fef0798" size="V:" alignment="V:">
    </attribute>
    <struct name="__pthread_t" loc="211:/usr/include/cygwin/types.h" ref="0x7f360f40" defined="" size="I:1" alignment="I:1">
      <field name="__dummy" ref="0x7f351118" bit-offset="I:0" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
    </struct>
    <struct loc="60:../../../tos/lib/netarch/dsr/DsrControl.h" ref="0x7e4b4968" defined="" size="I:4" alignment="I:2">
      <field name="node" ref="0x7e4b4a80" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
        </type-int>
      </field>
      <field name="hopsLeft" ref="0x7e4b4ae8" bit-offset="I:16" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="rreqsSinceRrep" ref="0x7e4b4b50" bit-offset="I:24" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="92:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x7dbe71d8" defined="" size="I:1" alignment="I:1">
      <field name="cs" ref="0x7dbe72f0" bit-offset="I:0" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="wgm1" ref="0x7dbe7358" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="com" ref="0x7dbe73c0" bit-offset="I:4" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="wgm0" ref="0x7dbe7428" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
      <field name="foc" ref="0x7dbe7490" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="45:/opt/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc" ref="0x7e823050" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="53:../../../tos/lib/netarch/single/SingleSenderC.nc" ref="0x7e4c5010" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="SingleSenderC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="195:../../../tos/lib/netarch/multihop/PacketEngineP.nc" ref="0x7e1582e0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="151:../../../tos/lib/netarch/dsr/DsrControlP.nc" ref="0x7df83628" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="DsrControlP"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="194:../../../tos/lib/netarch/multihop/PacketEngineP.nc" ref="0x7e158c78" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="58:../../../tos/lib/netarch/tlv/TlvP.nc" ref="0x7e35ad98" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TlvP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="108:../../../tos/lib/netarch/multihop/PacketEngineP.nc" ref="0x7e2d8e90" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="128:../../../tos/lib/netarch/multihop/PacketEngineP.nc" ref="0x7e2d44e8" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="142:../../../tos/lib/netarch/multihop/PacketEngineP.nc" ref="0x7e2d3408" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="150:../../../tos/lib/netarch/multihop/PacketEngineP.nc" ref="0x7e2d37c0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="121:../../../tos/lib/netarch/multihop/PacketEngineP.nc" ref="0x7e2d40d0" defined="" scoped="" size="I:8" alignment="I:4">
      <component-ref qname="PacketEngineP"/>
      <field name="state" ref="0x7e2d41e8" bit-offset="I:0" bit-size="I:5">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="srcLayer" ref="0x7e2d4250" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="msg" ref="0x7e2d42b8" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
            <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
          </type-tag>
        </type-pointer>
      </field>
    </struct>
    <enum loc="140:../../../tos/lib/netarch/dsr/DsrControlP.nc" ref="0x7e0e2e78" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="DsrControlP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="135:../../../tos/lib/netarch/dsr/DsrControlP.nc" ref="0x7e0e2bd0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="DsrControlP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="42:/opt/tinyos-2.x/tos/system/BitVectorC.nc" ref="0x7dec2ad8" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="BitVectorC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="84:../../../tos/lib/data/graph/SourceShortestPathP.nc" ref="0x7ddd2ef8" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="SourceShortestPathP"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="93:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc" ref="0x7dd43d40" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="137:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc" ref="0x7dd433a8" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="88:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc" ref="0x7dd42830" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="receive_message" loc="56:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc" ref="0x7dce2650" defined="" scoped="" size="I:48" alignment="I:4">
      <component-ref qname="CpmModelC"/>
      <field name="source" ref="0x7dce1170" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="start" ref="0x7dce11d8" bit-offset="I:32" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0x7ec90658"/></typename>
        </type-int>
      </field>
      <field name="end" ref="0x7dce1240" bit-offset="I:96" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0x7ec90658"/></typename>
        </type-int>
      </field>
      <field name="power" ref="0x7dce12a8" bit-offset="I:160" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="reversePower" ref="0x7dce1310" bit-offset="I:224" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="strength" ref="0x7dce1378" bit-offset="I:288" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1">
          <typename><typedef-ref name="int8_t" ref="0x7feb0930"/></typename>
        </type-int>
      </field>
      <field name="lost" ref="0x7dce13e0" bit-offset="I:296" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
        </type-int>
      </field>
      <field name="ack" ref="0x7dce1448" bit-offset="I:304" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
        </type-int>
      </field>
      <field name="msg" ref="0x7dce14b0" bit-offset="I:320" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
            <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
          </type-tag>
        </type-pointer>
      </field>
      <field name="next" ref="0x7dce1518" bit-offset="I:352" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:48" alignment="I:4"><struct-ref name="receive_message" scoped="" ref="0x7dce2650"/>
            <typename><typedef-ref name="receive_message_t" scoped="" ref="0x7dce2828"/></typename>
          </type-tag>
        </type-pointer>
      </field>
    </struct>
    <enum loc="60:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc" ref="0x7da915b8" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="63:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc" ref="0x7dab25c8" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="44:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" ref="0x7db93368" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="48:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc" ref="0x7da84738" defined="" scoped="" size="I:12" alignment="I:4">
      <component-ref qname="VirtualizeTimerC"/>
      <field name="t0" ref="0x7da84850" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
        </type-int>
      </field>
      <field name="dt" ref="0x7da848b8" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
        </type-int>
      </field>
      <field name="isoneshot" ref="0x7da84920" bit-offset="I:64" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
        </type-int>
      </field>
      <field name="isrunning" ref="0x7da84988" bit-offset="I:65" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
        </type-int>
      </field>
      <field name="_reserved" ref="0x7da849f0" bit-offset="I:66" bit-size="I:6">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="42:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc" ref="0x7da85ce0" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="76:/opt/tinyos-2.x/tos/system/StateImplP.nc" ref="0x7d9d91f0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="StateImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="118:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc" ref="0x7d99de80" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="39:/opt/tinyos-2.x/tos/system/AMQueueP.nc" ref="0x7d9a07f8" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="AMQueueP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="161:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc" ref="0x7d99d4e8" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <struct loc="47:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc" ref="0x7d999a30" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="AMQueueImplP"/>
      <field name="msg" ref="0x7d999b48" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
            <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
          </type-tag>
        </type-pointer>
      </field>
    </struct>
    <enum loc="52:../../../tos/lib/netarch/single/SingleProcessorSenderC.nc" ref="0x7d906470" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="SingleProcessorSenderC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
  </tags>
  <variables>
    <variable name="__fdlib_version" ref="0x7ecb1a70" loc="410:/usr/include/math.h">
      <type-tag size="I:4" alignment="I:4"><enum-ref name="__fdlibm_version" ref="0x7ecb1198"/></type-tag>
    </variable>
    <variable name="environ" ref="0x7f321bb0" loc="15:/usr/include/sys/unistd.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </type-pointer>
    </variable>
    <variable name="randCM" ref="0x7e974db8" loc="39:/opt/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="dummy" ref="0x7e8d3e70" loc="275:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="current_node" ref="0x7ea533d8" loc="44:/opt/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="test" ref="0x7e973320" loc="41:/opt/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="_ctype_" ref="0x7ec93d58" loc="44:/usr/include/ctype.h">
      <type-qualified const="">
        <type-array elements="V:" size="V:" alignment="V:">
          <type-qualified const="">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-qualified>
        </type-array>
      </type-qualified>
    </variable>
    <variable name="optarg" ref="0x7f200260" loc="49:/usr/include/getopt.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </type-pointer>
    </variable>
    <variable name="channelTable" ref="0x7ec32b10" loc="60:/opt/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x7ec44ab8"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="noiseData" ref="0x7e942e98" loc="50:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-array elements="I:1000" size="I:68000" alignment="I:4">
        <type-tag size="I:68" alignment="I:4"><struct-ref name="sim_noise_node_t" ref="0x7ea616a0"/>
          <typename><typedef-ref name="sim_noise_node_t" ref="0x7ea56420"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="outputs" ref="0x7ec32908" loc="59:/opt/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-array elements="I:416" size="I:3328" alignment="I:4">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="sim_log_output" ref="0x7ec33470"/>
          <typename><typedef-ref name="sim_log_output_t" ref="0x7ec33880"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="randU" ref="0x7e9749c8" loc="39:/opt/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-array elements="I:97" size="I:776" alignment="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </type-array>
    </variable>
    <variable name="optind" ref="0x7f202b18" loc="46:/usr/include/getopt.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="eventHeap" ref="0x7eb33010" loc="36:/opt/tinyos-2.x/tos/lib/tossim/sim_event_queue.c">
      <documentation loc="25:/opt/tinyos-2.x/tos/lib/tossim/sim_event_queue.h">
        <short>&#10; The event queue is the core of the mote side of TOSSIM.</short>
        <long>&#10; The event queue is the core of the mote side of TOSSIM. It is a&#10; wrapper around the underlying heap. Unlike the 1.x version, it is&#10; not re-entrant: merging the Python console and TOSSIM means that&#10; functionality like packet injection/reception from external tools&#10; is on the Python side.&#10;&#10; @author Phil Levis&#10; @date   November 22 2005&#10;</long>
      </documentation>
      <type-tag size="I:12" alignment="I:4"><struct-ref name="heap" ref="0x7eba3df0"/>
        <typename><typedef-ref name="heap_t" ref="0x7eba2328"/></typename>
      </type-tag>
    </variable>
    <variable name="_global_impure_ptr" ref="0x7f1417a0" loc="800:/usr/include/sys/reent.h">
      <type-qualified const="">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:1060" alignment="I:4"><struct-ref name="_reent" ref="0x7f192060"/></type-tag>
        </type-pointer>
      </type-qualified>
    </variable>
    <variable name="csmaRxTxDelay" ref="0x7e9f54d8" loc="46:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="numCase1" ref="0x7e942450" loc="43:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <documentation loc="24:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10;</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="randC" ref="0x7e974b18" loc="39:/opt/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="_impure_ptr" ref="0x7f141538" loc="799:/usr/include/sys/reent.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:1060" alignment="I:4"><struct-ref name="_reent" ref="0x7f192060"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="FreqKeyNum" ref="0x7e942b80" loc="48:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
      </type-int>
    </variable>
    <variable name="optreset" ref="0x7f200010" loc="48:/usr/include/getopt.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaLow" ref="0x7e9f63e0" loc="39:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaPreambleLength" ref="0x7e9f6b18" loc="42:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="numTotal" ref="0x7e942910" loc="45:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaExponentBase" ref="0x7e9f6d80" loc="43:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="randCD" ref="0x7e974c68" loc="39:/opt/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="j97" ref="0x7e973160" loc="40:/opt/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="TOS_NODE_ID" ref="0x7ec91b20" loc="62:/opt/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
      </type-int>
    </variable>
    <variable name="STARTING_SIZE" ref="0x7eb94920" loc="47:/opt/tinyos-2.x/tos/lib/tossim/heap.c">
      <type-qualified const="">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-qualified>
    </variable>
    <variable name="_daylight" ref="0x7ead6de0" loc="119:/usr/include/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="opterr" ref="0x7f2028e8" loc="45:/usr/include/getopt.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="=va_arg" ref="0x7ff204b8"  loc="NONE">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaHigh" ref="0x7e9f6188" loc="38:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaMaxIterations" ref="0x7e9f5010" loc="44:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="atm128RegFile" ref="0x7e777680" loc="45:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <documentation loc="24:/opt/tinyos-2.x/tos/lib/tossim/sim_tossim.h">
        <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10;</short>
        <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-array elements="I:1000" size="I:160000" alignment="I:1">
        <type-array elements="I:160" size="I:160" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
          </type-int>
        </type-array>
      </type-array>
    </variable>
    <variable name="localNoise" ref="0x7e9b7c38" loc="10:/opt/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-array elements="I:1001" size="I:16016" alignment="I:4">
        <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_gain_noise" ref="0x7e9b71a8"/>
          <typename><typedef-ref name="sim_gain_noise_t" ref="0x7e9b7570"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="csmaInitLow" ref="0x7ea01f08" loc="37:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="numCase2" ref="0x7e9426b0" loc="44:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="suboptarg" ref="0x7f1f23c0" loc="171:/usr/include/sys/unistd.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </type-pointer>
    </variable>
    <variable name="sim_ticks" ref="0x7ea531f0" loc="43:/opt/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0x7ec90658"/></typename>
      </type-int>
    </variable>
    <variable name="_tzname" ref="0x7ead50e0" loc="120:/usr/include/time.h">
      <type-array elements="I:2" size="I:8" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="connectivity" ref="0x7e9b78e0" loc="9:/opt/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-array elements="I:1001" size="I:4004" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0x7e9c67c0"/>
            <typename><typedef-ref name="gain_entry_t" ref="0x7e9c6dc8"/></typename>
          </type-tag>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="simTimeBuf" ref="0x7ea15220" loc="175:/opt/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-array elements="I:128" size="I:128" alignment="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </type-array>
    </variable>
    <variable name="sim_seed" ref="0x7ea535a0" loc="45:/opt/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="sensitivity" ref="0x7e9b7de0" loc="11:/opt/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="_timezone" ref="0x7ead6ba8" loc="118:/usr/include/time.h">
      <type-int cname="long" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaInitHigh" ref="0x7ea01ca8" loc="36:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="optopt" ref="0x7f202d48" loc="47:/usr/include/getopt.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaAckTime" ref="0x7e9f5738" loc="47:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaSymbolsPerSec" ref="0x7e9f6648" loc="40:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaMinFreeSamples" ref="0x7e9f5278" loc="45:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="__mb_cur_max" ref="0x7ee80598" loc="57:/usr/include/stdlib.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaBitsPerSymbol" ref="0x7e9f68b0" loc="41:/opt/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="i97" ref="0x7e973010" loc="40:/opt/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="sim_scheduler_event_pending" ref="0x7e823e30" loc="58:/opt/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="m_tail" ref="0x7e823a48" loc="52:/opt/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="m_head" ref="0x7e8238a0" loc="51:/opt/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="m_next" ref="0x7e823c70" loc="53:/opt/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-array elements="I:11" size="I:11" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="sim_scheduler_event" ref="0x7e822090" loc="59:/opt/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x7ec80ce0"/>
        <typename><typedef-ref name="sim_event_t" ref="0x7ec80eb0"/></typename>
      </type-tag>
    </variable>
    <variable name="bootEvent" ref="0x7e5e41e8" loc="45:/opt/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x7ec80ce0"/>
          <typename><typedef-ref name="sim_event_t" ref="0x7ec80eb0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="startTime" ref="0x7e5dbdd0" loc="43:/opt/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="euid" ref="0x7e5dbbe8" loc="42:/opt/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="isOn" ref="0x7e5e4010" loc="44:/opt/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="buffer" ref="0x7e5897b0" loc="54:/opt/tinyos-2.x/tos/lib/tossim/TossimActiveMessageC.nc">
      <component-ref qname="TossimActiveMessageC"/>
      <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
        <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
      </type-tag>
    </variable>
    <variable name="bufferPointer" ref="0x7e589988" loc="55:/opt/tinyos-2.x/tos/lib/tossim/TossimActiveMessageC.nc">
      <component-ref qname="TossimActiveMessageC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
          <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="locked" ref="0x7e51c8f0" loc="96:UnicastCountToLedsC.nc">
      <component-ref qname="UnicastCountToLedsC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="counter" ref="0x7e51caa0" loc="97:UnicastCountToLedsC.nc">
      <component-ref qname="UnicastCountToLedsC"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
      </type-int>
    </variable>
    <variable name="packet" ref="0x7e51c748" loc="94:UnicastCountToLedsC.nc">
      <component-ref qname="UnicastCountToLedsC"/>
      <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
        <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
      </type-tag>
    </variable>
    <variable name="nextAddedPkt" ref="0x7e2d2248" loc="163:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
      </type-int>
    </variable>
    <variable name="msgBuffer" ref="0x7e2d3de0" loc="157:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-array elements="I:20" size="I:160" alignment="I:4">
        <type-tag size="I:8" alignment="I:4"><struct-ref scoped="" ref="0x7e2d40d0"/>
          <typename><typedef-ref name="msg_entry_t" scoped="" ref="0x7e2d43a8"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="nextWaitPkt" ref="0x7e2d2400" loc="166:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
      </type-int>
    </variable>
    <variable name="nextActionPkt" ref="0x7e2d25b8" loc="169:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
      </type-int>
    </variable>
    <variable name="radioOn" ref="0x7e2d2908" loc="175:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="running" ref="0x7e2d2760" loc="172:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="nextFreePkt" ref="0x7e2d2010" loc="160:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
      </type-int>
    </variable>
    <variable name="seed" ref="0x7e137880" loc="41:/opt/tinyos-2.x/tos/system/RandomMlcgP.nc">
      <component-ref qname="RandomMlcgP"/>
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
      </type-int>
    </variable>
    <variable name="retriesLeft" ref="0x7e0dd5c0" loc="147:../../../tos/lib/netarch/dsr/DsrControlP.nc">
      <component-ref qname="DsrControlP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="nextIdent" ref="0x7e0dd368" loc="145:../../../tos/lib/netarch/dsr/DsrControlP.nc">
      <documentation loc="132:../../../tos/lib/netarch/dsr/DsrControlP.nc">
        <short>******** Variables *********</short>
      </documentation>
      <component-ref qname="DsrControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="m_bits" ref="0x7dec1490" loc="48:/opt/tinyos-2.x/tos/system/BitVectorC.nc">
      <component-ref qname="BitVectorC"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="int_type" scoped="" ref="0x7dec2988"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="free" ref="0x7dea43f0" loc="54:../../../tos/lib/data/alloc/IndexedAllocBitsP.nc">
      <documentation loc="52:../../../tos/lib/data/alloc/IndexedAllocBitsP.nc">
        <short>******** Variables *********</short>
      </documentation>
      <component-ref qname="IndexedAllocBitsP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
      </type-int>
    </variable>
    <variable name="size" ref="0x7dea45a8" loc="55:../../../tos/lib/data/alloc/IndexedAllocBitsP.nc">
      <component-ref qname="IndexedAllocBitsP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
      </type-int>
    </variable>
    <variable name="e" ref="0x7de90d58" loc="59:../../../tos/lib/data/graph/GraphSparseP.nc">
      <component-ref qname="GraphSparseP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7df50410"/>
          <typename><typedef-ref name="graph_edge_node_t" ref="0x7df50660"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="v" ref="0x7de90af8" loc="58:../../../tos/lib/data/graph/GraphSparseP.nc">
      <component-ref qname="GraphSparseP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="vSize" ref="0x7de908a0" loc="57:../../../tos/lib/data/graph/GraphSparseP.nc">
      <documentation loc="54:../../../tos/lib/data/graph/GraphSparseP.nc">
        <short>******** Variables *********</short>
      </documentation>
      <component-ref qname="GraphSparseP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
      </type-int>
    </variable>
    <variable name="ai" ref="0x7de1ddd8" loc="59:../../../tos/lib/data/queue/PriorityQueueP.nc">
      <component-ref qname="PriorityQueueP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="hp" ref="0x7de1c058" loc="61:../../../tos/lib/data/queue/PriorityQueueP.nc">
      <component-ref qname="PriorityQueueP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="size" ref="0x7de1db80" loc="56:../../../tos/lib/data/queue/PriorityQueueP.nc">
      <documentation loc="54:../../../tos/lib/data/queue/PriorityQueueP.nc">
        <short>******** Variables *********</short>
      </documentation>
      <component-ref qname="PriorityQueueP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
      </type-int>
    </variable>
    <variable name="spt" ref="0x7ddc03c0" loc="61:../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <documentation loc="59:../../../tos/lib/data/graph/SourceShortestPathP.nc">
        <short>******** Variables *********</short>
      </documentation>
      <component-ref qname="SourceShortestPathP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="foundDest" ref="0x7ddbf010" loc="75:../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <component-ref qname="SourceShortestPathP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
      </type-int>
    </variable>
    <variable name="rebuildNeeded" ref="0x7ddc0be8" loc="70:../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <component-ref qname="SourceShortestPathP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="buildingTree" ref="0x7ddbf1c0" loc="77:../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <component-ref qname="SourceShortestPathP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="lastSrc" ref="0x7ddc0a38" loc="67:../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <component-ref qname="SourceShortestPathP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
      </type-int>
    </variable>
    <variable name="fringe" ref="0x7ddc0620" loc="63:../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <component-ref qname="SourceShortestPathP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="lastDest" ref="0x7ddc0da8" loc="73:../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <component-ref qname="SourceShortestPathP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
      </type-int>
    </variable>
    <variable name="weight" ref="0x7ddc0880" loc="65:../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <component-ref qname="SourceShortestPathP"/>
      <type-array elements="U:" size="U:" alignment="U:">
        <type-var size="U:" alignment="U:"><typedef-ref name="graph_edge_weight_t" scoped="" ref="0x7ddd02d8"/></type-var>
      </type-array>
    </variable>
    <variable name="sendEvent" ref="0x7dd3dc58" loc="70:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x7ec80ce0"/>
        <typename><typedef-ref name="sim_event_t" ref="0x7ec80eb0"/></typename>
      </type-tag>
    </variable>
    <variable name="initialized" ref="0x7dd38a88" loc="62:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="error" ref="0x7dcf5248" loc="285:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="backoffCount" ref="0x7dd38f00" loc="64:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="neededFreeSamples" ref="0x7dd3d0e8" loc="65:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="sending" ref="0x7dd3d2b8" loc="66:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
          <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="running" ref="0x7dd38cc0" loc="63:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="receiveBuffer" ref="0x7dd3de10" loc="72:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
        <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
      </type-tag>
    </variable>
    <variable name="sendingLength" ref="0x7dd3d840" loc="68:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="transmitting" ref="0x7dd3d600" loc="67:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="destNode" ref="0x7dd3daa0" loc="69:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="collision" ref="0x7dcbfee8" loc="192:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="requestAck" ref="0x7dce2278" loc="51:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="receiveEvent" ref="0x7dcbfa68" loc="189:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x7ec80ce0"/>
        <typename><typedef-ref name="sim_event_t" ref="0x7ec80eb0"/></typename>
      </type-tag>
    </variable>
    <variable name="incomingSource" ref="0x7dcbe4d0" loc="194:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="outstandingReceptionHead" ref="0x7dce1690" loc="69:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:48" alignment="I:4"><struct-ref name="receive_message" scoped="" ref="0x7dce2650"/>
          <typename><typedef-ref name="receive_message_t" scoped="" ref="0x7dce2828"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="incoming" ref="0x7dcbe190" loc="193:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
          <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="clearThreshold" ref="0x7dcbfc10" loc="191:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="outgoing" ref="0x7dce20c8" loc="50:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
          <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="receiving" ref="0x7dce2428" loc="52:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="addr" ref="0x7dc60890" loc="51:/opt/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
      </type-int>
    </variable>
    <variable name="set" ref="0x7dc60650" loc="50:/opt/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="count" ref="0x7dc42740" loc="81:../../../tos/lib/data/cache/LruDataCacheP.nc">
      <component-ref qname="LruDataCacheP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="cache" ref="0x7dc423f0" loc="79:../../../tos/lib/data/cache/LruDataCacheP.nc">
      <documentation loc="77:../../../tos/lib/data/cache/LruDataCacheP.nc">
        <short>******** Variables *********</short>
      </documentation>
      <component-ref qname="LruDataCacheP"/>
      <type-array elements="U:" size="U:" alignment="U:">
        <type-var size="U:" alignment="U:"><typedef-ref name="data_cache_item_t" scoped="" ref="0x7dc48b40"/></type-var>
      </type-array>
    </variable>
    <variable name="first" ref="0x7dc42598" loc="80:../../../tos/lib/data/cache/LruDataCacheP.nc">
      <component-ref qname="LruDataCacheP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="base" ref="0x7db93228" loc="40:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
      </type-int>
    </variable>
    <variable name="t0" ref="0x7db89ec8" loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
      </type-int>
    </variable>
    <variable name="set" ref="0x7db89d18" loc="38:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="dt" ref="0x7db93058" loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
      </type-int>
    </variable>
    <variable name="oldScale" ref="0x7db419c0" loc="72:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <documentation loc="68:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
        <short> This variable is needed to keep track of when the underlying&#10;  timer starts, in order to reset lastZero.</short>
        <long> This variable is needed to keep track of when the underlying&#10;  timer starts, in order to reset lastZero. When oldScale is&#10;  AVR_CLOCK_OFF and the scale is set to something else, the&#10;  clock starts ticking. </long>
      </documentation>
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="lastZero" ref="0x7db41618" loc="66:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0x7ec90658"/></typename>
      </type-int>
    </variable>
    <variable name="overflow" ref="0x7dad68b8" loc="472:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x7ec80ce0"/>
          <typename><typedef-ref name="sim_event_t" ref="0x7ec80eb0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="compare" ref="0x7db30398" loc="177:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x7ec80ce0"/>
          <typename><typedef-ref name="sim_event_t" ref="0x7ec80eb0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="savedCounter" ref="0x7db44550" loc="50:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="inOverflow" ref="0x7db442e8" loc="49:/opt/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="m_dt" ref="0x7daa56a0" loc="44:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
      </type-int>
    </variable>
    <variable name="m_oneshot" ref="0x7daa5850" loc="45:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="m_timers_changed" ref="0x7da84ea8" loc="58:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </variable>
    <variable name="m_timers" ref="0x7da84cf0" loc="57:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref scoped="" ref="0x7da84738"/>
          <typename><typedef-ref name="Timer_t" scoped="" ref="0x7da84ac0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="delay" ref="0x7da48660" loc="59:../../../tos/lib/data/timer/DataTimerP.nc">
      <component-ref qname="DataTimerP"/>
      <type-array elements="U:" size="U:" alignment="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="data_timer_time_t" ref="0x7e0f6ea8"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="startTime" ref="0x7da489c0" loc="61:../../../tos/lib/data/timer/DataTimerP.nc">
      <component-ref qname="DataTimerP"/>
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
      </type-int>
    </variable>
    <variable name="data" ref="0x7da48408" loc="58:../../../tos/lib/data/timer/DataTimerP.nc">
      <documentation loc="56:../../../tos/lib/data/timer/DataTimerP.nc">
        <short>******** Variables *********</short>
      </documentation>
      <component-ref qname="DataTimerP"/>
      <type-array elements="U:" size="U:" alignment="U:">
        <type-var size="U:" alignment="U:"><typedef-ref name="data_timer_data_t" scoped="" ref="0x7da51c48"/></type-var>
      </type-array>
    </variable>
    <variable name="size" ref="0x7da48808" loc="60:../../../tos/lib/data/timer/DataTimerP.nc">
      <component-ref qname="DataTimerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="index" ref="0x7d9fcf10" loc="61:/opt/tinyos-2.x/tos/system/PoolP.nc">
      <component-ref qname="PoolP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="queue" ref="0x7d9fa198" loc="62:/opt/tinyos-2.x/tos/system/PoolP.nc">
      <component-ref qname="PoolP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x7d9fd410"/></type-var>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="free" ref="0x7d9fcd68" loc="60:/opt/tinyos-2.x/tos/system/PoolP.nc">
      <component-ref qname="PoolP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="pool" ref="0x7d9fa3e0" loc="63:/opt/tinyos-2.x/tos/system/PoolP.nc">
      <component-ref qname="PoolP"/>
      <type-array elements="U:" size="U:" alignment="U:">
        <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x7d9fd410"/></type-var>
      </type-array>
    </variable>
    <variable name="state" ref="0x7d9d90b0" loc="74:/opt/tinyos-2.x/tos/system/StateImplP.nc">
      <documentation loc="73:/opt/tinyos-2.x/tos/system/StateImplP.nc">
        <short> Each component's state - uniqueCount(&#34;State&#34;) of them </short>
      </documentation>
      <component-ref qname="StateImplP"/>
      <type-array elements="I:1" size="I:1" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="current" ref="0x7d999dc0" loc="51:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </variable>
    <variable name="queue" ref="0x7d997100" loc="52:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref scoped="" ref="0x7d999a30"/>
          <typename><typedef-ref name="queue_entry_t" scoped="" ref="0x7d999c18"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="cancelMask" ref="0x7d997548" loc="53:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
        </type-int>
      </type-array>
    </variable>
  </variables>
  <constants>
    <constant cst="I:14" name="ILL_BADSTK" ref="0x7eab3ea8" loc="155:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ACIE" ref="0x7e796540" loc="1075:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCDR7" ref="0x7e7b78d0" loc="943:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PB6" ref="0x7e791010" loc="1132:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB81" ref="0x7e797010" loc="1058:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:26" name="ATM128_ADC_DIFF_ADC22_1x" ref="0x7e7626f0" loc="76:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:40" name="ATM128_OCR1BL" ref="0x7e7e75a8" loc="140:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="ATM128_DDRD" ref="0x7e7e9258" loc="81:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOIE0" ref="0x7e7c93f0" loc="786:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PING0" ref="0x7e778bc0" loc="1299:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_FREE_RUNNING_OFF" ref="0x7e759760" loc="124:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="LEDS_LED4" ref="0x7e533908" loc="35:/opt/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_WAVE16_PWM_CAPTURE_HIGH" ref="0x7dbdd458" loc="213:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="ATM128_ADC_DIFF_ADC51_1x" ref="0x7e762010" loc="71:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="SRL0" ref="0x7e7d6bc0" loc="705:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS30" ref="0x7e7b86e0" loc="924:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINA2" ref="0x7e7928d0" loc="1126:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINB4" ref="0x7e790d60" loc="1154:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES3" ref="0x7e7b9eb0" loc="919:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINC6" ref="0x7e787200" loc="1182:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="FPE_FLTRES" ref="0x7eab26a0" loc="162:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ADLAR" ref="0x7e795c10" loc="1093:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PA2" ref="0x7e794eb0" loc="1106:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGMA1" ref="0x7e7c2830" loc="876:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGMB3" ref="0x7e7c08d0" loc="902:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="AM_SINGLE" ref="0x7e4d4640" loc="36:../../../tos/lib/netarch/single/SinglePacket.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="TOS_SERIAL_UNKNOWN_ID" ref="0x7e870410" loc="87:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWA3" ref="0x7e7d74f0" loc="687:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM1B1" ref="0x7e7c2eb0" loc="882:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ADHSM" ref="0x7e7b5060" loc="961:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="INT3" ref="0x7e7d14f0" loc="763:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ISC31" ref="0x7e7d4830" loc="730:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINF3" ref="0x7e780db0" loc="1275:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_WAVE16_PWM_FAST_COMPARE" ref="0x7dbddb30" loc="218:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:33" name="CLD_CONTINUED" ref="0x7eab1800" loc="178:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_WAVE16_RESERVED" ref="0x7dbdd870" loc="216:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM21" ref="0x7e7c30b0" loc="858:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGM33" ref="0x7e7b8060" loc="920:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="XMM0" ref="0x7e7d5730" loc="714:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:129" name="ATM128_ICR3H" ref="0x7e7e2858" loc="269:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADC_SNGL_ADC5" ref="0x7e764870" loc="55:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="SIGEV_NONE" ref="0x7eab0160" loc="186:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS2" ref="0x7e7c5830" loc="839:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:51" name="ATM128_TCCR0" ref="0x7e7e6ba8" loc="169:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOC1C" ref="0x7e7b7590" loc="939:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_RIGHT_ADJUST" ref="0x7e765d08" loc="43:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PB0" ref="0x7e7919d0" loc="1138:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PC2" ref="0x7e789db0" loc="1166:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:134" name="ATM128_OCR3AL" ref="0x7e7e15a8" loc="283:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WDP1" ref="0x7e7b6b70" loc="956:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PD4" ref="0x7e786250" loc="1194:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PE6" ref="0x7e7846e0" loc="1222:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_CLK8_DIVIDE_128" ref="0x7dbf1010" loc="49:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM00" ref="0x7e7c4200" loc="847:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ADPS2" ref="0x7e7953f0" loc="1086:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWA6" ref="0x7e7d7010" loc="684:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:140" name="ATM128_TCCR3C" ref="0x7e7e01b8" loc="298:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="INT6" ref="0x7e7d1010" loc="760:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRW10" ref="0x7e7c7a20" loc="817:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS0" ref="0x7e7b26e0" loc="1004:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_WAVE16_PWM_FAST_8BIT" ref="0x7dbded60" loc="208:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_PORTE" ref="0x7e7f15a8" loc="36:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC0" ref="0x7e7c5d10" loc="844:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PIND0" ref="0x7e7843a0" loc="1218:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINE2" ref="0x7e782830" loc="1246:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="__fdlibm_svid" ref="0x7ecb14c8" loc="402:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WDCE" ref="0x7e7b6690" loc="953:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC_PRESCALE_16" ref="0x7e760490" loc="100:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_WAVE16_CTC_CAPTURE" ref="0x7dbdd718" loc="215:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES" ref="0x7e7c0730" loc="901:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:50" name="ATM128_TCNT0" ref="0x7e7e6a00" loc="166:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_POWER_ADC_NR" ref="0x7e766538" loc="122:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="AVR_CLOCK_DIVIDE_8" ref="0x7dbf0ad8" loc="69:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_COMPARE_SET" ref="0x7dbe8900" loc="85:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDA6" ref="0x7e793540" loc="1112:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_CLK8_NORMAL" ref="0x7dbf2930" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ISC71" ref="0x7e7d3540" loc="740:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="REFS0" ref="0x7e795a70" loc="1092:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDF7" ref="0x7e781a20" loc="1261:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="SERIAL_PROTO_PACKET_UNKNOWN" ref="0x7e870c08" loc="95:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADCSR" ref="0x7e7f1df0" loc="47:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DSR_ROUTE_REPLY_TYPE" ref="0x7e3f68b8" loc="61:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:160" name="DSR_ACK_REQUEST_TYPE" ref="0x7e3f6c18" loc="63:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:55" name="ATM128_TIMSK" ref="0x7e7e5400" loc="182:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:46" name="ATM128_TCCR1B" ref="0x7e7e6360" loc="154:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="NOISE_BIN_SIZE" ref="0x7ea63ee8" loc="48:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="OCDR2" ref="0x7e7b61b0" loc="948:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM00" ref="0x7e7b2540" loc="1003:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="SEND_DONE_OFFSET" ref="0x7e4c96e8" loc="120:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCIE2" ref="0x7e7d0880" loc="779:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCF3C" ref="0x7e7c73a0" loc="811:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SM2" ref="0x7e7c60b0" loc="821:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOV1" ref="0x7e7c9db0" loc="794:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ10" ref="0x7e7b3eb0" loc="997:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PF0" ref="0x7e781880" loc="1258:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PG2" ref="0x7e779830" loc="1283:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:30" name="ATM128_ADC_SNGL_1_23" ref="0x7e762c68" loc="80:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_WAVE8_CTC" ref="0x7dbe8060" loc="76:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:59" name="ATM128_RAMPZ" ref="0x7e7e5aa0" loc="194:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="INTF3" ref="0x7e7d0200" loc="773:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWWC" ref="0x7e7d8a60" loc="679:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="RAMPZ0" ref="0x7e7d4690" loc="727:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_ADC_DIFF_ADC10_10x" ref="0x7e764de0" loc="59:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_ADC_DIFF_ADC22_10x" ref="0x7e7632d0" loc="62:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="XDIV3" ref="0x7e7d4010" loc="721:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:125" name="HDLC_CTLESC_BYTE" ref="0x7e871bb8" loc="78:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE1" ref="0x7e7b0350" loc="1025:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_WAVE16_PWM_FAST_9BIT" ref="0x7dbdeec0" loc="209:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_INT_ENABLE_OFF" ref="0x7e758038" loc="136:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="GRAPH_PARALLEL_EDGES_ALLOWED" ref="0x7df50e48" loc="50:../../../tos/lib/data/graph/Graph.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ILL_PRVREG" ref="0x7eab3c08" loc="153:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="EOFF" ref="0x7e831010" loc="39:/opt/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_INT_ENABLE_ON" ref="0x7e758198" loc="137:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:130" name="ATM128_OCR3C" ref="0x7e7e2a00" loc="272:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDF1" ref="0x7e7803f0" loc="1267:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDG3" ref="0x7e779eb0" loc="1289:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM1" ref="0x7e7b0690" loc="1027:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDB0" ref="0x7e7906e0" loc="1148:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDC2" ref="0x7e788b70" loc="1176:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDD4" ref="0x7e785010" loc="1204:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDE6" ref="0x7e7833f0" loc="1232:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCF1B" ref="0x7e7c9c10" loc="793:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOC3B" ref="0x7e7b8f00" loc="933:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PE1" ref="0x7e784f00" loc="1227:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCIE1A" ref="0x7e7d0d60" loc="782:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPR0" ref="0x7e7b48d0" loc="980:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PF3" ref="0x7e7813a0" loc="1255:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_CLK8_DIVIDE_8" ref="0x7dbf2ae0" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:24" name="SEGV_ACCERR" ref="0x7eab2be0" loc="167:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC0" ref="0x7e7b0830" loc="1030:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ACSR" ref="0x7e7f0360" loc="54:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADCW" ref="0x7e7f1750" loc="39:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:125" name="ATM128_ETIMSK" ref="0x7e7e2360" loc="264:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="XDIV6" ref="0x7e7d5a70" loc="718:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_CLK8_DIVIDE_32" ref="0x7dbf2c90" loc="47:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:100" name="ATM128_DDRG" ref="0x7e7e4508" loc="216:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOIE3" ref="0x7e7c8830" loc="802:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINF1" ref="0x7e7791b0" loc="1277:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PING3" ref="0x7e7786e0" loc="1296:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="LEDS_LED7" ref="0x7e532138" loc="38:/opt/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWS5" ref="0x7e7d6060" loc="696:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS21" ref="0x7e7c33f0" loc="860:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINA5" ref="0x7e7923f0" loc="1123:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINB7" ref="0x7e790880" loc="1151:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:112" name="ATM128_TWBR" ref="0x7e7e3258" loc="238:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:67" name="SERIAL_PROTO_ACK" ref="0x7e8706d8" loc="92:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:40" name="ATM128_OCR1B" ref="0x7e7e7400" loc="139:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PA5" ref="0x7e7949d0" loc="1103:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:38" name="ATM128_ICR1" ref="0x7e7e8ef8" loc="134:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:96" name="DSR_SOURCE_ROUTE_TYPE" ref="0x7e3f5010" loc="65:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDA1" ref="0x7e793d60" loc="1117:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDB3" ref="0x7e790200" loc="1145:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDC5" ref="0x7e788690" loc="1173:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDD7" ref="0x7e786a70" loc="1201:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_FREE_RUNNING_ON" ref="0x7e7598c0" loc="125:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_INT_FLAG_OFF" ref="0x7e759bb0" loc="130:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_CLK8_DIVIDE_1024" ref="0x7dbf1370" loc="51:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="NOISE_MIN_TRACE" ref="0x7ea625c0" loc="52:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:132" name="ATM128_OCR3BL" ref="0x7e7e10b0" loc="278:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_WAVE16_PWM_FAST_CAPTURE" ref="0x7dbdd9d0" loc="217:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ISC10" ref="0x7e7d3060" loc="735:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINF6" ref="0x7e7808d0" loc="1272:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDF2" ref="0x7e780250" loc="1266:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDG4" ref="0x7e779d10" loc="1288:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS02" ref="0x7e7c4540" loc="849:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM00" ref="0x7e7c5eb0" loc="845:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM12" ref="0x7e7b9690" loc="912:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_POWER_IDLE" ref="0x7e766388" loc="121:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COMB0" ref="0x7e7c2350" loc="873:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ERESERVE" ref="0x7e831698" loc="43:/opt/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE1" ref="0x7e7b1db0" loc="1022:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="ATM128_ADC_DIFF_ADC01_1x" ref="0x7e763850" loc="66:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:144" name="ATM128_UBRR0H" ref="0x7e7e0360" loc="301:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:154" name="ATM128_UCSR1B" ref="0x7e7e0a00" loc="313:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SI_KERNEL" ref="0x7eab3428" loc="146:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE" ref="0x7e799540" loc="1040:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ILL_PRVOPC" ref="0x7eab3ab8" loc="152:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ADIE" ref="0x7e795250" loc="1085:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="JTD" ref="0x7e7c6590" loc="826:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="FPE_INTOVF" ref="0x7eab2160" loc="158:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_ENABLE_OFF" ref="0x7e760df8" loc="112:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:109" name="ATM128_XMCRA" ref="0x7e7e4ef8" loc="232:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPIF" ref="0x7e7b5880" loc="968:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COM3C1" ref="0x7e7c1f00" loc="894:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SRE" ref="0x7e7c76e0" loc="815:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="ATM128_PINC" ref="0x7e7e95a8" loc="87:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="SRW01" ref="0x7e7d6d60" loc="706:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DSR_ROUTE_ERROR_TYPE" ref="0x7e3f6a68" loc="62:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINC1" ref="0x7e787a20" loc="1187:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PIND3" ref="0x7e785eb0" loc="1215:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINE5" ref="0x7e782350" loc="1243:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:56" name="ATM128_EIFR" ref="0x7e7e55a8" loc="185:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:53" name="ATM128_MCUCR" ref="0x7e7e50b0" loc="176:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCDR0" ref="0x7e7b64f0" loc="950:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="SI_QUEUE" ref="0x7eab32d8" loc="144:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:136" name="ATM128_TCNT3" ref="0x7e7e18f8" loc="287:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_SNGL_ADC2" ref="0x7e764468" loc="52:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_ADC_DIFF_ADC32_200x" ref="0x7e7636f0" loc="65:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDE1" ref="0x7e783c10" loc="1237:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_PRESCALE_4" ref="0x7e7601e0" loc="98:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:49" name="ATM128_OCR0" ref="0x7e7e6858" loc="163:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32" name="CLD_STOPPED" ref="0x7eab16a0" loc="177:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ISC50" ref="0x7e7d3d60" loc="745:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:39" name="ATM128_ICR1H" ref="0x7e7e7258" loc="136:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="ATM128_ICR3L" ref="0x7e7e26b0" loc="268:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:48" name="AM_DSR" ref="0x7e4b5478" loc="38:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="INTF1" ref="0x7e7d0540" loc="775:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="EINVAL" ref="0x7e831350" loc="41:/opt/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_ADC_DIFF_ADC10_200x" ref="0x7e763170" loc="61:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_ADC_DIFF_ADC22_200x" ref="0x7e763590" loc="64:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-115" name="NOISE_MIN" ref="0x7ea634c8" loc="44:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:25" name="ATM128_ADC_DIFF_ADC12_1x" ref="0x7e762590" loc="75:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="SE" ref="0x7e7c7bc0" loc="818:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ADSC" ref="0x7e796d60" loc="1082:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="__fdlibm_posix" ref="0x7ecb1778" loc="404:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="OCDR5" ref="0x7e7b7c10" loc="945:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PB4" ref="0x7e791350" loc="1134:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PC6" ref="0x7e789730" loc="1162:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:43" name="ATM128_OCR1AH" ref="0x7e7e7c48" loc="146:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:120" name="ATM128_OCR1CL" ref="0x7e7e3c48" loc="254:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_PINF" ref="0x7e7f10b0" loc="27:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="ATM128_DDRB" ref="0x7e7e9c48" loc="99:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="LEDS_LED2" ref="0x7e5333c8" loc="33:/opt/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINA0" ref="0x7e792c10" loc="1128:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINB2" ref="0x7e7890b0" loc="1156:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINC4" ref="0x7e787540" loc="1184:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PIND6" ref="0x7e7859d0" loc="1212:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES1" ref="0x7e7b9350" loc="910:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWPS0" ref="0x7e7d66e0" loc="700:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN" ref="0x7e799bc0" loc="1044:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ01" ref="0x7e7b2880" loc="1005:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PA0" ref="0x7e793200" loc="1108:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL1" ref="0x7e7b3690" loc="992:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="INTF6" ref="0x7e7d1d10" loc="770:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TWA1" ref="0x7e7d7830" loc="689:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC1" ref="0x7e7b1c10" loc="1021:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_TIMER_COMPARE_SET" ref="0x7dbdf200" loc="180:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COM1C1" ref="0x7e7c1200" loc="884:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="INT1" ref="0x7e7d1830" loc="765:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_ENABLE_ON" ref="0x7e759010" loc="113:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_WAVE16_CTC_COMPARE" ref="0x7dbdec00" loc="207:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGM31" ref="0x7e7c0250" loc="896:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS0" ref="0x7e7c5b70" loc="841:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE1" ref="0x7e798590" loc="1052:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-5" name="NOISE_MAX" ref="0x7ea636e0" loc="45:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ACME" ref="0x7e7b5200" loc="962:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADCL" ref="0x7e7f1aa0" loc="43:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC1A" ref="0x7e7b7250" loc="937:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PC0" ref="0x7e7881b0" loc="1168:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PD2" ref="0x7e786590" loc="1196:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PE4" ref="0x7e784a20" loc="1224:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PF6" ref="0x7e782eb0" loc="1252:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ADPS0" ref="0x7e795730" loc="1088:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWA4" ref="0x7e7d7350" loc="686:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM0" ref="0x7e7b4db0" loc="985:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="ATM128_ADC_DIFF_ADC21_1x" ref="0x7e763b10" loc="68:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:139" name="ATM128_TCCR3A" ref="0x7e7e0010" loc="295:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_COMPARE_OFF" ref="0x7dbe84f8" loc="82:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="NOISE_DEFAULT_ELEMENT_SIZE" ref="0x7ea62268" loc="50:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="ATM128_PORTC" ref="0x7e7e98f8" loc="93:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS00" ref="0x7e7c4880" loc="851:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ILL_ILLOPN" ref="0x7eab36c8" loc="149:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS12" ref="0x7e7b9830" loc="913:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB80" ref="0x7e797b70" loc="1067:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINE0" ref="0x7e782b70" loc="1248:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_CLK16_EXTERNAL_RISE" ref="0x7dbf0380" loc="62:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ILL_COPROC" ref="0x7eab3d58" loc="154:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="FPE_FLTINV" ref="0x7eab27f0" loc="163:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:60" name="ATM128_XDIV" ref="0x7e7e5c48" loc="197:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC" ref="0x7e7c0590" loc="900:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE0" ref="0x7e7974f0" loc="1063:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDA4" ref="0x7e793880" loc="1114:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDB6" ref="0x7e791d10" loc="1142:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPMEN" ref="0x7e7d2c10" loc="756:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ISC01" ref="0x7e7d3200" loc="736:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="BLBSET" ref="0x7e7d2730" loc="753:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDF5" ref="0x7e781d60" loc="1263:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOCC" ref="0x7e7b8bc0" loc="929:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PGWRT" ref="0x7e7d28d0" loc="754:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="SEND_DONE_WINDOW" ref="0x7e4c9c08" loc="122:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COMA1" ref="0x7e7c3db0" loc="870:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:111" name="ATM128_OSCCAL" ref="0x7e7e30b0" loc="235:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM10" ref="0x7e7b39d0" loc="994:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="AS0" ref="0x7e7c3730" loc="864:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:98" name="ATM128_PORTF" ref="0x7e7e41b8" loc="210:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL1" ref="0x7e7b2060" loc="998:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN1" ref="0x7e798a70" loc="1055:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ACBG" ref="0x7e796060" loc="1072:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCIE0" ref="0x7e7c9250" loc="785:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCF3A" ref="0x7e7c8eb0" loc="808:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="SM0" ref="0x7e7c7f00" loc="820:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PG0" ref="0x7e779b70" loc="1285:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:149" name="ATM128_UCSR0C" ref="0x7e7e0508" loc="304:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:45" name="ATM128_TCNT1H" ref="0x7e7e61b8" loc="151:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:136" name="ATM128_TCNT3L" ref="0x7e7e1aa0" loc="288:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WDE" ref="0x7e7b6830" loc="954:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ADFR" ref="0x7e796f00" loc="1083:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="MUX1" ref="0x7e794350" loc="1097:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:24" name="ATM128_ADC_DIFF_ADC02_1x" ref="0x7e762430" loc="74:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADC_PRESCALE_32" ref="0x7e7605e8" loc="101:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COM3A0" ref="0x7e7c1a20" loc="891:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="XDIV1" ref="0x7e7d4350" loc="723:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ2" ref="0x7e799f00" loc="1046:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:134" name="ATM128_OCR3A" ref="0x7e7e1400" loc="282:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:156" name="ATM128_UDR1" ref="0x7e7e0d50" loc="319:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDG1" ref="0x7e778200" loc="1291:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="FALSE" ref="0x7ec917b8" loc="60:/opt/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="EBUSY" ref="0x7e8311b0" loc="40:/opt/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32768" name="ATM128_TIMER0_TICKSPPS" ref="0x7e756010" loc="55:/opt/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDC0" ref="0x7e788eb0" loc="1178:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDD2" ref="0x7e785350" loc="1206:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDE4" ref="0x7e783730" loc="1234:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:30" name="CHANNEL_BANDGAP" ref="0x7e757bf0" loc="52:/opt/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCIE3C" ref="0x7e7c89d0" loc="803:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_CLK16_OFF" ref="0x7dbf1778" loc="55:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ISC41" ref="0x7e7d3f00" loc="746:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWGCE" ref="0x7e7d7b70" loc="691:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CSB1" ref="0x7e7c0db0" loc="905:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="MUX4" ref="0x7e795db0" loc="1094:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_POWER_EXT_STANDBY" ref="0x7e7666f0" loc="123:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR0" ref="0x7e7b0eb0" loc="1034:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PB7" ref="0x7e792db0" loc="1131:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOIE1" ref="0x7e7c90b0" loc="784:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="DEFAULT_CHANNEL_SIZE" ref="0x7ec332e0" loc="40:/opt/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_DDRE" ref="0x7e7f1400" loc="33:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PING1" ref="0x7e778a20" loc="1298:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32" name="LEDS_LED5" ref="0x7e533ba8" loc="36:/opt/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_WAVE8_PWM_FAST" ref="0x7dbe81b8" loc="77:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_COMPARE_CLEAR" ref="0x7dbe87a8" loc="84:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DSR_ROUTE_REQUEST_IDS" ref="0x7e4b5998" loc="41:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DSR_FLOW_STATE_NOT_SUPPORTED_RET" ref="0x7e3f2010" loc="129:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWS3" ref="0x7e7d63a0" loc="698:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="SRL1" ref="0x7e7d6a20" loc="704:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS31" ref="0x7e7b8540" loc="923:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:116" name="ATM128_TWCR" ref="0x7e7e38f8" loc="250:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINA3" ref="0x7e792730" loc="1125:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINB5" ref="0x7e790bc0" loc="1153:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINC7" ref="0x7e787060" loc="1181:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="CPOL" ref="0x7e7b43f0" loc="977:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:29" name="CLD_KILLED" ref="0x7eab12b0" loc="174:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SPE" ref="0x7e7b5f00" loc="974:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PA3" ref="0x7e794d10" loc="1105:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="ATM128_ADC_DIFF_ADC11_1x" ref="0x7e7639b0" loc="67:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COM1A0" ref="0x7e7c2d10" loc="881:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:115" name="ATM128_TWDR" ref="0x7e7e3750" loc="247:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="INT4" ref="0x7e7d1350" loc="762:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:130" name="ATM128_OCR3CL" ref="0x7e7e2ba8" loc="273:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:135" name="ATM128_OCR3AH" ref="0x7e7e1750" loc="284:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ISC20" ref="0x7e7d4d10" loc="733:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINF4" ref="0x7e780c10" loc="1274:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGM10" ref="0x7e7c16e0" loc="887:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADC_SNGL_ADC6" ref="0x7e7649c8" loc="56:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="XMM1" ref="0x7e7d5590" loc="713:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COMC0" ref="0x7e7c2690" loc="875:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="NOISE_QUANTIZE_INTERVAL" ref="0x7ea63ab0" loc="47:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PB1" ref="0x7e791830" loc="1137:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PC3" ref="0x7e789c10" loc="1165:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="WDP2" ref="0x7e7b69d0" loc="955:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PD5" ref="0x7e7860b0" loc="1193:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PE7" ref="0x7e784540" loc="1221:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:152" name="ATM128_UBRR1H" ref="0x7e7e06b0" loc="307:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM01" ref="0x7e7c4060" loc="846:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:52" name="ATM128_MCUSR" ref="0x7e7e6d50" loc="172:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TICIE3" ref="0x7e7c8350" loc="799:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WDRF" ref="0x7e7c68d0" loc="828:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM0" ref="0x7e7c51b0" loc="835:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RWWSRE" ref="0x7e7d2590" loc="752:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE" ref="0x7e799880" loc="1042:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="INT7" ref="0x7e7d2db0" loc="759:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE0" ref="0x7e7b0d10" loc="1033:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_CLK16_DIVIDE_1024" ref="0x7dbf0010" loc="60:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="SRW11" ref="0x7e7d50b0" loc="708:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:25" name="ATM128_PINA" ref="0x7e7e8010" loc="105:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS1" ref="0x7e7b3b70" loc="995:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PIND1" ref="0x7e784200" loc="1217:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINE3" ref="0x7e782690" loc="1245:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWSTA" ref="0x7e7d8720" loc="677:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWIE" ref="0x7e7d8da0" loc="681:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:44" name="ATM128_TCNT1" ref="0x7e7e7df0" loc="149:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_SNGL_ADC0" ref="0x7e7641b8" loc="50:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDA7" ref="0x7e7933a0" loc="1111:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_PRESCALE_2" ref="0x7e761f18" loc="96:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:31" name="CHANNEL_GND" ref="0x7e757d98" loc="53:/opt/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ISC60" ref="0x7e7d3a20" loc="743:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="REFS1" ref="0x7e7958d0" loc="1091:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_ADC_DIFF_ADC00_200x" ref="0x7e763010" loc="60:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE0" ref="0x7e7971b0" loc="1061:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADC_PRESCALE_128" ref="0x7e760898" loc="103:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="ATM128_ADC_DIFF_ADC71_1x" ref="0x7e7622d0" loc="73:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:122" name="ATM128_TCCR1C" ref="0x7e7e2010" loc="258:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCDR3" ref="0x7e7b6010" loc="947:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PB2" ref="0x7e791690" loc="1136:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM01" ref="0x7e7b23a0" loc="1002:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:41" name="ATM128_OCR1BH" ref="0x7e7e7750" loc="141:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PC4" ref="0x7e789a70" loc="1164:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PD6" ref="0x7e787f00" loc="1192:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-1" name="__fdlibm_ieee" ref="0x7ecb1378" loc="401:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TOV2" ref="0x7e7c9730" loc="790:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PF1" ref="0x7e7816e0" loc="1257:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PG3" ref="0x7e779690" loc="1282:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ11" ref="0x7e7b3d10" loc="996:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="INTF4" ref="0x7e7d0060" loc="772:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_SPCR" ref="0x7e7f0ba8" loc="69:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="XDIV4" ref="0x7e7d5db0" loc="720:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC" ref="0x7e7b2f00" loc="1011:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TWEN" ref="0x7e7d8c00" loc="680:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="DSR_ROUTE_REQUEST_IN_SIZE" ref="0x7e4b57e8" loc="40:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:48" name="ATM128_ASSR" ref="0x7e7e66b0" loc="160:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:254" name="AM_RECOVER_TYPE" ref="0x7e4d0360" loc="53:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_POWER_SAVE" ref="0x7e7668a0" loc="124:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_WAVE16_NORMAL" ref="0x7dbde698" loc="203:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDB1" ref="0x7e790540" loc="1147:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDC3" ref="0x7e7889d0" loc="1175:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDD5" ref="0x7e786db0" loc="1203:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDE7" ref="0x7e783250" loc="1231:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCF1C" ref="0x7e7c7540" loc="812:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOC3C" ref="0x7e7b70b0" loc="934:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PD0" ref="0x7e7868d0" loc="1198:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PE2" ref="0x7e784d60" loc="1226:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCIE1B" ref="0x7e7d0f00" loc="783:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="SPR1" ref="0x7e7b4730" loc="979:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PF4" ref="0x7e781200" loc="1254:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:33" name="ATM128_WDTCR" ref="0x7e7e86b0" loc="119:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN0" ref="0x7e797690" loc="1064:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CHANNEL_THERMISTOR" ref="0x7e7578b8" loc="50:/opt/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_CLK16_NORMAL" ref="0x7dbf1928" loc="56:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL" ref="0x7e7b4a70" loc="983:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM20" ref="0x7e7c4f00" loc="857:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="XMBK" ref="0x7e7d5250" loc="711:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC1" ref="0x7e7b1a70" loc="1020:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ICF3" ref="0x7e7c8d10" loc="807:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:57" name="ATM128_EIMSK" ref="0x7e7e5750" loc="188:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:27" name="ATM128_PORTA" ref="0x7e7e8360" loc="111:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWS6" ref="0x7e7d7eb0" loc="695:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ACIS0" ref="0x7e796a20" loc="1078:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS22" ref="0x7e7c3250" loc="859:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS10" ref="0x7e7b9b70" loc="915:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC3" ref="0x7e7b9d10" loc="918:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINA6" ref="0x7e792250" loc="1122:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:120" name="ATM128_OCR1C" ref="0x7e7e3aa0" loc="253:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_ADC_DIFF_ADC32_10x" ref="0x7e763430" loc="63:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:106" name="ATM128_EICRA" ref="0x7e7e4ba8" loc="226:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ACI" ref="0x7e7963a0" loc="1074:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE" ref="0x7e7b10b0" loc="1012:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PA6" ref="0x7e794830" loc="1102:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:69" name="SERIAL_PROTO_PACKET_NOACK" ref="0x7e870a40" loc="94:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="FPE_FLTUND" ref="0x7eab2550" loc="161:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="CHANNEL_BATTERY" ref="0x7e757a48" loc="51:/opt/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDA2" ref="0x7e793bc0" loc="1116:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDB4" ref="0x7e790060" loc="1144:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDC6" ref="0x7e7884f0" loc="1172:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_WAVE16_PWM_10BIT" ref="0x7dbdeaa0" loc="206:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ISC11" ref="0x7e7d4eb0" loc="734:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINF7" ref="0x7e780730" loc="1271:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDF3" ref="0x7e7800b0" loc="1265:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_PRESCALE_2b" ref="0x7e760088" loc="97:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="XDIVEN" ref="0x7e7d58d0" loc="717:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOCA" ref="0x7e7b8880" loc="927:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM01" ref="0x7e7c43a0" loc="848:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGM13" ref="0x7e7b94f0" loc="911:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COMB1" ref="0x7e7c21b0" loc="872:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE" ref="0x7e7b1590" loc="1015:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="IVSEL" ref="0x7e7c6250" loc="822:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:27" name="ATM128_ADC_DIFF_ADC32_1x" ref="0x7e762850" loc="77:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ACIC" ref="0x7e7966e0" loc="1076:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_UCSR0A" ref="0x7e7f0858" loc="63:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:157" name="ATM128_UCSR1C" ref="0x7e7e0ef8" loc="322:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DSR_MAX_RETRIES" ref="0x7e4b4258" loc="46:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_CLK16_DIVIDE_64" ref="0x7dbf1c88" loc="58:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TSM" ref="0x7e7b6eb0" loc="960:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PUD" ref="0x7e7b53a0" loc="963:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DORD" ref="0x7e7b40b0" loc="975:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ADIF" ref="0x7e7950b0" loc="1084:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_START_CONVERSION_OFF" ref="0x7e759308" loc="118:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB8" ref="0x7e798250" loc="1048:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:108" name="ATM128_XMCRB" ref="0x7e7e4d50" loc="229:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM3B0" ref="0x7e7c1d60" loc="893:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="JTRF" ref="0x7e7c6730" loc="827:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="ATM128_PIND" ref="0x7e7e90b0" loc="78:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="LEDS_LED0" ref="0x7e537e48" loc="31:/opt/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SI_ASYNCIO" ref="0x7eab5ec8" loc="139:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCF2" ref="0x7e7c9590" loc="789:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM0" ref="0x7e7c54f0" loc="837:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINB0" ref="0x7e7893f0" loc="1158:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINC2" ref="0x7e787880" loc="1186:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ0" ref="0x7e7b3350" loc="988:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PIND4" ref="0x7e785d10" loc="1214:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINE6" ref="0x7e7821b0" loc="1242:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_TIMER_COMPARE_CLEAR" ref="0x7dbdf090" loc="179:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPMIE" ref="0x7e7d2250" loc="750:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCDR1" ref="0x7e7b6350" loc="949:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_SNGL_ADC3" ref="0x7e7645c0" loc="53:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WCOL" ref="0x7e7b5a20" loc="969:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PSR0" ref="0x7e7b5540" loc="964:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDD0" ref="0x7e785690" loc="1208:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:25" name="BUS_ADRALN" ref="0x7eab2d30" loc="169:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDE2" ref="0x7e783a70" loc="1236:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_WAVE16_PWM_9BIT" ref="0x7dbde948" loc="205:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DSR_NODE_UNREACHABLE_RET" ref="0x7e3f3d88" loc="128:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCIE3A" ref="0x7e7c84f0" loc="800:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ISC51" ref="0x7e7d3bc0" loc="744:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X0" ref="0x7e799200" loc="1036:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:113" name="ATM128_TWSR" ref="0x7e7e3400" loc="241:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="MUX2" ref="0x7e7941b0" loc="1096:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="OCDR6" ref="0x7e7b7a70" loc="944:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB80" ref="0x7e797d10" loc="1068:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PB5" ref="0x7e7911b0" loc="1133:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PC7" ref="0x7e789590" loc="1161:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="ATM128_DDRC" ref="0x7e7e9750" loc="90:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:99" name="ATM128_PING" ref="0x7e7e4360" loc="213:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="LEDS_LED3" ref="0x7e533668" loc="34:/opt/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE" ref="0x7e7996e0" loc="1041:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:31" name="CLD_TRAPPED" ref="0x7eab1550" loc="176:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINA1" ref="0x7e792a70" loc="1127:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TWPS1" ref="0x7e7d6540" loc="699:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINB3" ref="0x7e790f00" loc="1155:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINC5" ref="0x7e7873a0" loc="1183:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PIND7" ref="0x7e785830" loc="1211:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ02" ref="0x7e7979d0" loc="1066:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="DSR_MAX_SALVAGE_COUNT" ref="0x7e4b4418" loc="47:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PA1" ref="0x7e793060" loc="1107:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:28" name="CLD_EXITED" ref="0x7eab1160" loc="173:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_CLK8_DIVIDE_256" ref="0x7dbf11c0" loc="50:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGMA0" ref="0x7e7c29d0" loc="877:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGMB2" ref="0x7e7c0a70" loc="903:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="INTF7" ref="0x7e7d1b70" loc="769:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWA2" ref="0x7e7d7690" loc="688:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CHANNEL_RSSI" ref="0x7e757720" loc="49:/opt/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_PRESCALE_8" ref="0x7e760338" loc="99:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TCR0UB" ref="0x7e7c3c10" loc="867:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM1B0" ref="0x7e7c1060" loc="883:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="INT2" ref="0x7e7d1690" loc="764:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="AM_NO_UPPER_DATA" ref="0x7e4d0510" loc="54:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:133" name="ATM128_OCR3BH" ref="0x7e7e1258" loc="279:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ISC30" ref="0x7e7d49d0" loc="731:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINF2" ref="0x7e779010" loc="1276:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PING4" ref="0x7e778540" loc="1295:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ADC_PRESCALE" ref="0x7e760a00" loc="107:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM20" ref="0x7e7c4bc0" loc="855:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM32" ref="0x7e7b8200" loc="921:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:28" name="ATM128_ADC_DIFF_ADC42_1x" ref="0x7e7629b0" loc="78:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC_SNGL_ADC4" ref="0x7e764718" loc="54:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_WAVE16_PWM_CAPTURE_LOW" ref="0x7dbdd198" loc="211:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS1" ref="0x7e7c59d0" loc="840:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:42" name="ATM128_OCR1AL" ref="0x7e7e7aa0" loc="145:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWINT" ref="0x7e7d83e0" loc="675:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_CLK16_DIVIDE_256" ref="0x7dbf1e38" loc="59:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32" name="ATM128_SFIOR" ref="0x7e7e8508" loc="116:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TOS_SERIAL_CC1000_ID" ref="0x7e8700b0" loc="85:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PKT_SEND_RETRY" ref="0x7e4d0a48" loc="63:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC" ref="0x7e7f18f8" loc="41:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOC1B" ref="0x7e7b73f0" loc="938:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM" ref="0x7e7b18d0" loc="1017:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SIGEV_THREAD" ref="0x7eab02c0" loc="189:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PC1" ref="0x7e788010" loc="1167:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WDP0" ref="0x7e7b6d10" loc="957:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PD3" ref="0x7e7863f0" loc="1195:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PE5" ref="0x7e784880" loc="1223:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PF7" ref="0x7e782d10" loc="1251:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PKT_SEND_UNKNOWN" ref="0x7e4d0d00" loc="67:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_WAVE16_PWM_FAST_10BIT" ref="0x7dbdd038" loc="210:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ADPS1" ref="0x7e795590" loc="1087:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWA5" ref="0x7e7d71b0" loc="685:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TICIE1" ref="0x7e7d0bc0" loc="781:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="EXTRF" ref="0x7e7c6c10" loc="830:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM1" ref="0x7e7b4c10" loc="984:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ" ref="0x7e799d60" loc="1045:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_POWER_STANDBY" ref="0x7e766a50" loc="125:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="BORF" ref="0x7e7c6a70" loc="829:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:138" name="ATM128_TCCR3B" ref="0x7e7e1df0" loc="292:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB81" ref="0x7e798db0" loc="1057:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="ATM128_PORTD" ref="0x7e7e9400" loc="84:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINE1" ref="0x7e7829d0" loc="1247:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS01" ref="0x7e7c46e0" loc="850:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PGERS" ref="0x7e7d2a70" loc="755:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PKT_SEND_WAIT" ref="0x7e4d0b98" loc="65:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE1" ref="0x7e798730" loc="1053:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ADEN" ref="0x7e796bc0" loc="1081:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADMUX" ref="0x7e7f01b8" loc="51:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDA5" ref="0x7e7936e0" loc="1113:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:34" name="TOS_AM_GROUP" ref="0x7e874470" loc="27:/opt/tinyos-2.x/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDB7" ref="0x7e791b70" loc="1141:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ISC70" ref="0x7e7d36e0" loc="741:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDF6" ref="0x7e781bc0" loc="1262:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:137" name="ATM128_TCNT3H" ref="0x7e7e1c48" loc="289:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10240" name="DSR_MAX_REQUEST_PERIOD" ref="0x7e4b5ea8" loc="44:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="AVR_CLOCK_OFF" ref="0x7dbf0780" loc="67:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:68" name="SERIAL_PROTO_PACKET_ACK" ref="0x7e870888" loc="93:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="FPE_FLTDIV" ref="0x7eab22b0" loc="159:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:47" name="ATM128_TCCR1A" ref="0x7e7e6508" loc="157:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:63" name="ATM128_SREG" ref="0x7e7e5df0" loc="202:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM11" ref="0x7e7b3830" loc="993:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:121" name="ATM128_OCR1CH" ref="0x7e7e3df0" loc="255:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="FPE_FLTSUB" ref="0x7eab2940" loc="164:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_START_CONVERSION_ON" ref="0x7e759468" loc="119:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOS_SERIAL_ACTIVE_MESSAGE_ID" ref="0x7e871ed8" loc="84:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:101" name="ATM128_PORTG" ref="0x7e7e46b0" loc="219:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCF3B" ref="0x7e7c7060" loc="809:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="SM1" ref="0x7e7c7d60" loc="819:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PG1" ref="0x7e7799d0" loc="1284:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOV0" ref="0x7e7c81b0" loc="796:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_UBRR0L" ref="0x7e7f0508" loc="57:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ILL_ILLADR" ref="0x7eab3818" loc="150:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="INTF2" ref="0x7e7d03a0" loc="774:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ECANCEL" ref="0x7e832da0" loc="38:/opt/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COM3A1" ref="0x7e7c1880" loc="890:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_SPDR" ref="0x7e7f0ef8" loc="75:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="XDIV2" ref="0x7e7d41b0" loc="722:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_VREF_2_56" ref="0x7e765a18" loc="38:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_CLK8_DIVIDE_64" ref="0x7dbf2e40" loc="48:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR" ref="0x7e7b13f0" loc="1014:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE0" ref="0x7e799060" loc="1035:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="ATM128_ADC_DIFF_ADC31_1x" ref="0x7e763c70" loc="69:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FORWARD_PACKET_TIME" ref="0x7e4c90b0" loc="112:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="NOISE_HASHTABLE_SIZE" ref="0x7ea62418" loc="51:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:132" name="ATM128_OCR3B" ref="0x7e7e2ef8" loc="277:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X" ref="0x7e7b1730" loc="1016:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_TIMER_COMPARE_TOGGLE" ref="0x7dbe0f18" loc="178:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_VREF_RSVD" ref="0x7e765868" loc="37:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDF0" ref="0x7e780590" loc="1268:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDG2" ref="0x7e778060" loc="1290:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ADC_DIFF_ADC00_10x" ref="0x7e764c80" loc="58:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM0" ref="0x7e7993a0" loc="1037:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRW" ref="0x7e7c7880" loc="816:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ACD" ref="0x7e797eb0" loc="1071:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_CLK16_DIVIDE_8" ref="0x7dbf1ad8" loc="57:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDC1" ref="0x7e788d10" loc="1177:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDD3" ref="0x7e7851b0" loc="1205:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDE5" ref="0x7e783590" loc="1233:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCF1A" ref="0x7e7c9a70" loc="792:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC3A" ref="0x7e7b8d60" loc="932:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PE0" ref="0x7e7830b0" loc="1228:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PF2" ref="0x7e781540" loc="1256:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:52" name="ATM128_MCUCSR" ref="0x7e7e6ef8" loc="173:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS" ref="0x7e7b3010" loc="986:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PG4" ref="0x7e7794f0" loc="1281:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_WAVE16_PWM_COMPARE_LOW" ref="0x7dbdd2f8" loc="212:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:38" name="ATM128_ICR1L" ref="0x7e7e70b0" loc="135:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CSB2" ref="0x7e7c0c10" loc="904:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:416" name="SIM_LOG_OUTPUT_COUNT" ref="0x7ec326a0" loc="56:/opt/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPI2X" ref="0x7e7b5bc0" loc="970:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:512" name="DSR_INIT_REQUEST_PERIOD" ref="0x7e4b40b0" loc="45:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_CLK16_EXTERNAL_FALL" ref="0x7dbf01c8" loc="61:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:126" name="HDLC_FLAG_BYTE" ref="0x7e871a08" loc="77:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CPHA" ref="0x7e7b4590" loc="978:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ICF1" ref="0x7e7c98d0" loc="791:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR1" ref="0x7e7b01b0" loc="1024:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:97" name="ATM128_DDRF" ref="0x7e7e4010" loc="207:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TOIE2" ref="0x7e7d0a20" loc="780:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINF0" ref="0x7e779350" loc="1278:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PING2" ref="0x7e778880" loc="1297:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:64" name="LEDS_LED6" ref="0x7e533e48" loc="37:/opt/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_WAVE8_PWM" ref="0x7dbf0ef8" loc="75:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWS4" ref="0x7e7d6200" loc="697:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRL2" ref="0x7e7d6880" loc="703:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINA4" ref="0x7e792590" loc="1124:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ERETRY" ref="0x7e8314f0" loc="42:/opt/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS20" ref="0x7e7c3590" loc="861:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC1" ref="0x7e7b91b0" loc="909:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS32" ref="0x7e7b83a0" loc="922:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:42" name="ATM128_OCR1A" ref="0x7e7e78f8" loc="144:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINB6" ref="0x7e790a20" loc="1152:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PA4" ref="0x7e794b70" loc="1104:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DSR_OPTION_NOT_SUPPORTED_RET" ref="0x7e3f21d8" loc="130:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDA0" ref="0x7e793f00" loc="1118:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDB2" ref="0x7e7903a0" loc="1146:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COM1A1" ref="0x7e7c2b70" loc="880:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDC4" ref="0x7e788830" loc="1174:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDD6" ref="0x7e786c10" loc="1202:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="INT5" ref="0x7e7d11b0" loc="761:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ISC21" ref="0x7e7d4b70" loc="732:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINF5" ref="0x7e780a70" loc="1273:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="SI_TIMER" ref="0x7eab3188" loc="143:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="INVALID_PAYLOAD_LENGTH" ref="0x7e4d0010" loc="51:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWSTO" ref="0x7e7d88c0" loc="678:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGM11" ref="0x7e7c1540" loc="886:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="DSR_ROUTE_REQUEST_OUT_SIZE" ref="0x7e4b5630" loc="39:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADC_SNGL_ADC7" ref="0x7e764b20" loc="57:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="XMM2" ref="0x7e7d53f0" loc="712:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COMC1" ref="0x7e7c24f0" loc="874:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PSR321" ref="0x7e7b56e0" loc="965:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:124" name="ATM128_ETIFR" ref="0x7e7e21b8" loc="261:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:37" name="ATM128_TCCR2" ref="0x7e7e8d50" loc="131:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE0" ref="0x7e7b0b70" loc="1032:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SEND_RETRY_WINDOW" ref="0x7e4c9978" loc="121:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="FPE_FLTOVF" ref="0x7eab2400" loc="160:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SI_USER" ref="0x7eab5d20" loc="138:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:155" name="ATM128_UCSR1A" ref="0x7e7e0ba8" loc="316:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM1" ref="0x7e7c5690" loc="838:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPIE" ref="0x7e7b5d60" loc="973:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COM3C0" ref="0x7e7c00b0" loc="895:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE1" ref="0x7e7b0010" loc="1023:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="ATM128_PINB" ref="0x7e7e9aa0" loc="96:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SRW00" ref="0x7e7d6f00" loc="707:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="DSR_MAX_REQUEST_ATTMEPTS" ref="0x7e4b5cf8" loc="43:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINC0" ref="0x7e787bc0" loc="1188:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCF0" ref="0x7e7c8010" loc="795:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC2" ref="0x7e7c4a20" loc="854:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PIND2" ref="0x7e784060" loc="1216:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINE4" ref="0x7e7824f0" loc="1244:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_VREF_OFF" ref="0x7e765560" loc="35:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ILL_ILLTRP" ref="0x7eab3968" loc="151:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE" ref="0x7e7b1250" loc="1013:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_WAVE8_NORMAL" ref="0x7dbf0da0" loc="74:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ACO" ref="0x7e796200" loc="1073:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_LEFT_ADJUST" ref="0x7e765eb8" loc="44:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="AVR_CLOCK_ON" ref="0x7dbf0928" loc="68:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="AM_INVALID_TYPE" ref="0x7e4d01b8" loc="52:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_TIMER_COMPARE_NORMAL" ref="0x7dbe0db8" loc="177:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-115" name="NOISE_MIN_QUANTIZE" ref="0x7ea63900" loc="46:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="MSTR" ref="0x7e7b4250" loc="976:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:29" name="ATM128_ADC_DIFF_ADC52_1x" ref="0x7e762b10" loc="79:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:36" name="ATM128_TCNT2" ref="0x7e7e8ba8" loc="128:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_SNGL_ADC1" ref="0x7e764310" loc="51:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:111" name="NOISE_NUM_VALUES" ref="0x7ea62920" loc="53:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDE0" ref="0x7e783db0" loc="1238:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="GRAPH_PARALLEL_EDGES_NOT_ALLOWED" ref="0x7df44010" loc="51:../../../tos/lib/data/graph/Graph.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ISC61" ref="0x7e7d3880" loc="742:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE1" ref="0x7e7983f0" loc="1051:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32" name="DSR_ACK_TYPE" ref="0x7e3f6dc0" loc="64:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="INTF0" ref="0x7e7d06e0" loc="776:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PORF" ref="0x7e7c6db0" loc="831:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB8" ref="0x7e7980b0" loc="1047:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_VREF_AVCC" ref="0x7e765710" loc="36:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="FPE_INTDIV" ref="0x7eab2010" loc="157:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCDR4" ref="0x7e7b7db0" loc="946:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PB3" ref="0x7e7914f0" loc="1135:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PC5" ref="0x7e7898d0" loc="1163:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PD7" ref="0x7e787d60" loc="1191:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOS_SERIAL_802_15_4_ID" ref="0x7e870260" loc="86:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCR0UB" ref="0x7e7c3a70" loc="866:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADCH" ref="0x7e7f1c48" loc="44:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOV3" ref="0x7e7c7200" loc="810:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ00" ref="0x7e7b2a20" loc="1006:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ12" ref="0x7e798c10" loc="1056:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ILL_ILLOPC" ref="0x7eab3578" loc="148:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:44" name="ATM128_TCNT1L" ref="0x7e7e6010" loc="150:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL0" ref="0x7e7b2200" loc="1001:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="SEGV_MAPERR" ref="0x7eab2a90" loc="166:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="INTF5" ref="0x7e7d1eb0" loc="771:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TWA0" ref="0x7e7d79d0" loc="690:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:104" name="ATM128_SPMCR" ref="0x7e7e4858" loc="222:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC0" ref="0x7e7b09d0" loc="1031:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_WAVE16_PWM_8BIT" ref="0x7dbde7f0" loc="204:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COM1C0" ref="0x7e7c13a0" loc="885:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SUCCESS" ref="0x7e8328c0" loc="35:/opt/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="IVCE" ref="0x7e7c63f0" loc="823:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ESIZE" ref="0x7e832c00" loc="37:/opt/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="XDIV5" ref="0x7e7d5c10" loc="719:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="INT0" ref="0x7e7d19d0" loc="766:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:131" name="ATM128_OCR3CH" ref="0x7e7e2d50" loc="274:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGM30" ref="0x7e7c03f0" loc="897:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_COMPARE_TOGGLE" ref="0x7dbe8650" loc="83:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_INT_FLAG_ON" ref="0x7e759d08" loc="131:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE0" ref="0x7e797350" loc="1062:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:65535" name="AM_BROADCAST_ADDR" ref="0x7e874188" loc="15:/opt/tinyos-2.x/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="ATM128_ADC_DIFF_ADC61_1x" ref="0x7e762170" loc="72:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="FAIL" ref="0x7e832a60" loc="36:/opt/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PD1" ref="0x7e786730" loc="1197:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCIE1C" ref="0x7e7c8b70" loc="804:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PE3" ref="0x7e784bc0" loc="1225:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PF5" ref="0x7e781060" loc="1253:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADCSRA" ref="0x7e7f0010" loc="48:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN1" ref="0x7e7988d0" loc="1054:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="DSR_HOP_LIMIT" ref="0x7e4b5b40" loc="42:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:34" name="ATM128_OCDR" ref="0x7e7e8858" loc="122:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="AM_UNICAST_COUNT_MSG" ref="0x7e7f62c8" loc="69:UnicastCountToLeds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM21" ref="0x7e7c4d60" loc="856:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="EALREADY" ref="0x7e831840" loc="44:/opt/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="SI_MESGQ" ref="0x7eab3038" loc="141:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="ATM128_ADC_DIFF_ADC41_1x" ref="0x7e763dd0" loc="70:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:31" name="ATM128_ADC_SNGL_GND" ref="0x7e762dc0" loc="81:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ACIS1" ref="0x7e796880" loc="1077:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:24" name="ATM128_PORTB" ref="0x7e7e9df0" loc="102:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWS7" ref="0x7e7d7d10" loc="694:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINA7" ref="0x7e7920b0" loc="1121:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS11" ref="0x7e7b99d0" loc="914:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:114" name="ATM128_TWAR" ref="0x7e7e35a8" loc="244:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:58" name="ATM128_EICRB" ref="0x7e7e58f8" loc="191:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PA7" ref="0x7e794690" loc="1101:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:54" name="ATM128_TIFR" ref="0x7e7e5258" loc="179:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="ATM128_ICR3" ref="0x7e7e2508" loc="267:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADC_PRESCALE_64" ref="0x7e760740" loc="102:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDA3" ref="0x7e793a20" loc="1115:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDB5" ref="0x7e791eb0" loc="1143:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDC7" ref="0x7e788350" loc="1171:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PKT_SEND_DONE" ref="0x7e4d08f8" loc="61:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ISC00" ref="0x7e7d33a0" loc="737:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDF4" ref="0x7e781f00" loc="1264:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOCB" ref="0x7e7b8a20" loc="928:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SIGEV_SIGNAL" ref="0x7eab0010" loc="183:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_CLK8_OFF" ref="0x7dbf2780" loc="44:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TOS_AM_ADDRESS" ref="0x7e874628" loc="28:/opt/tinyos-2.x/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COMA0" ref="0x7e7c2010" loc="871:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_WAVE16_PWM_COMPARE_HIGH" ref="0x7dbdd5b8" loc="214:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC" ref="0x7e7c5010" loc="834:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="__fdlibm_xopen" ref="0x7ecb1618" loc="403:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL0" ref="0x7e7b2bc0" loc="1007:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN0" ref="0x7e797830" loc="1065:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_UCSR0B" ref="0x7e7f06b0" loc="60:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:153" name="ATM128_UBRR1L" ref="0x7e7e0858" loc="310:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_SPSR" ref="0x7e7f0d50" loc="72:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC" ref="0x7e7b2d60" loc="1010:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_POWER_DOWN" ref="0x7e766c00" loc="126:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MUX0" ref="0x7e7944f0" loc="1098:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="AM_SINK_ADDR" ref="0x7e4d06c8" loc="55:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN" ref="0x7e799a20" loc="1043:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DSR_ROUTE_REQUEST_TYPE" ref="0x7e3f6708" loc="60:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM3B1" ref="0x7e7c1bc0" loc="892:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="XDIV0" ref="0x7e7d44f0" loc="724:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_PINE" ref="0x7e7f1258" loc="30:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:26" name="ATM128_DDRA" ref="0x7e7e81b8" loc="108:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="LEDS_LED1" ref="0x7e533128" loc="32:/opt/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TCN0UB" ref="0x7e7c38d0" loc="865:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="SEND_RETRY_OFFSET" ref="0x7e4c9458" loc="119:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINB1" ref="0x7e789250" loc="1157:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM1" ref="0x7e7c5350" loc="836:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINC3" ref="0x7e7876e0" loc="1185:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PIND5" ref="0x7e785b70" loc="1213:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ1" ref="0x7e7b31b0" loc="987:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINE7" ref="0x7e782010" loc="1241:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWEA" ref="0x7e7d8580" loc="676:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_UDR0" ref="0x7e7f0a00" loc="66:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDG0" ref="0x7e7783a0" loc="1292:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="RWWSB" ref="0x7e7d23f0" loc="751:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TRUE" ref="0x7ec91948" loc="60:/opt/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDD1" ref="0x7e7854f0" loc="1207:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="NOISE_HISTORY" ref="0x7ea620b0" loc="49:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDE3" ref="0x7e7838d0" loc="1235:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:35" name="ATM128_OCR2" ref="0x7e7e8a00" loc="125:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="IDRD" ref="0x7e7b7730" loc="942:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:104" name="ATM128_SPMCSR" ref="0x7e7e4a00" loc="223:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCIE3B" ref="0x7e7c8690" loc="801:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:27" name="BUS_OBJERR" ref="0x7eab1010" loc="171:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ISC40" ref="0x7e7d20b0" loc="747:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X1" ref="0x7e7b04f0" loc="1026:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CSB0" ref="0x7e7b9010" loc="906:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:26" name="BUS_ADRERR" ref="0x7eab2e80" loc="170:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL" ref="0x7e7b34f0" loc="989:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="MUX3" ref="0x7e794010" loc="1095:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:30" name="CLD_DUMPED" ref="0x7eab1400" loc="175:/usr/include/cygwin/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="NO_TASK" ref="0x7e823698" loc="48:/opt/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="NUM_TASKS" ref="0x7e8234f8" loc="47:/opt/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="PACKET_ENGINE_CLIENT_ID" ref="0x7e4c54f0" loc="54:../../../tos/lib/netarch/single/SingleSenderC.nc">
      <component-ref qname="SingleSenderC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="TLV_FIRST_KEY" ref="0x7e35af18" loc="59:../../../tos/lib/netarch/tlv/TlvP.nc">
      <component-ref qname="TlvP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="BUFFER_SIZE" ref="0x7e2d5a50" loc="112:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="RECEIVE_SIZE" ref="0x7e2d57e0" loc="111:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SEND_CLIENT_SIZE" ref="0x7e2d5390" loc="109:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="SEND_SIZE" ref="0x7e2d5538" loc="110:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PKT_FREE" ref="0x7e2d4750" loc="130:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PKT_LOWER_LAYER" ref="0x7e2d3658" loc="146:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PKT_ADDED" ref="0x7e2d49f0" loc="132:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="PKT_SEND" ref="0x7e2d3010" loc="136:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="S_BACKOFF" ref="0x7e2d3b58" loc="153:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="msgAction" ref="0x7e1581d0" loc="195:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PKT_UPPER_LAYER" ref="0x7e2d34f8" loc="144:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="msgAdded" ref="0x7e158b68" loc="194:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="S_SENDING" ref="0x7e2d39f8" loc="152:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="PKT_SEND_INTERCEPT" ref="0x7e2d32c8" loc="138:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PKT_WAIT" ref="0x7e2d4c90" loc="134:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="S_IDLE" ref="0x7e2d38a8" loc="151:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="composePkt" ref="0x7df83518" loc="151:../../../tos/lib/netarch/dsr/DsrControlP.nc">
      <component-ref qname="DsrControlP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:65535" name="NULL_ADDR" ref="0x7e0e2d38" loc="136:../../../tos/lib/netarch/dsr/DsrControlP.nc">
      <component-ref qname="DsrControlP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="S_SENDING" ref="0x7e0dd170" loc="142:../../../tos/lib/netarch/dsr/DsrControlP.nc">
      <component-ref qname="DsrControlP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="S_IDLE" ref="0x7e0dd010" loc="141:../../../tos/lib/netarch/dsr/DsrControlP.nc">
      <component-ref qname="DsrControlP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="ARRAY_SIZE" ref="0x7dec1200" loc="45:/opt/tinyos-2.x/tos/system/BitVectorC.nc">
      <component-ref qname="BitVectorC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="ELEMENT_SIZE" ref="0x7dec2d88" loc="44:/opt/tinyos-2.x/tos/system/BitVectorC.nc">
      <component-ref qname="BitVectorC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="buildTreeTask" ref="0x7ddd2d68" loc="84:../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <component-ref qname="SourceShortestPathP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="stopDoneTask" ref="0x7dd43c30" loc="93:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="sendDoneTask" ref="0x7dd43298" loc="137:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="startDoneTask" ref="0x7dd42620" loc="88:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="MINDT" ref="0x7db934d0" loc="45:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:230" name="MAXT" ref="0x7db93680" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="fired" ref="0x7dab24b8" loc="63:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="END_OF_LIST" ref="0x7da84038" loc="45:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="updateFromTimer" ref="0x7da914a8" loc="60:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="NUM_TIMERS" ref="0x7da85e58" loc="44:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="S_IDLE" ref="0x7d9d9358" loc="77:/opt/tinyos-2.x/tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="NUM_CLIENTS" ref="0x7d9a0c70" loc="40:/opt/tinyos-2.x/tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="errorTask" ref="0x7d99d3d8" loc="161:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="CancelTask" ref="0x7d99dd70" loc="118:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="PACKET_ENGINE_CLIENT_ID" ref="0x7d906950" loc="53:../../../tos/lib/netarch/single/SingleProcessorSenderC.nc">
      <component-ref qname="SingleProcessorSenderC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
  </constants>
  <functions>
  </functions>
  <typedefs>
    <typedef name="Atm128_OCR1CH_t" ref="0x7dbd71e0" loc="270:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1CH_t" ref="0x7dbd71e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="intptr_t" ref="0x7fe70828" loc="60:/usr/include/stdint.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="intptr_t" ref="0x7fe70828"/></typename>
      </type-int>
    </typedef>
    <typedef name="serial_packet_t" ref="0x7e8660f8" loc="123:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_packet" ref="0x7e867c38"/>
        <typename><typedef-ref name="serial_packet_t" ref="0x7e8660f8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="priority_queue_id_t" ref="0x7de3a808" loc="35:../../../tos/lib/data/queue/PriorityQueue.h">
      <documentation loc="32:../../../tos/lib/data/queue/PriorityQueueC.nc">
        <short>&#10;&#10; Auto-wires Init for PriorityQueueP.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Auto-wires Init for PriorityQueueP.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="priority_queue_id_t" ref="0x7de3a808"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR3B_t" ref="0x7dbda010" loc="238:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbdc9d0"/>
        <typename><typedef-ref name="Atm128_TCCR3B_t" ref="0x7dbda010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__uid32_t" ref="0x7f3710e8" loc="85:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__uid32_t" ref="0x7f3710e8"/></typename>
      </type-int>
    </typedef>
    <typedef name="wchar_t" ref="0x7f3d1298" loc="325:/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/stddef.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="wchar_t" ref="0x7f3d1298"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128Admux_t" ref="0x7e761aa0" loc="90:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7e7617e8"/>
        <typename><typedef-ref name="Atm128Admux_t" ref="0x7e761aa0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="graph_edge_id_t" ref="0x7df52f10" loc="36:../../../tos/lib/data/graph/Graph.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="graph_edge_id_t" ref="0x7df52f10"/></typename>
      </type-int>
    </typedef>
    <typedef name="ushort" ref="0x7f3c0010" loc="99:/usr/include/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="ushort" ref="0x7f3c0010"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_footer_t" ref="0x7e873600" loc="16:/opt/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="tossim_footer" ref="0x7e873340"/>
        <typename><typedef-ref name="tossim_footer_t" ref="0x7e873600"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__ULong" ref="0x7f1c1498" loc="19:/usr/include/sys/reent.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__ULong" ref="0x7f1c1498"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int64_t" ref="0x7f421de8" loc="99:/usr/include/machine/_types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__int64_t" ref="0x7f421de8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int16_t" ref="0x7f4308b8" loc="36:/usr/include/machine/_types.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__int16_t" ref="0x7f4308b8"/></typename>
      </type-int>
    </typedef>
    <typedef name="serial_header_t" ref="0x7e867aa8" loc="118:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x7e868d88"/>
        <typename><typedef-ref name="serial_header_t" ref="0x7e867aa8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="TMilli" ref="0x7e7f3c88" loc="29:/opt/tinyos-2.x/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7e7f3aa0"/>
        <typename><typedef-ref name="TMilli" ref="0x7e7f3c88"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sigval_t" ref="0x7eac3620" loc="66:/usr/include/cygwin/signal.h">
      <type-tag size="I:4" alignment="I:4"><union-ref name="sigval" ref="0x7eac3230"/>
        <typename><typedef-ref name="sigval_t" ref="0x7eac3620"/></typename>
      </type-tag>
    </typedef>
    <typedef name="single_packet_header_t" ref="0x7e4d4e20" loc="43:../../../tos/lib/netarch/single/SinglePacket.h">
      <documentation loc="32:../../../tos/lib/netarch/single/SingleSenderC.nc">
        <short>&#10;&#10; Sender for single destination multihop packets of a given application&#10;&#10; layer AM type.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Sender for single destination multihop packets of a given application&#10;&#10; layer AM type.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <type-tag size="I:4" alignment="I:1"><nx_struct-ref ref="0x7e4d4a90"/>
        <typename><typedef-ref name="single_packet_header_t" ref="0x7e4d4e20"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCNT0_t" ref="0x7dbe7da0" loc="102:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT0_t" ref="0x7dbe7da0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1BL_t" ref="0x7dbd7010" loc="269:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1BL_t" ref="0x7dbd7010"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR2_t" ref="0x7dbe6590" loc="107:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR2_t" ref="0x7dbe6590"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_time_t" ref="0x7ec90658" loc="43:/opt/tinyos-2.x/tos/lib/tossim/sim_tossim.h">
      <documentation loc="24:/opt/tinyos-2.x/tos/lib/tossim/sim_tossim.h">
        <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10;</short>
        <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0x7ec90658"/></typename>
      </type-int>
    </typedef>
    <typedef name="__dev32_t" ref="0x7f380010" loc="48:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__dev32_t" ref="0x7f380010"/></typename>
      </type-int>
    </typedef>
    <typedef name="float_t" ref="0x7ed715e0" loc="111:/usr/include/math.h">
      <type-float cname="float" size="I:4" alignment="I:4">
        <typename><typedef-ref name="float_t" ref="0x7ed715e0"/></typename>
      </type-float>
    </typedef>
    <typedef name="mode_t" ref="0x7f360db0" loc="205:/usr/include/cygwin/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="mode_t" ref="0x7f360db0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR1C_t" ref="0x7dbdaec8" loc="253:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbdaa98"/>
        <typename><typedef-ref name="Atm128_TCCR1C_t" ref="0x7dbdaec8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_iconv_t" ref="0x7f3e13d8" loc="40:/usr/include/sys/_types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-void size="I:1" alignment="I:1"></type-void>
        <typename><typedef-ref name="_iconv_t" ref="0x7f3e13d8"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="int_least32_t" ref="0x7fea0c60" loc="36:/usr/include/stdint.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int_least32_t" ref="0x7fea0c60"/></typename>
      </type-int>
    </typedef>
    <typedef name="__builtin_va_list" ref="0x7ff203b8"  loc="NONE">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0x7ff202f8"/></type-tag>
      </type-pointer>
    </typedef>
    <typedef name="__uint32_t" ref="0x7f421438" loc="59:/usr/include/machine/_types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__uint32_t" ref="0x7f421438"/></typename>
      </type-int>
    </typedef>
    <typedef name="TMicro" ref="0x7e5394c8" loc="31:/opt/tinyos-2.x/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7e5392e0"/>
        <typename><typedef-ref name="TMicro" ref="0x7e5394c8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_off64_t" ref="0x7f401bc0" loc="15:/usr/include/sys/_types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="_off64_t" ref="0x7f401bc0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nlink_t" ref="0x7f3b1d68" loc="203:/usr/include/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="nlink_t" ref="0x7f3b1d68"/></typename>
      </type-int>
    </typedef>
    <typedef name="clock_t" ref="0x7f3c03d0" loc="104:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="clock_t" ref="0x7f3c03d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ino32_t" ref="0x7f371a40" loc="106:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__ino32_t" ref="0x7f371a40"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1BH_t" ref="0x7dbd9d70" loc="268:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1BH_t" ref="0x7dbd9d70"/></typename>
      </type-int>
    </typedef>
    <typedef name="_off_t" ref="0x7f4019d8" loc="14:/usr/include/sys/_types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="_off_t" ref="0x7f4019d8"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_condattr_t" ref="0x7f3417a0" loc="217:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_condattr_t" ref="0x7f3414e8"/></type-tag>
        <typename><typedef-ref name="pthread_condattr_t" ref="0x7f3417a0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="heap_t" ref="0x7eba2328" loc="54:/opt/tinyos-2.x/tos/lib/tossim/heap.h">
      <documentation loc="42:/opt/tinyos-2.x/tos/lib/tossim/heap.h">
        <short>&#10;</short>
        <long>&#10; @author Philip Levis&#10;</long>
      </documentation>
      <type-tag size="I:12" alignment="I:4"><struct-ref name="heap" ref="0x7eba3df0"/>
        <typename><typedef-ref name="heap_t" ref="0x7eba2328"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nxle_uint16_t" ref="0x7f450e10" loc="400:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nxle_uint16_t">
        <typename><typedef-ref name="nxle_uint16_t" ref="0x7f450e10"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_log_channel_t" ref="0x7ec320e0" loc="53:/opt/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_log_channel" ref="0x7ec33a10"/>
        <typename><typedef-ref name="sim_log_channel_t" ref="0x7ec320e0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int" ref="0x7f3d0b78" loc="94:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_int" ref="0x7f3d0b78"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_once_t" ref="0x7f340188" loc="226:/usr/include/cygwin/types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f341ee8"/>
        <typename><typedef-ref name="pthread_once_t" ref="0x7f340188"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_ssize_t" ref="0x7f401da8" loc="18:/usr/include/sys/_types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="_ssize_t" ref="0x7f401da8"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint" ref="0x7f3c01f0" loc="100:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint" ref="0x7f3c01f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="am_group_t" ref="0x7e875c90" loc="11:/opt/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="am_group_t" ref="0x7e875c90"/></typename>
      </type-int>
    </typedef>
    <typedef name="__blkcnt32_t" ref="0x7f380570" loc="63:/usr/include/cygwin/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__blkcnt32_t" ref="0x7f380570"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR3C_t" ref="0x7dbd90c0" loc="256:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbdaa98"/>
        <typename><typedef-ref name="Atm128_TCCR3C_t" ref="0x7dbd90c0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint_least8_t" ref="0x7fe80058" loc="39:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint_least8_t" ref="0x7fe80058"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT1H_t" ref="0x7dbd9290" loc="260:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT1H_t" ref="0x7dbd9290"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT3L_t" ref="0x7dbd9800" loc="263:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT3L_t" ref="0x7dbd9800"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast32_t" ref="0x7fe70458" loc="53:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint_fast32_t" ref="0x7fe70458"/></typename>
      </type-int>
    </typedef>
    <typedef name="addr_t" ref="0x7f360bf0" loc="200:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        <typename><typedef-ref name="addr_t" ref="0x7f360bf0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="blksize_t" ref="0x7f3803a8" loc="58:/usr/include/cygwin/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="blksize_t" ref="0x7f3803a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least64_t" ref="0x7fea0e48" loc="37:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int_least64_t" ref="0x7fea0e48"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ETIFR_t" ref="0x7dbd3950" loc="315:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbd3700"/>
        <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x7dbd3950"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__pid_t" ref="0x7f3d01d0" loc="20:/usr/include/machine/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__pid_t" ref="0x7f3d01d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT2_t" ref="0x7dbe63c0" loc="106:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT2_t" ref="0x7dbe63c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1AL_t" ref="0x7dbd9ba0" loc="267:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1AL_t" ref="0x7dbd9ba0"/></typename>
      </type-int>
    </typedef>
    <typedef name="dsr_route_error_t" ref="0x7e3f3a90" loc="125:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-tag size="I:5" alignment="I:1"><nx_struct-ref ref="0x7e3f3708"/>
        <typename><typedef-ref name="dsr_route_error_t" ref="0x7e3f3a90"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_event_t" ref="0x7ec80eb0" loc="43:/opt/tinyos-2.x/tos/lib/tossim/sim_event_queue.h">
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x7ec80ce0"/>
        <typename><typedef-ref name="sim_event_t" ref="0x7ec80eb0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="error_t" ref="0x7e830010" loc="47:/opt/tinyos-2.x/tos/types/TinyError.h">
      <documentation loc="23:/opt/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10;</short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.6 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="error_t" ref="0x7e830010"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_SFIOR_t" ref="0x7dbe0af8" loc="169:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe08a8"/>
        <typename><typedef-ref name="Atm128_SFIOR_t" ref="0x7dbe0af8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="int_least8_t" ref="0x7fea08d0" loc="34:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int_least8_t" ref="0x7fea08d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="FILE" ref="0x7f1407c8" loc="50:/usr/include/stdio.h">
      <type-tag size="I:104" alignment="I:4"><struct-ref name="__sFILE64" ref="0x7f192dc8"/>
        <typename><typedef-ref name="FILE" ref="0x7f1407c8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_mbstate_t" ref="0x7f3e1020" loc="35:/usr/include/sys/_types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f3f0db0"/>
        <typename><typedef-ref name="_mbstate_t" ref="0x7f3e1020"/></typename>
      </type-tag>
    </typedef>
    <typedef name="dsr_ack_t" ref="0x7e3f1820" loc="171:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-tag size="I:5" alignment="I:1"><nx_struct-ref ref="0x7e3f1568"/>
        <typename><typedef-ref name="dsr_ack_t" ref="0x7e3f1820"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_ADCL_t" ref="0x7e757228" loc="152:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ADCL_t" ref="0x7e757228"/></typename>
      </type-int>
    </typedef>
    <typedef name="radio_stats_t" ref="0x7e868bf8" loc="110:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:18" alignment="I:2"><struct-ref name="radio_stats" ref="0x7e870d98"/>
        <typename><typedef-ref name="radio_stats_t" ref="0x7e868bf8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="clockid_t" ref="0x7f3a1d58" loc="256:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="clockid_t" ref="0x7f3a1d58"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR1H_t" ref="0x7dbd6078" loc="282:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR1H_t" ref="0x7dbd6078"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR3L_t" ref="0x7dbd65e8" loc="285:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR3L_t" ref="0x7dbd65e8"/></typename>
      </type-int>
    </typedef>
    <typedef name="gid_t" ref="0x7f371858" loc="98:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="gid_t" ref="0x7f371858"/></typename>
      </type-int>
    </typedef>
    <typedef name="vm_offset_t" ref="0x7f370cd8" loc="163:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="vm_offset_t" ref="0x7f370cd8"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_packet_t" ref="0x7e884bc0" loc="51:/opt/tinyos-2.x/tos/lib/tossim/sim_packet.h">
      <documentation loc="24:/opt/tinyos-2.x/tos/lib/tossim/sim_packet.h">
        <short>&#10;&#10; TOSSIM packet abstract data type, so C++ code can call into nesC&#10; code that does the native-to-network type translation.&#10;&#10;</short>
        <long>&#10;&#10; TOSSIM packet abstract data type, so C++ code can call into nesC&#10; code that does the native-to-network type translation.&#10;&#10; @author Philip Levis&#10; @date   Jan 2 2006&#10;</long>
      </documentation>
      <type-tag size="I:0" alignment="I:1"><struct-ref name="sim_packet" ref="0x7e884908"/>
        <typename><typedef-ref name="sim_packet_t" ref="0x7e884bc0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__uid16_t" ref="0x7f380ee8" loc="84:/usr/include/cygwin/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__uid16_t" ref="0x7f380ee8"/></typename>
      </type-int>
    </typedef>
    <typedef name="int8_t" ref="0x7feb0930" loc="18:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int8_t" ref="0x7feb0930"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_log_output_t" ref="0x7ec33880" loc="46:/opt/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-tag size="I:8" alignment="I:4"><struct-ref name="sim_log_output" ref="0x7ec33470"/>
        <typename><typedef-ref name="sim_log_output_t" ref="0x7ec33880"/></typename>
      </type-tag>
    </typedef>
    <typedef name="suseconds_t" ref="0x7f3a03c0" loc="266:/usr/include/sys/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="suseconds_t" ref="0x7f3a03c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="sigset_t" ref="0x7ead1c20" loc="18:/usr/include/sys/signal.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="sigset_t" ref="0x7ead1c20"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128Adcsra_t" ref="0x7e758e70" loc="149:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7e758a80"/>
        <typename><typedef-ref name="Atm128Adcsra_t" ref="0x7e758e70"/></typename>
      </type-tag>
    </typedef>
    <typedef name="T32khz" ref="0x7e5390e0" loc="30:/opt/tinyos-2.x/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7e7f3e88"/>
        <typename><typedef-ref name="T32khz" ref="0x7e5390e0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_short" ref="0x7f3d0998" loc="93:/usr/include/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="u_short" ref="0x7f3d0998"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int_least32_t" ref="0x7f421808" loc="76:/usr/include/machine/_types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__int_least32_t" ref="0x7f421808"/></typename>
      </type-int>
    </typedef>
    <typedef name="vm_size_t" ref="0x7f370ec0" loc="168:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="vm_size_t" ref="0x7f370ec0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__dev16_t" ref="0x7f390e10" loc="47:/usr/include/cygwin/types.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__dev16_t" ref="0x7f390e10"/></typename>
      </type-int>
    </typedef>
    <typedef name="__gid32_t" ref="0x7f371688" loc="96:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__gid32_t" ref="0x7f371688"/></typename>
      </type-int>
    </typedef>
    <typedef name="ptrdiff_t" ref="0x7f3e00c8" loc="151:/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/stddef.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="ptrdiff_t" ref="0x7f3e00c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="blkcnt_t" ref="0x7f380930" loc="66:/usr/include/cygwin/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="blkcnt_t" ref="0x7f380930"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_header_t" ref="0x7e8731b0" loc="12:/opt/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0x7e874a10"/>
        <typename><typedef-ref name="tossim_header_t" ref="0x7e8731b0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="packet_id_t" ref="0x7e4d3ee0" loc="44:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="packet_id_t" ref="0x7e4d3ee0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint32_t" ref="0x7fea04e0" loc="28:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7fea04e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_uint64_t" ref="0x7f4404f0" loc="402:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:1" network="nxle_uint64_t">
        <typename><typedef-ref name="nxle_uint64_t" ref="0x7f4404f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="dsr_option_not_supported_rei_t" ref="0x7e3f2a38" loc="139:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-tag size="I:1" alignment="I:1"><nx_struct-ref ref="0x7e3f2850"/>
        <typename><typedef-ref name="dsr_option_not_supported_rei_t" ref="0x7e3f2a38"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_fpos64_t" ref="0x7f1b04e0" loc="115:/usr/include/sys/reent.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="_fpos64_t" ref="0x7f1b04e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint8_t" ref="0x7f461040" loc="389:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_uint8_t" ref="0x7f461040"/></typename>
      </type-int>
    </typedef>
    <typedef name="uintptr_t" ref="0x7fe70a10" loc="62:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uintptr_t" ref="0x7fe70a10"/></typename>
      </type-int>
    </typedef>
    <typedef name="caddr_t" ref="0x7f3b1238" loc="126:/usr/include/sys/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        <typename><typedef-ref name="caddr_t" ref="0x7f3b1238"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="Atm128_TCNT3H_t" ref="0x7dbd9630" loc="262:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT3H_t" ref="0x7dbd9630"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast64_t" ref="0x7fe70660" loc="54:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint_fast64_t" ref="0x7fe70660"/></typename>
      </type-int>
    </typedef>
    <typedef name="__uint16_t" ref="0x7f430aa0" loc="37:/usr/include/machine/_types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__uint16_t" ref="0x7f430aa0"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_char" ref="0x7f3d07b8" loc="92:/usr/include/sys/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="u_char" ref="0x7f3d07b8"/></typename>
      </type-int>
    </typedef>
    <typedef name="mcu_power_t" ref="0x7e768438" loc="114:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="mcu_power_t" ref="0x7e768438"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast16_t" ref="0x7fe80ae0" loc="47:/usr/include/stdint.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int_fast16_t" ref="0x7fe80ae0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1AH_t" ref="0x7dbd99d0" loc="266:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1AH_t" ref="0x7dbd99d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1CL_t" ref="0x7dbd73b0" loc="271:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1CL_t" ref="0x7dbd73b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="fpos_t" ref="0x7f140998" loc="54:/usr/include/stdio.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="fpos_t" ref="0x7f140998"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR1B_t" ref="0x7dbdce08" loc="235:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbdc9d0"/>
        <typename><typedef-ref name="Atm128_TCCR1B_t" ref="0x7dbdce08"/></typename>
      </type-tag>
    </typedef>
    <typedef name="div_t" ref="0x7ee82868" loc="32:/usr/include/stdlib.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7ee82618"/>
        <typename><typedef-ref name="div_t" ref="0x7ee82868"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_gain_noise_t" ref="0x7e9b7570" loc="6:/opt/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_gain_noise" ref="0x7e9b71a8"/>
        <typename><typedef-ref name="sim_gain_noise_t" ref="0x7e9b7570"/></typename>
      </type-tag>
    </typedef>
    <typedef name="size_t" ref="0x7f3e0748" loc="213:/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/stddef.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="size_t" ref="0x7f3e0748"/></typename>
      </type-int>
    </typedef>
    <typedef name="iterator_end_t" ref="0x7e407960" loc="35:../../../tos/types/Iterator.h">
      <documentation loc="32:../../../tos/interfaces/IndexedIterator.nc">
        <short>&#10;&#10; Iteration operations using indices.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Iteration operations using indices.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="iterator_end_t" ref="0x7e407960"/></typename>
      </type-int>
    </typedef>
    <typedef name="__uint8_t" ref="0x7f4306d0" loc="27:/usr/include/machine/_types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__uint8_t" ref="0x7f4306d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR0_t" ref="0x7dbe7bd0" loc="101:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe75c0"/>
        <typename><typedef-ref name="Atm128_TCCR0_t" ref="0x7dbe7bd0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__loff_t" ref="0x7f3d03d8" loc="22:/usr/include/machine/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__loff_t" ref="0x7f3d03d8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ino64_t" ref="0x7f371c48" loc="107:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__ino64_t" ref="0x7f371c48"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_id_t" ref="0x7e875548" loc="6:/opt/tinyos-2.x/tos/types/AM.h">
      <documentation loc="25:/opt/tinyos-2.x/tos/lib/tossim/platform_message.h">
        <short>&#10; Defining the platform-independently named packet structures to be the&#10; tossim structures.&#10;&#10;</short>
        <long>&#10; Defining the platform-independently named packet structures to be the&#10; tossim structures.&#10;&#10; @author Philip Levis&#10; @date   Dec 2 2005&#10; Revision:  $Revision: 1.4 $&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_am_id_t" ref="0x7e875548"/></typename>
      </type-int>
    </typedef>
    <typedef name="vm_object_t" ref="0x7f3600c8" loc="173:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-void size="I:1" alignment="I:1"></type-void>
        <typename><typedef-ref name="vm_object_t" ref="0x7f3600c8"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="message_header_t" ref="0x7e8668b0" loc="44:/opt/tinyos-2.x/tos/lib/tossim/platform_message.h">
      <type-tag size="I:7" alignment="I:1"><union-ref name="message_header" ref="0x7e8664c8"/>
        <typename><typedef-ref name="message_header_t" ref="0x7e8668b0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="gain_entry_t" ref="0x7e9c6dc8" loc="49:/opt/tinyos-2.x/tos/lib/tossim/sim_gain.h">
      <documentation loc="24:/opt/tinyos-2.x/tos/lib/tossim/sim_gain.h">
        <short>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.&#10;&#10;</short>
        <long>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0x7e9c67c0"/>
        <typename><typedef-ref name="gain_entry_t" ref="0x7e9c6dc8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="am_addr_t" ref="0x7e875e68" loc="12:/opt/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0x7e875e68"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int32_t" ref="0x7f471998" loc="387:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="long" size="I:4" alignment="I:1" network="nx_int32_t">
        <typename><typedef-ref name="nx_int32_t" ref="0x7f471998"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ADCH_t" ref="0x7e757058" loc="151:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ADCH_t" ref="0x7e757058"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_least16_t" ref="0x7fe80240" loc="40:/usr/include/stdint.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint_least16_t" ref="0x7fe80240"/></typename>
      </type-int>
    </typedef>
    <typedef name="dsr_ack_request_t" ref="0x7e3f1020" loc="153:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-tag size="I:1" alignment="I:1"><nx_struct-ref ref="0x7e3f2e18"/>
        <typename><typedef-ref name="dsr_ack_request_t" ref="0x7e3f1020"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__tzinfo_type" ref="0x7ead63a0" loc="90:/usr/include/time.h">
      <type-tag size="I:64" alignment="I:4"><struct-ref name="__tzinfo_struct" ref="0x7eae1df0"/>
        <typename><typedef-ref name="__tzinfo_type" ref="0x7ead63a0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint8_t" ref="0x7fea0110" loc="24:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7fea0110"/></typename>
      </type-int>
    </typedef>
    <typedef name="_types_fd_set" ref="0x7f3a1980" loc="235:/usr/include/sys/types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref name="_types_fd_set" ref="0x7f3a10c8"/>
        <typename><typedef-ref name="_types_fd_set" ref="0x7f3a1980"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__uint_least16_t" ref="0x7f430e58" loc="47:/usr/include/machine/_types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__uint_least16_t" ref="0x7f430e58"/></typename>
      </type-int>
    </typedef>
    <typedef name="graph_vertex_id_t" ref="0x7df52d40" loc="35:../../../tos/lib/data/graph/Graph.h">
      <documentation loc="32:../../../tos/lib/netarch/dsr/SimpleLinkCacheC.nc">
        <short>&#10;&#10; A simple link cache that does not automatically remove links and&#10;&#10; assigns a weight of 1 to all links.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; A simple link cache that does not automatically remove links and&#10;&#10; assigns a weight of 1 to all links.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="graph_vertex_id_t" ref="0x7df52d40"/></typename>
      </type-int>
    </typedef>
    <typedef name="time_t" ref="0x7f3c0590" loc="109:/usr/include/sys/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="time_t" ref="0x7f3c0590"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int8_t" ref="0x7f461d78" loc="395:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="signed char" size="I:1" alignment="I:1" network="nxle_int8_t">
        <typename><typedef-ref name="nxle_int8_t" ref="0x7f461d78"/></typename>
      </type-int>
    </typedef>
    <typedef name="lldiv_t" ref="0x7ee80360" loc="45:/usr/include/stdlib.h">
      <type-tag size="I:16" alignment="I:4"><struct-ref ref="0x7ee80110"/>
        <typename><typedef-ref name="lldiv_t" ref="0x7ee80360"/></typename>
      </type-tag>
    </typedef>
    <typedef name="dsr_node_unreachable_rei_t" ref="0x7e3f2608" loc="135:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-tag size="I:2" alignment="I:1"><nx_struct-ref ref="0x7e3f2420"/>
        <typename><typedef-ref name="dsr_node_unreachable_rei_t" ref="0x7e3f2608"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_attr_t" ref="0x7f351ee8" loc="215:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_attr_t" ref="0x7f351c38"/></type-tag>
        <typename><typedef-ref name="pthread_attr_t" ref="0x7f351ee8"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="pid_t" ref="0x7f3b17c8" loc="180:/usr/include/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pid_t" ref="0x7f3b17c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="timer_t" ref="0x7f3a0010" loc="261:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="timer_t" ref="0x7f3a0010"/></typename>
      </type-int>
    </typedef>
    <typedef name="_fpos_t" ref="0x7f1b0308" loc="111:/usr/include/sys/reent.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="_fpos_t" ref="0x7f1b0308"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_rwlockattr_t" ref="0x7f340b28" loc="228:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_rwlockattr_t" ref="0x7f340770"/></type-tag>
        <typename><typedef-ref name="pthread_rwlockattr_t" ref="0x7f340b28"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__uint64_t" ref="0x7f411010" loc="100:/usr/include/machine/_types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__uint64_t" ref="0x7f411010"/></typename>
      </type-int>
    </typedef>
    <typedef name="tlv_key_t" ref="0x7e3e5690" loc="35:../../../tos/lib/netarch/tlv/Tlv.h">
      <documentation loc="32:../../../tos/lib/netarch/tlv/TlvSinglePacket.nc">
        <short>&#10;&#10; Access data stored in a generalized Type-Length-Value (TLV) block&#10;&#10; within a packet. </short>
        <long>&#10;&#10; Access data stored in a generalized Type-Length-Value (TLV) block&#10;&#10; within a packet.  This interface allows at most one instance of a&#10;&#10; type.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="tlv_key_t" ref="0x7e3e5690"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR0_t" ref="0x7dbe6010" loc="103:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR0_t" ref="0x7dbe6010"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int32_t" ref="0x7f450428" loc="397:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="long" size="I:4" alignment="I:1" network="nxle_int32_t">
        <typename><typedef-ref name="nxle_int32_t" ref="0x7f450428"/></typename>
      </type-int>
    </typedef>
    <typedef name="tlv_block_t" ref="0x7e3e4398" loc="48:../../../tos/lib/netarch/tlv/Tlv.h">
      <type-tag size="I:1" alignment="I:1"><nx_struct-ref ref="0x7e3e4148"/>
        <typename><typedef-ref name="tlv_block_t" ref="0x7e3e4398"/></typename>
      </type-tag>
    </typedef>
    <typedef name="va_list" ref="0x7ec444f8" loc="106:/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/stdarg.h">
      <documentation loc="24:/opt/tinyos-2.x/tos/lib/tossim/sim_log.h">
        <short>&#10; The TOSSIM logging system.</short>
        <long>&#10; The TOSSIM logging system. Unlike in TinyOS 1.x, this logging&#10; system supports an arbitrary number of channels, denoted by&#10; a string identifier. A channel can be connected to any number&#10; of outputs, and a debug statement can be associated with any&#10; number of channels.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0x7ff202f8"/></type-tag>
        <typename><typedef-ref name="va_list" ref="0x7ec444f8"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__off_t" ref="0x7f3d0010" loc="19:/usr/include/machine/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__off_t" ref="0x7f3d0010"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast8_t" ref="0x7fe80918" loc="46:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int_fast8_t" ref="0x7fe80918"/></typename>
      </type-int>
    </typedef>
    <typedef name="_LOCK_T" ref="0x7f411b78" loc="14:/usr/include/sys/lock.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-void size="I:1" alignment="I:1"></type-void>
        <typename><typedef-ref name="_LOCK_T" ref="0x7f411b78"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="tossim_metadata_t" ref="0x7e873ca0" loc="22:/opt/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:4" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0x7e873790"/>
        <typename><typedef-ref name="tossim_metadata_t" ref="0x7e873ca0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="am_id_t" ref="0x7e875ac0" loc="10:/opt/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="am_id_t" ref="0x7e875ac0"/></typename>
      </type-int>
    </typedef>
    <typedef name="graph_edge_unit_weight_t" ref="0x7df50110" loc="37:../../../tos/lib/data/graph/Graph.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="graph_edge_unit_weight_t" ref="0x7df50110"/></typename>
      </type-int>
    </typedef>
    <typedef name="intmax_t" ref="0x7fe70bf8" loc="66:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="intmax_t" ref="0x7fe70bf8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128TimerCtrlCapture_t" ref="0x7dbdcc20" loc="232:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbdc9d0"/>
        <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x7dbdcc20"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR2_t" ref="0x7dbe61f0" loc="105:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe75c0"/>
        <typename><typedef-ref name="Atm128_TCCR2_t" ref="0x7dbe61f0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint16_t" ref="0x7fea02f8" loc="25:/usr/include/stdint.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7fea02f8"/></typename>
      </type-int>
    </typedef>
    <typedef name="dsr_route_reply_t" ref="0x7e3f5e98" loc="101:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-tag size="I:0" alignment="I:1"><nx_struct-ref ref="0x7e3f5cb0"/>
        <typename><typedef-ref name="dsr_route_reply_t" ref="0x7e3f5e98"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int8_t" ref="0x7f3602b0" loc="178:/usr/include/cygwin/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="u_int8_t" ref="0x7f3602b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT1L_t" ref="0x7dbd9460" loc="261:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT1L_t" ref="0x7dbd9460"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3CH_t" ref="0x7dbd7cc0" loc="278:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3CH_t" ref="0x7dbd7cc0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_group_t" ref="0x7e875720" loc="7:/opt/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_am_group_t" ref="0x7e875720"/></typename>
      </type-int>
    </typedef>
    <typedef name="message_metadata_t" ref="0x7e864198" loc="52:/opt/tinyos-2.x/tos/lib/tossim/platform_message.h">
      <type-tag size="I:4" alignment="I:1"><union-ref name="message_metadata" ref="0x7e866ea0"/>
        <typename><typedef-ref name="message_metadata_t" ref="0x7e864198"/></typename>
      </type-tag>
    </typedef>
    <typedef name="dsr_route_request_out_t" ref="0x7e4b4ca8" loc="64:../../../tos/lib/netarch/dsr/DsrControl.h">
      <documentation loc="32:../../../tos/lib/netarch/dsr/DsrC.nc">
        <short>&#10;&#10; Connects the DSR core to the message engine.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Connects the DSR core to the message engine.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7e4b4968"/>
        <typename><typedef-ref name="dsr_route_request_out_t" ref="0x7e4b4ca8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="fd_mask" ref="0x7f3b1f28" loc="225:/usr/include/sys/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="fd_mask" ref="0x7f3b1f28"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint32_t" ref="0x7f4616e0" loc="391:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
        <typename><typedef-ref name="nx_uint32_t" ref="0x7f4616e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="hashtable_t" ref="0x7ec44c88" loc="10:/opt/tinyos-2.x/tos/lib/tossim/hashtable.h">
      <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x7ec44ab8"/>
        <typename><typedef-ref name="hashtable_t" ref="0x7ec44c88"/></typename>
      </type-tag>
    </typedef>
    <typedef name="dev_t" ref="0x7f3801e0" loc="50:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="dev_t" ref="0x7f3801e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="route_cache_link_id_t" ref="0x7e1217c8" loc="35:../../../tos/lib/netarch/dsr/RouteCache.h">
      <documentation loc="32:../../../tos/lib/netarch/dsr/DsrControlP.nc">
        <short>&#10;&#10; Core component implementing DSR (Dynamic Source Routing) as described&#10;&#10; in RFC 4728. </short>
        <long>&#10;&#10; Core component implementing DSR (Dynamic Source Routing) as described&#10;&#10; in RFC 4728.  A modified DSR Options format that is better suited for&#10;&#10; WSNs is used here and described in DsrOptions.h.  Currently a work in&#10;&#10; progress.&#10;&#10;&#10;&#10; Implemented:&#60;ul>&#10;&#10; &#60;li>3.3.1. Caching Overheard Routing Information&#10;&#10; &#60;li>3.4.1. Packet Salvaging&#10;&#10; &#60;li>8.1.1. Originating a Packet&#10;&#10; &#60;li>8.1.2. Adding a DSR Options Header to a Packet&#10;&#10; &#60;li>8.1.3. Adding a DSR Source Route Option to a Packet&#10;&#10; &#60;li>8.1.4. Processing a Received Packet&#10;&#10; &#60;li>8.2.1. Originating a Route Request&#10;&#10; &#60;li>8.2.4. Originating a Route Reply&#10;&#10; &#60;li>8.2.6. Processing a Received Route Reply Option&#10;&#10; &#60;li>8.3.6. Salvaging a Packet&#10;&#10; &#60;/ul>&#10;&#10; Planned:&#60;ul>&#10;&#10; &#60;li>3.3.2. Replying to Route Requests Using Cached Routes&#10;&#10; &#60;li>3.3.3. Route Request Hop Limits&#10;&#10; &#60;li>3.4.2. Queued Packets Destined over a Broken Link&#10;&#10; &#60;li>3.4.3. Automatic Route Shortening&#10;&#10; &#60;li>3.4.4. Increased Spreading of Route Error Messages&#10;&#10; &#60;li>8.1.5. Processing a Received DSR Source Route Option&#10;&#10; &#60;li>8.2.2. Processing a Received Route Request Option&#10;&#10; &#60;li>8.2.3. Generating a Route Reply Using the Route Cache&#10;&#10; &#60;li>8.2.5. Preventing Route Reply Storms&#10;&#10; &#60;li>8.3.1. Using Link-Layer Acknowledgements&#10;&#10; &#60;li>8.3.4. Originating a Route Error&#10;&#10; &#60;li>8.3.5. Processing a Received Route Error Option&#10;&#10; &#60;li>8.5. IP Fragmentation and Reassembly&#10;&#10; &#60;/ul>&#10;&#10; Not Planned:&#60;ul>&#10;&#10; &#60;li>3.5. Optional DSR Flow State Extension&#10;&#10; &#60;li>8.1.6. Handling an Unknown DSR Option&#10;&#10; &#60;li>8.3.2. Using Passive Acknowledgements&#10;&#10; &#60;li>8.3.3. Using Network-Layer Acknowledgements&#10;&#10; &#60;li>8.4. Multiple Network Interface Support&#10;&#10; &#60;li>8.6. Flow State Processing&#10;&#10; &#60;/ul>&#10;&#10;&#10;&#10; Account for upper layer data length, might not have enough room.&#10;&#10; Uses ACKs, thus requiring all all links to be bidirectional.&#10;&#10; Allow intercepts.&#10;&#10; Check TLV add calls.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="route_cache_link_id_t" ref="0x7e1217c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_int32_t" ref="0x7f360660" loc="186:/usr/include/cygwin/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_int32_t" ref="0x7f360660"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsfilcnt_t" ref="0x7f380d00" loc="79:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="fsfilcnt_t" ref="0x7f380d00"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast8_t" ref="0x7fe70088" loc="51:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint_fast8_t" ref="0x7fe70088"/></typename>
      </type-int>
    </typedef>
    <typedef name="dsr_route_request_in_t" ref="0x7e4b3588" loc="71:../../../tos/lib/netarch/dsr/DsrControl.h">
      <type-tag size="I:16" alignment="I:2"><struct-ref ref="0x7e4b3268"/>
        <typename><typedef-ref name="dsr_route_request_in_t" ref="0x7e4b3588"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128Assr_t" ref="0x7dbe4458" loc="121:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe4208"/>
        <typename><typedef-ref name="Atm128Assr_t" ref="0x7dbe4458"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR3BL_t" ref="0x7dbd7af0" loc="277:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3BL_t" ref="0x7dbd7af0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int16_t" ref="0x7f471650" loc="386:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="short" size="I:2" alignment="I:1" network="nx_int16_t">
        <typename><typedef-ref name="nx_int16_t" ref="0x7f471650"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR1L_t" ref="0x7dbd6248" loc="283:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR1L_t" ref="0x7dbd6248"/></typename>
      </type-int>
    </typedef>
    <typedef name="graph_edge_list_t" ref="0x7df50bb0" loc="47:../../../tos/lib/data/graph/Graph.h">
      <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7df50960"/>
        <typename><typedef-ref name="graph_edge_list_t" ref="0x7df50bb0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="register_t" ref="0x7f360a10" loc="195:/usr/include/cygwin/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="register_t" ref="0x7f360a10"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ETIMSK_t" ref="0x7dbd57a8" loc="300:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbd5558"/>
        <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x7dbd57a8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="route_cache_node_id_t" ref="0x7e1219a0" loc="36:../../../tos/lib/netarch/dsr/RouteCache.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="route_cache_node_id_t" ref="0x7e1219a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128TimerControl_t" ref="0x7dbe79f0" loc="99:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <documentation loc="11:/opt/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer. </short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe75c0"/>
        <typename><typedef-ref name="Atm128TimerControl_t" ref="0x7dbe79f0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="ssize_t" ref="0x7f3b1998" loc="184:/usr/include/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="ssize_t" ref="0x7f3b1998"/></typename>
      </type-int>
    </typedef>
    <typedef name="sig_atomic_t" ref="0x7ea90488" loc="9:/usr/include/signal.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="sig_atomic_t" ref="0x7ea90488"/></typename>
      </type-int>
    </typedef>
    <typedef name="int32_t" ref="0x7feb0cb0" loc="20:/usr/include/stdint.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int32_t" ref="0x7feb0cb0"/></typename>
      </type-int>
    </typedef>
    <typedef name="data_timer_time_t" ref="0x7e0f6ea8" loc="35:../../../tos/lib/data/timer/DataTimer.h">
      <documentation loc="32:../../../tos/lib/data/timer/DataTimer.nc">
        <short>&#10;&#10; Access a timed series of data items. </short>
        <long>&#10;&#10; Access a timed series of data items.  The client is notified as each&#10;&#10; item expires.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="data_timer_time_t" ref="0x7e0f6ea8"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint64_t" ref="0x7fea06e8" loc="30:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint64_t" ref="0x7fea06e8"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_long" ref="0x7f3d0d58" loc="95:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_long" ref="0x7f3d0d58"/></typename>
      </type-int>
    </typedef>
    <typedef name="__nesc_atomic_t" ref="0x7e774878" loc="88:/opt/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__nesc_atomic_t" ref="0x7e774878"/></typename>
      </type-int>
    </typedef>
    <typedef name="unicast_count_msg_t" ref="0x7e7f6010" loc="66:UnicastCountToLeds.h">
      <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="unicast_count_msg" ref="0x7f460c78"/>
        <typename><typedef-ref name="unicast_count_msg_t" ref="0x7e7f6010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nxle_int64_t" ref="0x7f450770" loc="398:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="long long" size="I:8" alignment="I:1" network="nxle_int64_t">
        <typename><typedef-ref name="nxle_int64_t" ref="0x7f450770"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int16_t" ref="0x7f4500e0" loc="396:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="short" size="I:2" alignment="I:1" network="nxle_int16_t">
        <typename><typedef-ref name="nxle_int16_t" ref="0x7f4500e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_t" ref="0x7f351218" loc="211:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_t" ref="0x7f360f40"/></type-tag>
        <typename><typedef-ref name="pthread_t" ref="0x7f351218"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="imaxdiv_t" ref="0x7fe30730" loc="231:/usr/include/inttypes.h">
      <type-tag size="I:16" alignment="I:4"><struct-ref ref="0x7fe304e0"/>
        <typename><typedef-ref name="imaxdiv_t" ref="0x7fe30730"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR1A_t" ref="0x7dbde1f8" loc="196:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbdfd08"/>
        <typename><typedef-ref name="Atm128_TCCR1A_t" ref="0x7dbde1f8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="timespec_t" ref="0x7f391e68" loc="26:/usr/include/cygwin/types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref name="timespec" ref="0x7f3c0700"/>
        <typename><typedef-ref name="timespec_t" ref="0x7f391e68"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint_least32_t" ref="0x7fe80428" loc="41:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint_least32_t" ref="0x7fe80428"/></typename>
      </type-int>
    </typedef>
    <typedef name="wint_t" ref="0x7f3f0010" loc="354:/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/stddef.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="wint_t" ref="0x7f3f0010"/></typename>
      </type-int>
    </typedef>
    <typedef name="message_footer_t" ref="0x7e866d08" loc="48:/opt/tinyos-2.x/tos/lib/tossim/platform_message.h">
      <type-tag size="I:2" alignment="I:1"><union-ref name="message_footer" ref="0x7e866a40"/>
        <typename><typedef-ref name="message_footer_t" ref="0x7e866d08"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR3BH_t" ref="0x7dbd7920" loc="276:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3BH_t" ref="0x7dbd7920"/></typename>
      </type-int>
    </typedef>
    <typedef name="__blkcnt64_t" ref="0x7f380758" loc="64:/usr/include/cygwin/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__blkcnt64_t" ref="0x7f380758"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsblkcnt_t" ref="0x7f380b18" loc="74:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="fsblkcnt_t" ref="0x7f380b18"/></typename>
      </type-int>
    </typedef>
    <typedef name="off_t" ref="0x7f390278" loc="37:/usr/include/cygwin/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="off_t" ref="0x7f390278"/></typename>
      </type-int>
    </typedef>
    <typedef name="__uint_least32_t" ref="0x7f4219e8" loc="77:/usr/include/machine/_types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__uint_least32_t" ref="0x7f4219e8"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int64_t" ref="0x7f471ce0" loc="388:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="long long" size="I:8" alignment="I:1" network="nx_int64_t">
        <typename><typedef-ref name="nx_int64_t" ref="0x7f471ce0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128TimerCtrlClock_t" ref="0x7dbdace8" loc="250:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbdaa98"/>
        <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x7dbdace8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__int8_t" ref="0x7f4304e8" loc="26:/usr/include/machine/_types.h">
      <documentation loc="24:/opt/tinyos-2.x/tos/lib/tossim/tos.h">
        <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10;</short>
        <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__int8_t" ref="0x7f4304e8"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast16_t" ref="0x7fe70270" loc="52:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint_fast16_t" ref="0x7fe70270"/></typename>
      </type-int>
    </typedef>
    <typedef name="timestruc_t" ref="0x7f3900a8" loc="31:/usr/include/cygwin/types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref name="timespec" ref="0x7f3c0700"/>
        <typename><typedef-ref name="timestruc_t" ref="0x7f3900a8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR3AL_t" ref="0x7dbd7750" loc="275:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3AL_t" ref="0x7dbd7750"/></typename>
      </type-int>
    </typedef>
    <typedef name="uintmax_t" ref="0x7fe70e00" loc="67:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uintmax_t" ref="0x7fe70e00"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_addr_t" ref="0x7e8758f8" loc="8:/opt/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
        <typename><typedef-ref name="nx_am_addr_t" ref="0x7e8758f8"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint16_t" ref="0x7f461390" loc="390:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
        <typename><typedef-ref name="nx_uint16_t" ref="0x7f461390"/></typename>
      </type-int>
    </typedef>
    <typedef name="_flock_t" ref="0x7f3e11f0" loc="37:/usr/include/sys/_types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-void size="I:1" alignment="I:1"></type-void>
        <typename><typedef-ref name="_flock_t" ref="0x7f3e11f0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="int_fast32_t" ref="0x7fe80ca8" loc="48:/usr/include/stdint.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int_fast32_t" ref="0x7fe80ca8"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least16_t" ref="0x7fea0a98" loc="35:/usr/include/stdint.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="int_least16_t" ref="0x7fea0a98"/></typename>
      </type-int>
    </typedef>
    <typedef name="useconds_t" ref="0x7f3a01f8" loc="265:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="useconds_t" ref="0x7f3a01f8"/></typename>
      </type-int>
    </typedef>
    <typedef name="ldiv_t" ref="0x7ee82d90" loc="38:/usr/include/stdlib.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7ee82b40"/>
        <typename><typedef-ref name="ldiv_t" ref="0x7ee82d90"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int64_t" ref="0x7f360838" loc="190:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="u_int64_t" ref="0x7f360838"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_int16_t" ref="0x7f360488" loc="182:/usr/include/cygwin/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="u_int16_t" ref="0x7f360488"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TIFR_t" ref="0x7dbe2ae8" loc="154:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe2898"/>
        <typename><typedef-ref name="Atm128_TIFR_t" ref="0x7dbe2ae8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="siginfo_t" ref="0x7eab5a58" loc="133:/usr/include/cygwin/signal.h">
      <type-tag size="I:148" alignment="I:4"><struct-ref ref="0x7eab5240"/>
        <typename><typedef-ref name="siginfo_t" ref="0x7eab5a58"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sigevent_t" ref="0x7eac2228" loc="75:/usr/include/cygwin/signal.h">
      <type-tag size="I:20" alignment="I:4"><struct-ref name="sigevent" ref="0x7eac37c0"/>
        <typename><typedef-ref name="sigevent_t" ref="0x7eac2228"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR3A_t" ref="0x7dbde3e0" loc="199:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbdfd08"/>
        <typename><typedef-ref name="Atm128_TCCR3A_t" ref="0x7dbde3e0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint_least64_t" ref="0x7fe80630" loc="42:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint_least64_t" ref="0x7fe80630"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int32_t" ref="0x7f421250" loc="58:/usr/include/machine/_types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__int32_t" ref="0x7f421250"/></typename>
      </type-int>
    </typedef>
    <typedef name="tlv_t" ref="0x7e3e5d88" loc="42:../../../tos/lib/netarch/tlv/Tlv.h">
      <type-tag size="I:2" alignment="I:1"><nx_struct-ref ref="0x7e3e5ad0"/>
        <typename><typedef-ref name="tlv_t" ref="0x7e3e5d88"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_rwlock_t" ref="0x7f3405d8" loc="227:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_rwlock_t" ref="0x7f340320"/></type-tag>
        <typename><typedef-ref name="pthread_rwlock_t" ref="0x7f3405d8"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="packet_client_id_t" ref="0x7e4d3820" loc="43:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="packet_client_id_t" ref="0x7e4d3820"/></typename>
      </type-int>
    </typedef>
    <typedef name="double_t" ref="0x7ed717a8" loc="112:/usr/include/math.h">
      <type-float cname="double" size="I:8" alignment="I:8">
        <typename><typedef-ref name="double_t" ref="0x7ed717a8"/></typename>
      </type-float>
    </typedef>
    <typedef name="indexed_alloc_id_t" ref="0x7deded98" loc="35:../../../tos/lib/data/alloc/IndexedAlloc.h">
      <documentation loc="32:../../../tos/lib/data/alloc/IndexedAllocC.nc">
        <short>&#10;&#10; Pass-through configuration simplifies changes to the default IndexedAlloc&#10;&#10; implementation.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Pass-through configuration simplifies changes to the default IndexedAlloc&#10;&#10; implementation.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="indexed_alloc_id_t" ref="0x7deded98"/></typename>
      </type-int>
    </typedef>
    <typedef name="bool" ref="0x7ec91520" loc="57:/opt/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7ec91520"/></typename>
      </type-int>
    </typedef>
    <typedef name="__gid16_t" ref="0x7f3714a0" loc="95:/usr/include/cygwin/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__gid16_t" ref="0x7f3714a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_noise_hash_t" ref="0x7ea61508" loc="63:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <documentation loc="24:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10;</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <type-tag size="I:480" alignment="I:4"><struct-ref name="sim_noise_hash_t" ref="0x7ea62ac8"/>
        <typename><typedef-ref name="sim_noise_hash_t" ref="0x7ea61508"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__FILE" ref="0x7f172c38" loc="257:/usr/include/sys/reent.h">
      <type-tag size="I:104" alignment="I:4"><struct-ref name="__sFILE64" ref="0x7f192dc8"/>
        <typename><typedef-ref name="__FILE" ref="0x7f172c38"/></typename>
      </type-tag>
    </typedef>
    <typedef name="packet_send_action_t" ref="0x7e4d2cd8" loc="46:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="packet_send_action_t" ref="0x7e4d2cd8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__gnuc_va_list" ref="0x7f1c2770" loc="44:/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/stdarg.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0x7ff202f8"/></type-tag>
        <typename><typedef-ref name="__gnuc_va_list" ref="0x7f1c2770"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="nxle_uint8_t" ref="0x7f450ab8" loc="399:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nxle_uint8_t">
        <typename><typedef-ref name="nxle_uint8_t" ref="0x7f450ab8"/></typename>
      </type-int>
    </typedef>
    <typedef name="graph_edge_node_t" ref="0x7df50660" loc="42:../../../tos/lib/data/graph/Graph.h">
      <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7df50410"/>
        <typename><typedef-ref name="graph_edge_node_t" ref="0x7df50660"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_ICR3H_t" ref="0x7dbd6418" loc="284:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR3H_t" ref="0x7dbd6418"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3AH_t" ref="0x7dbd7580" loc="274:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3AH_t" ref="0x7dbd7580"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3CL_t" ref="0x7dbd7e90" loc="279:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3CL_t" ref="0x7dbd7e90"/></typename>
      </type-int>
    </typedef>
    <typedef name="int64_t" ref="0x7feb0e90" loc="21:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int64_t" ref="0x7feb0e90"/></typename>
      </type-int>
    </typedef>
    <typedef name="int16_t" ref="0x7feb0af0" loc="19:/usr/include/stdint.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="int16_t" ref="0x7feb0af0"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast64_t" ref="0x7fe80e90" loc="49:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int_fast64_t" ref="0x7fe80e90"/></typename>
      </type-int>
    </typedef>
    <typedef name="uid_t" ref="0x7f3712b8" loc="87:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uid_t" ref="0x7f3712b8"/></typename>
      </type-int>
    </typedef>
    <typedef name="_sig_func_ptr" ref="0x7eab0788" loc="193:/usr/include/cygwin/signal.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </function-parameters>
        </type-function>
        <typename><typedef-ref name="_sig_func_ptr" ref="0x7eab0788"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="message_t" ref="0x7e864ec0" loc="19:/opt/tinyos-2.x/tos/types/message.h">
      <type-tag size="I:49" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7e864528"/>
        <typename><typedef-ref name="message_t" ref="0x7e864ec0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nx_uint64_t" ref="0x7f461a30" loc="392:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:1" network="nx_uint64_t">
        <typename><typedef-ref name="nx_uint64_t" ref="0x7f461a30"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TIMSK_t" ref="0x7dbe37a8" loc="137:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbe3558"/>
        <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x7dbe37a8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="loff_t" ref="0x7f390448" loc="43:/usr/include/cygwin/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="loff_t" ref="0x7f390448"/></typename>
      </type-int>
    </typedef>
    <typedef name="dsr_source_route_t" ref="0x7e3f03a8" loc="192:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <type-tag size="I:1" alignment="I:1"><nx_struct-ref ref="0x7e3f0088"/>
        <typename><typedef-ref name="dsr_source_route_t" ref="0x7e3f03a8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="node_t" ref="0x7eb92010" loc="54:/opt/tinyos-2.x/tos/lib/tossim/heap.c">
      <type-tag size="I:12" alignment="I:4"><struct-ref name="node" ref="0x7eb94b60"/>
        <typename><typedef-ref name="node_t" ref="0x7eb92010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nx_int8_t" ref="0x7f471308" loc="385:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="signed char" size="I:1" alignment="I:1" network="nx_int8_t">
        <typename><typedef-ref name="nx_int8_t" ref="0x7f471308"/></typename>
      </type-int>
    </typedef>
    <typedef name="__tzrule_type" ref="0x7eae1c50" loc="83:/usr/include/time.h">
      <type-tag size="I:28" alignment="I:4"><struct-ref name="__tzrule_struct" ref="0x7eae1338"/>
        <typename><typedef-ref name="__tzrule_type" ref="0x7eae1c50"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_noise_node_t" ref="0x7ea56420" loc="75:/opt/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-tag size="I:68" alignment="I:4"><struct-ref name="sim_noise_node_t" ref="0x7ea616a0"/>
        <typename><typedef-ref name="sim_noise_node_t" ref="0x7ea56420"/></typename>
      </type-tag>
    </typedef>
    <typedef name="id_t" ref="0x7f370010" loc="118:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="id_t" ref="0x7f370010"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_mutex_t" ref="0x7f351660" loc="212:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_mutex_t" ref="0x7f3513b0"/></type-tag>
        <typename><typedef-ref name="pthread_mutex_t" ref="0x7f351660"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="pthread_cond_t" ref="0x7f341be8" loc="218:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_cond_t" ref="0x7f341938"/></type-tag>
        <typename><typedef-ref name="pthread_cond_t" ref="0x7f341be8"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="pthread_key_t" ref="0x7f351aa0" loc="214:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_key_t" ref="0x7f3517f0"/></type-tag>
        <typename><typedef-ref name="pthread_key_t" ref="0x7f351aa0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="dsr_route_request_t" ref="0x7e3f5830" loc="85:../../../tos/lib/netarch/dsr/DsrOptions.h">
      <documentation loc="32:../../../tos/lib/netarch/dsr/DsrOptionsC.nc">
        <short>&#10;&#10; Provides access to the various types of DSR Options.&#10;&#10;&#10;&#10;</short>
        <long>&#10;&#10; Provides access to the various types of DSR Options.&#10;&#10;&#10;&#10; @author Ryan Stinnett&#10;&#10;</long>
      </documentation>
      <type-tag size="I:1" alignment="I:1"><nx_struct-ref ref="0x7e3f5548"/>
        <typename><typedef-ref name="dsr_route_request_t" ref="0x7e3f5830"/></typename>
      </type-tag>
    </typedef>
    <typedef name="ino_t" ref="0x7f371e18" loc="109:/usr/include/cygwin/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="ino_t" ref="0x7f371e18"/></typename>
      </type-int>
    </typedef>
    <typedef name="packet_send_entry_t" ref="0x7e4cac20" loc="93:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7e4ca9d0"/>
        <typename><typedef-ref name="packet_send_entry_t" ref="0x7e4cac20"/></typename>
      </type-tag>
    </typedef>
    <typedef name="daddr_t" ref="0x7f3b1058" loc="125:/usr/include/sys/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="daddr_t" ref="0x7f3b1058"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_uint32_t" ref="0x7f440198" loc="401:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1" network="nxle_uint32_t">
        <typename><typedef-ref name="nxle_uint32_t" ref="0x7f440198"/></typename>
      </type-int>
    </typedef>
    <typedef name="key_t" ref="0x7f370af0" loc="155:/usr/include/cygwin/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="key_t" ref="0x7f370af0"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_mutexattr_t" ref="0x7f341350" loc="216:/usr/include/cygwin/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:1" alignment="I:1"><struct-ref name="__pthread_mutexattr_t" ref="0x7f341098"/></type-tag>
        <typename><typedef-ref name="pthread_mutexattr_t" ref="0x7f341350"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="packet_am_id_t" ref="0x7e4d25d0" loc="45:../../../tos/lib/netarch/multihop/PacketEngine.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="packet_am_id_t" ref="0x7e4d25d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int_least16_t" ref="0x7f430c78" loc="46:/usr/include/machine/_types.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__int_least16_t" ref="0x7f430c78"/></typename>
      </type-int>
    </typedef>
    <typedef name="uart_id_t" ref="0x7e871758" loc="72:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
      <documentation loc="60:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10;</short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uart_id_t" ref="0x7e871758"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128TimerCtrlCompare_t" ref="0x7dbde010" loc="193:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x7dbdfd08"/>
        <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x7dbde010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="msg_entry_t" ref="0x7e2d43a8" loc="125:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <documentation loc="118:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
        <short>******** Variables *********</short>
      </documentation>
      <component-ref qname="PacketEngineP"/>
      <type-tag size="I:8" alignment="I:4"><struct-ref scoped="" ref="0x7e2d40d0"/>
        <typename><typedef-ref name="msg_entry_t" scoped="" ref="0x7e2d43a8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_msgAction" ref="0x7e1584e8" loc="195:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-array elements="I:1" size="I:4" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_msgAdded" ref="0x7e158e80" loc="194:../../../tos/lib/netarch/multihop/PacketEngineP.nc">
      <component-ref qname="PacketEngineP"/>
      <type-array elements="I:0" size="I:0" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_composePkt" ref="0x7df83830" loc="151:../../../tos/lib/netarch/dsr/DsrControlP.nc">
      <component-ref qname="DsrControlP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="int_type" ref="0x7dec2988" loc="40:/opt/tinyos-2.x/tos/system/BitVectorC.nc">
      <component-ref qname="BitVectorC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int_type" scoped="" ref="0x7dec2988"/></typename>
      </type-int>
    </typedef>
    <typedef name="__nesc_sillytask_buildTreeTask" ref="0x7ddd1138" loc="84:../../../tos/lib/data/graph/SourceShortestPathP.nc">
      <component-ref qname="SourceShortestPathP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_startDoneTask" ref="0x7dd42a38" loc="88:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:4" size="I:16" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_stopDoneTask" ref="0x7dd42010" loc="93:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:5" size="I:20" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_sendDoneTask" ref="0x7dd435b0" loc="137:/opt/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:6" size="I:24" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="receive_message_t" ref="0x7dce2828" loc="54:/opt/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-tag size="I:48" alignment="I:4"><struct-ref name="receive_message" scoped="" ref="0x7dce2650"/>
        <typename><typedef-ref name="receive_message_t" scoped="" ref="0x7dce2828"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_fired" ref="0x7dab27c0" loc="63:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_updateFromTimer" ref="0x7da917c8" loc="60:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="Timer_t" ref="0x7da84ac0" loc="55:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-tag size="I:12" alignment="I:4"><struct-ref scoped="" ref="0x7da84738"/>
        <typename><typedef-ref name="Timer_t" scoped="" ref="0x7da84ac0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="queue_entry_t" ref="0x7d999c18" loc="49:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-tag size="I:4" alignment="I:4"><struct-ref scoped="" ref="0x7d999a30"/>
        <typename><typedef-ref name="queue_entry_t" scoped="" ref="0x7d999c18"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_errorTask" ref="0x7d99d6f0" loc="161:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_CancelTask" ref="0x7d99c0a8" loc="118:/opt/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
  </typedefs>
</nesc>
